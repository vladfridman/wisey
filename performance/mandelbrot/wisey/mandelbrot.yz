package wisey.performance.testing;

import wisey.lang.CString;
import wisey.lang.MString;
import wisey.lang.IProgram;

controller CMandelbrot implements IProgram {
  state byte[][]* mOut;
  state double[]* mCrb;
  state double[]* mCib;

  private static int getByte(int x, int y){
    int res = 0;
    for (int i = 0; i < 8; i += 2) {
      double Zr1 = mCrb[x + i];
      double Zi1 = mCib[y];

      double Zr2 = mCrb[x + i + 1];
      double Zi2 = mCib[y];

      int b = 0;
      int j = 49;

      do{
      double nZr1 = Zr1 * Zr1 - Zi1 * Zi1 + mCrb[x + i];
      double nZi1 = Zr1 * Zi1 + Zr1 * Zi1 + mCib[y];
      Zr1 = nZr1;
      Zi1 = nZi1;

      double nZr2 = Zr2 * Zr2 - Zi2 * Zi2 + mCrb[x + i + 1];
      double nZi2 = Zr2 * Zi2 + Zr2 * Zi2 + mCib[y];
      Zr2 = nZr2;
      Zi2 = nZi2;

      if (Zr1 * Zr1 + Zi1 * Zi1 > 4) {
        b = b | 2;
        if (b == 3) {
          break;
        }
      }
      if (Zr2 * Zr2 + Zi2 * Zi2 > 4) {
        b = b | 1;
        if (b == 3) {
          break;
        }
      }
      } while(--j > 0);
      res = (res << 2) + b;
    }
    return res ^ -1;
   }

   static void putLine(int y, byte[] line){
      for (int xb = 0; xb < line.length; xb++) {
        line[xb] = (byte) getByte(xb * 8,y);
      }
   }

   public int run(immutable string[] arguments) override {
      int N = 16000;
      // if (args.length>=1) N=Integer.parseInt(args[0]);

      mCrb = new double[N + 7]; 
      mCib = new double[N + 7];
      double invN = 2.0 / N; 
      for (int i = 0; i < N; i++) { 
        mCib[i] = i * invN - 1.0; 
        mCrb[i] = i * invN - 1.5; 
      }
      mOut = new byte[N][(N+7)/8];

      for (int i = 0; i < mOut.getSize(); i++) {
        putLine(i, mOut[i]);
      }

      // OutputStream stream = new BufferedOutputStream(System.out);
      // stream.write(("P4\n"+N+" "+N+"\n").getBytes());
      // for(int i=0;i<N;i++) stream.write(out[i]);
      // stream.close();
   }
}
