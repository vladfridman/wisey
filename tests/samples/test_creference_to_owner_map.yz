package systems.vos.wisey.compiler.tests;

import wisey.data.CReferenceToOwnerMap;
import wisey.lang.IProgram;

model MCar {
  string mMake;

  public string getMake() {
    return mMake;
  }
}

controller CProgram implements IProgram {
  inject CReferenceToOwnerMap* mMap;

  public int run(immutable string[] arguments) override {
    string toyotaMake = "Toyota";
    string bmwMake = "BMW";
    string mercedesMake = "Mercedes";
    MCar* toyota = build(MCar).withMake(toyotaMake).onHeap(); 
    MCar* bmw = build(MCar).withMake(bmwMake).onHeap(); 
    MCar* mercedes = build(MCar).withMake(mercedesMake).onHeap();

    mMap.put(toyota.getMake(), toyota);
    mMap.put(bmw.getMake(), bmw);
    mMap.put(mercedes.getMake(), mercedes);

    printout("Hashmap size: " + mMap.getSize() + "\n");

    if (bmw == null) {
      printout("bmw is null\n");
    } else {
      printout("bmw is not null\n");
    }

    MCar car = mMap.get(toyotaMake);
    printout("Lookup " + toyotaMake + ": " + car.getMake() + "\n");
    car = mMap.get(bmwMake);
    printout("Lookup " + bmwMake + ": " + car.getMake() + "\n");
    car = mMap.get(mercedesMake);
    printout("Lookup " + mercedesMake + ": " + car.getMake() + "\n");

    mMap.erase(bmwMake);
    car = mMap.get(bmwMake);
    if (car == null) {
      printout("BMW was erased\n");
    } else {
      printout("BMW is still there\n");
    }

    MCar* carOwner = mMap.take(toyotaMake);
    printout("Take result: " + carOwner.getMake() + "\n");
    carOwner = null;
    car = mMap.get(toyotaMake);
    if (car == null) {
      printout("Toyota was erased\n");
    } else {
      printout("Toyota is still there\n");
    }

    mMap.erase(toyotaMake);
    mMap.erase(bmwMake);
    mMap.erase(mercedesMake);

    car = mMap.get(mercedesMake);
    if (car == null) {
      printout("Mercedes was erased\n");
    } else {
      printout("Mercedes is still there\n");
    }

    return 1;
  }
}

bind(IProgram).to(CProgram);
