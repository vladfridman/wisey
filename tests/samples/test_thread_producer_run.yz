package systems.vos.wisey.compiler.tests;

import wisey.lang.IProgram;
import wisey.lang.CCallStack;
import wisey.lang.threads.IProducerThread;
import wisey.lang.threads.IThread;
import wisey.lang.threads.TDefaultProducer;

thread TProducer implements IProducerThread {
  inject TDefaultProducer* mDefaultProducer;
  receive int mSize;

  public void produce() {
    IThread.sleep(1);
    printout("This is producer thread!\n");
    for (int i = 0; i < 2; i++) {
      MProducerResult* result = builder(MProducerResult).withResult(i).build();
      printout("Adding result " + i + "\n");
      result = thread.send(result);
      while (result != null) {
        printout("Could not add result " + i + ", sleeping\n");
        IThread.sleep(1);
        result = thread.send(result);
      }
    }
  }

  public void start() exposed {
    mDefaultProducer.startProducer(this, mSize);
  }

  public boolean hasStarted() exposed {
    return mDefaultProducer.hasStarted();
  }

  public boolean hasResult() exposed {
    return mDefaultProducer.hasResult();
  }

  public boolean wasCancelled() exposed {
    return mDefaultProducer.wasCancelled();
  }

  public void cancel() exposed {
    mDefaultProducer.cancel();
  }

  public ::wisey::model* consume() exposed {
    return mDefaultProducer.consume();
  }

  public ::wisey::model* send(::wisey::model* message) {
    return mDefaultProducer.send(message);
  }

  public CCallStack getCallStack() {
    return mDefaultProducer.getCallStack();
  }

  public model MProducerResult {
    int mResult;

    public int getResult() {
      return mResult;
    }
  }
}

controller CProgram implements IProgram {
  inject TProducer* mProducer.withSize(3);

  public int run() {
    printout("Thread started = " + mProducer.hasStarted() + ", has result = " + mProducer.hasResult() + "\n");
    printout("Starting producer thread\n");
    mProducer.start();
    printout("Producer thread started\n");
    printout("Thread started = " + mProducer.hasStarted() + ", has result = " + mProducer.hasResult() + "\n");
    IThread.sleep(2);
    while (mProducer.hasResult()) {
      int result = ((TProducer.MProducerResult) mProducer.consume()).getResult();
      printout("Producer thread finished with result: " + result + "\n");
      printout("Thread started = " + mProducer.hasStarted() + ", has result = " + mProducer.hasResult() + "\n");
      IThread.sleep(1);
    }
    mProducer.cancel();
    return 0;
  }
}

bind(IProgram).to(CProgram);
