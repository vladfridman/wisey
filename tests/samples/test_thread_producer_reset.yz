package systems.vos.wisey.compiler.tests;

import wisey.lang.IProgram;
import wisey.threads.CProducerThread;
import wisey.threads.IProducer;

model MProducer implements IProducer {

  public void produce() override {
    thread.sleep(1);
    printout("This is producer thread!\n");
    for (int i = 0; i < 2; i++) {
      MProducerResult* result = builder(MProducerResult).withResult(i).build();
      printout("Adding result " + i + "\n");
      result = thread.send(result);
      while (result != null) {
        printout("Could not add result " + i + ", sleeping\n");
        thread.sleep(1);
        result = thread.send(result);
      }
    }
  }

  public model MProducerResult {
    int mResult;

    public int getResult() {
      return mResult;
    }
  }
}

controller CProgram implements IProgram {
  inject CProducerThread* mProducerThread;

  public long run(immutable string[] arguments) override {
    printout("Thread started = " + mProducerThread.isStarted() + ", has result = " +
      mProducerThread.hasResult() + "\n");
    printout("Starting producer thread\n");
    mProducerThread.start(builder(MProducer).build(), 3);
    printout("Producer thread started\n");
    printout("Thread started = " + mProducerThread.isStarted() + ", has result = " + 
      mProducerThread.hasResult() + "\n");
    thread.sleep(2);
    while (mProducerThread.hasResult()) {
      int result = ((MProducer.MProducerResult) mProducerThread.consume()).getResult();
      printout("Producer thread finished with result: " + result + "\n");
      printout("Thread started = " + mProducerThread.isStarted() + ", has result = " + 
        mProducerThread.hasResult() + "\n");
      thread.sleep(1);
    }

    mProducerThread.reset();
    printout("Thread started = " + mProducerThread.isStarted() + ", has result = " + 
      mProducerThread.hasResult() + "\n");
    printout("Starting producer thread\n");
    mProducerThread.start(builder(MProducer).build(), 3);
    printout("Producer thread started\n");
    printout("Thread started = " + mProducerThread.isStarted() + ", has result = " + 
      mProducerThread.hasResult() + "\n");
    thread.sleep(2);
    while (mProducerThread.hasResult()) {
      int result = ((MProducer.MProducerResult) mProducerThread.consume()).getResult();
      printout("Producer thread finished with result: " + result + "\n");
      printout("Thread started = " + mProducerThread.isStarted() + ", has result = " + 
        mProducerThread.hasResult() + "\n");
      thread.sleep(1);
    }
    mProducerThread.cancel();
    return 0;
  }
}

bind(IProgram).to(CProgram);
