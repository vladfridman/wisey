package systems.vos.wisey.compiler.tests;

import wisey.lang.IProgram;
import wisey.lang.CCallStack;
import wisey.lang.threads.CDefaultWorker;
import wisey.lang.threads.IThread;
import wisey.lang.threads.IWorkerThread;

thread TWorker implements IWorkerThread {
  inject CDefaultWorker* mDefaultWorker;

  public void run() override conceal {
    sleep(5);
    printout("This is worker thread!\n");
    MResult* result = builder(MResult).withResult(5).build();
    thread.send(result);
  }

  public void start() override reveal {
    mDefaultWorker.start(this);
  }

  public boolean isStarted() override reveal {
    return mDefaultWorker.isStarted();
  }

  public boolean isFinished() override reveal {
    return mDefaultWorker.isFinished();
  }

  public boolean isCancelled() override reveal {
    return mDefaultWorker.isCancelled();
  }

  public ::wisey::model* awaitResult() override reveal {
    return mDefaultWorker.awaitResult();
  }

  public void cancel() override reveal {
    mDefaultWorker.cancel();
  }

  public void reset() override reveal {
    mDefaultWorker.reset();
  }

  public ::wisey::model* send(::wisey::model* message) override conceal {
    return mDefaultWorker.send(message);
  }

  public CCallStack getCallStack() override conceal {
    return mDefaultWorker.getCallStack();
  }

  public void exit() override conceal {
    mDefaultWorker.exit();
  }

  public model MResult {
    int mResult;

    public int getResult() {
      return mResult;
    }
  }
}

controller CProgram implements IProgram {
  inject TWorker* mWorker;

  public int run() override {
    printout("Thread started = " + mWorker.isStarted() + ", has result = " + mWorker.isFinished() + 
      ", was cancelled = " + mWorker.isCancelled() + "\n");
    printout("Starting worker thread\n");
    mWorker.start();
    printout("Worker thread started\n");
    printout("Thread started = " + mWorker.isStarted() + ", has result = " + mWorker.isFinished() + 
      ", was cancelled = " + mWorker.isCancelled() + "\n");
    mWorker.cancel();
    printout("Worker thread cancelled\n");
    printout("Thread started = " + mWorker.isStarted() + ", has result = " + mWorker.isFinished() + 
      ", was cancelled = " + mWorker.isCancelled() + "\n");
    if (mWorker.awaitResult() == null) {
      printout("Thread result is null\n");
    }
    return 0;
  }
}

bind(IProgram).to(CProgram);
