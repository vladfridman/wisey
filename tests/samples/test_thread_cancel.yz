package systems.vos.wisey.compiler.tests;

import wisey.lang.IProgram;
import wisey.lang.CCallStack;
import wisey.lang.threads.CWorkerThreadRunner;
import wisey.lang.threads.IThread;
import wisey.lang.threads.IWorkerThread;
import wisey.lang.threads.TDefaultWorker;

thread TWorker implements IWorkerThread {
  inject TDefaultWorker* mDefaultWorker;

  public void work() {
    IThread.sleep(5);
    printout("This is worker thread!\n");
    MResult* result = builder(MResult).withResult(5).build();
    thread.send(result);
  }

  public void start() {
    mDefaultWorker.startWorker(this);
  }

  public boolean hasStarted() {
    return mDefaultWorker.hasStarted();
  }

  public boolean hasResult() {
    return mDefaultWorker.hasResult();
  }

  public boolean wasCancelled() {
    return mDefaultWorker.wasCancelled();
  }

  public ::wisey::object* awaitResult() {
    return mDefaultWorker.awaitResult();
  }

  public void cancel() {
    mDefaultWorker.cancel();
  }

  public ::wisey::object* send(::wisey::object* message) {
    return mDefaultWorker.send(message);
  }

  public CCallStack getCallStack() {
    return mDefaultWorker.getCallStack();
  }

  public model MResult {
    int mResult;

    public int getResult() {
      return mResult;
    }
  }
}

controller CProgram implements IProgram {
  inject TWorker* mWorker;

  public int run() {
    printout("Thread started = " + mWorker.hasStarted() + ", has result = " + mWorker.hasResult() + 
      ", was cancelled = " + mWorker.wasCancelled() + "\n");
    printout("Starting worker thread\n");
    mWorker.start();
    printout("Worker thread started\n");
    printout("Thread started = " + mWorker.hasStarted() + ", has result = " + mWorker.hasResult() + 
      ", was cancelled = " + mWorker.wasCancelled() + "\n");
    mWorker.cancel();
    printout("Worker thread cancelled\n");
    printout("Thread started = " + mWorker.hasStarted() + ", has result = " + mWorker.hasResult() + 
      ", was cancelled = " + mWorker.wasCancelled() + "\n");
    if (mWorker.awaitResult() == null) {
      printout("Thread result is null\n");
    }
    return 0;
  }
}

bind(IProgram).to(CProgram);
