package systems.vos.wisey.compiler.tests;

import wisey.lang.IProgram;
import wisey.lang.CCallStack;
import wisey.lang.threads.CDefaultWorker;
import wisey.lang.threads.IThread;
import wisey.lang.threads.IWorkerThread;

thread TWorker implements IWorkerThread {
  inject CDefaultWorker* mDefaultWorker;

  public void run() conceal {
    start();
  }

  public void start() reveal {
    mDefaultWorker.start(this);
  }

  public boolean isStarted() reveal {
    return mDefaultWorker.isStarted();
  }

  public boolean isFinished() reveal {
    return mDefaultWorker.isFinished();
  }

  public boolean isCancelled() reveal {
    return mDefaultWorker.isCancelled();
  }

  public ::wisey::model* awaitResult() reveal {
    return mDefaultWorker.awaitResult();
  }

  public void cancel() reveal {
    mDefaultWorker.cancel();
  }

  public void reset() reveal {
    mDefaultWorker.reset();
  }

  public ::wisey::model* send(::wisey::model* message) conceal {
    return mDefaultWorker.send(message);
  }

  public CCallStack getCallStack() conceal {
    return mDefaultWorker.getCallStack();
  }

  public void exit() conceal {
    mDefaultWorker.cancel();
  }
}

controller CProgram implements IProgram {
  inject TWorker* mWorker;

  public int run() {
    mWorker.start();
    mWorker.awaitResult();

    return 0;
  }
}

bind(IProgram).to(CProgram);
