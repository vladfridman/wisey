package systems.vos.wisey.compiler.tests;

import wisey.data.CReferenceToReferenceMap;
import wisey.lang.IProgram;

model MCar {
  string mMake;

  public string getMake() {
    return mMake;
  }
}

controller CProgram implements IProgram {
  public int run(immutable string[] arguments) override {
    MCar* toyota = build(MCar).withMake("Toyota").onHeap(); 
    MCar* bmw = build(MCar).withMake("BMW").onHeap(); 
    MCar* mercedes = build(MCar).withMake("Mercedes").onHeap();
    CReferenceToReferenceMap* map = CReferenceToReferenceMap.create();

    map.put(toyota.getMake(), toyota);
    map.put(bmw.getMake(), bmw);
    map.put(bmw.getMake(), bmw);
    map.put(mercedes.getMake(), mercedes);

    printout("Hashmap size: " + map.getSize() + "\n");

    MCar car = map.get(toyota.getMake());
    printout("Lookup " + toyota.getMake() + ": " + car.getMake() + "\n");
    car = map.get(bmw.getMake());
    printout("Lookup " + bmw.getMake() + ": " + car.getMake() + "\n");
    car = map.get(mercedes.getMake());
    printout("Lookup " + mercedes.getMake() + ": " + car.getMake() + "\n");

    map.erase(bmw.getMake());
    car = map.get(bmw.getMake());
    if (car == null) {
      printout("BMW was erased\n");
    } else {
      printout("BMW is still there\n");
    }

    map.erase(toyota.getMake());
    map.erase(bmw.getMake());
    map.erase(mercedes.getMake());

    car = map.get(toyota.getMake());
    if (car == null) {
      printout("Toyota was erased\n");
    } else {
      printout("Toyota is still there\n");
    }
    car = map.get(mercedes.getMake());
    if (car == null) {
      printout("Mercedes was erased\n");
    } else {
      printout("Mercedes is still there\n");
    }

    return 1;
  }
}

bind(IProgram, CProgram);
