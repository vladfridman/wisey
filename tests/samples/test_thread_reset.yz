package systems.vos.wisey.compiler.tests;

import wisey.lang.IProgram;
import wisey.threads.CWorkerThread;
import wisey.threads.IWorker;

model MWorker implements IWorker {

  public void work() override {
    thread.sleep(1);
    printout("This is worker thread!\n");
    MResult* result = build(MResult).withResult(5).onHeap();
    thread.send(result);
  }

  public model MResult {
    int mResult;

    public int getResult() {
      return mResult;
    }
  }
}

controller CProgram implements IProgram {
  inject CWorkerThread* mWorkerThread;

  public int run(immutable string[] arguments) override {
    printout("Thread started = " + mWorkerThread.isStarted() + ", has finished = " + mWorkerThread.isFinished() + "\n");
    printout("Starting worker thread\n");
    mWorkerThread.start(build(MWorker).onHeap());
    printout("Worker thread started\n");
    printout("Thread started = " + mWorkerThread.isStarted() + ", has finished = " + mWorkerThread.isFinished() + "\n");
    int result = ((MWorker.MResult) mWorkerThread.awaitResult()).getResult();
    printout("Worker thread finished with result: " + result + "\n");
    printout("Thread started = " + mWorkerThread.isStarted() + ", has finished = " + mWorkerThread.isFinished() + "\n");

    mWorkerThread.reset();
    printout("Thread started = " + mWorkerThread.isStarted() + ", has finished = " + mWorkerThread.isFinished() + "\n");
    printout("Starting worker thread\n");
    mWorkerThread.start(build(MWorker).onHeap());
    printout("Worker thread started\n");
    printout("Thread started = " + mWorkerThread.isStarted() + ", has finished = " + mWorkerThread.isFinished() + "\n");
    result = ((MWorker.MResult) mWorkerThread.awaitResult()).getResult();
    printout("Worker thread finished with result: " + result + "\n");
    printout("Thread started = " + mWorkerThread.isStarted() + ", has finished = " + mWorkerThread.isFinished() + "\n");

    return result;
  }
}

bind(IProgram).to(CProgram);
