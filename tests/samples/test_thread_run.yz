package systems.vos.wisey.compiler.tests;

import wisey.lang.CCallStack;
import wisey.lang.CWorkerThreadRunner;
import wisey.lang.IProgram;
import wisey.lang.IWorkerThread;

model MResult {
  int mResult;

  public int getResult() {
    return mResult;
  }
}

thread TWorker implements IWorkerThread {
  inject CWorkerThreadRunner* mWorkerThreadRunner;
  inject CCallStack* mCallStack;
  state MResult* mResult;

  public void start() {
    mWorkerThreadRunner.createThread(this);
  }

  public ::llvm::i8* waitForResult() {
    mWorkerThreadRunner.joinThread();

    return mResult;
  }

  public void work() {
    printout("This is worker thread!\n");
    MResult* result = builder(MResult).withResult(5).build();
    thread.send(result);
  }

  public void send(::llvm::i8* message) {
    mResult = message;
    mWorkerThreadRunner.exitThread();
  }

  public CCallStack getCallStack() {
    printout("Getting call stack!\n");
    return mCallStack;
  }
}

controller CProgram implements IProgram {
  inject TWorker* mWorker;

  public int run() {
    printout("Starting worker thread\n");
    mWorker.start();
    int result = ((MResult) mWorker.waitForResult()).getResult();
    printout("Worker thread started\n");
    printout("Worker thread result: " + result + "\n");

    return result;
  }
}

bind(CProgram).to(IProgram);
