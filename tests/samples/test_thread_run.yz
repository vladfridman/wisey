package systems.vos.wisey.compiler.tests;

import wisey.lang.CCallStack;
import wisey.lang.IProgram;
import wisey.lang.IThread;

::llvm::function ::llvm::void pthread_create(::llvm::struct::_opaque_pthread_t**, 
                                             ::llvm::struct::_opaque_pthread_attr_t*, 
                                             ::llvm::i8* (::llvm::i8*)*, 
                                             ::llvm::i8*);

::llvm::function ::llvm::void pthread_join(::llvm::struct::_opaque_pthread_t*, ::llvm::i8**);

::llvm::function ::llvm::void pthread_exit(::llvm::i8*);

thread TWorker sends int implements IThread {
  inject CCallStack* mCallStack;

  state ::llvm::struct::_opaque_pthread_t* mMyNativeThread;
  state int mMyMessage;

  public void run() {
    printout("This is worker thread!\n");
    thread.send(5);
  }

  ::llvm::function ::llvm::i8* runBridge(::llvm::i8* argument) {
    ::llvm::function::systems.vos.wisey.compiler.tests.TWorker.
      run((TWorker) argument, 
          (IThread) ((TWorker) argument), 
          ::llvm::function::systems.vos.wisey.compiler.tests.TWorker.getCallStack((TWorker) argument, 
                                                                                  (IThread) ((TWorker) argument), 
                                                                                  (CCallStack) null));

    return argument;
  }

  public int start() {
    ::llvm::function::pthread_create(::llvm::reference(mMyNativeThread), 
                                        (::llvm::struct::_opaque_pthread_attr_t*) null, 
                                        runBridge, 
                                        (::llvm::i8*) this);
    ::llvm::function::pthread_join(mMyNativeThread, (::llvm::i8**) null);

    return mMyMessage;
  }

  public void send(int message) {
    mMyMessage = message;
    ::llvm::function::pthread_exit((::llvm::i8*) null);
  }

  public CCallStack getCallStack() {
    printout("Getting call stack!\n");
    return mCallStack;
  }
}

controller CProgram implements IProgram {
  inject TWorker* mWorker;

  public int run() {
    printout("Starting worker thread\n");
    int result = mWorker.start();
    printout("Worker thread started\n");
    printout("Worker thread result: " + result + "\n");

    return result;
  }
}

bind(CProgram).to(IProgram);
