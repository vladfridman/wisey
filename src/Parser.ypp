%{
  #include <sstream>
  
  #include "wisey/AccessLevel.hpp"
  #include "wisey/AdditiveMultiplicativeExpression.hpp"
  #include "wisey/ArrayAllocation.hpp"
  #include "wisey/ArrayAllocationStatic.hpp"
  #include "wisey/ArrayElementExpression.hpp"
  #include "wisey/ArrayOwnerTypeSpecifier.hpp"
  #include "wisey/ArraySpecificOwnerTypeSpecifier.hpp"
  #include "wisey/ArraySpecificTypeSpecifier.hpp"
  #include "wisey/ArrayTypeSpecifier.hpp"
  #include "wisey/Assignment.hpp"
  #include "wisey/BindAction.hpp"
  #include "wisey/Block.hpp"
  #include "wisey/BooleanConstant.hpp"
  #include "wisey/BooleanNotExpression.hpp"
  #include "wisey/BreakStatement.hpp"
  #include "wisey/Catch.hpp"
  #include "wisey/CaseStatement.hpp"
  #include "wisey/CastExpression.hpp"
  #include "wisey/CharConstant.hpp"
  #include "wisey/CompoundStatement.hpp"
  #include "wisey/ConditionalExpression.hpp"
  #include "wisey/ConstantDeclaration.hpp"
  #include "wisey/ConstantReference.hpp"
  #include "wisey/ContinueStatement.hpp"
  #include "wisey/ControllerDefinition.hpp"
  #include "wisey/ControllerTypeSpecifier.hpp"
  #include "wisey/ControllerTypeSpecifierFull.hpp"
  #include "wisey/DefaultCaseStatement.hpp"
  #include "wisey/DoStatement.hpp"
  #include "wisey/DoubleConstant.hpp"
  #include "wisey/EmptyExpression.hpp"
  #include "wisey/EmptyStatement.hpp"
  #include "wisey/ExitStatement.hpp"
  #include "wisey/ExpressionStatement.hpp"
  #include "wisey/ExternalControllerDefinition.hpp"
  #include "wisey/ExternalInterfaceDefinition.hpp"
  #include "wisey/ExternalMethodDeclaration.hpp"
  #include "wisey/ExternalModelDefinition.hpp"
  #include "wisey/ExternalNodeDefinition.hpp"
  #include "wisey/ExternalThreadDefinition.hpp"
  #include "wisey/ExternalStaticMethodDeclaration.hpp"
  #include "wisey/FakeExpression.hpp"
  #include "wisey/FixedFieldDeclaration.hpp"
  #include "wisey/FloatConstant.hpp"
  #include "wisey/ForStatement.hpp"
  #include "wisey/Identifier.hpp"
  #include "wisey/IdentifierChain.hpp"
  #include "wisey/IfElseStatement.hpp"
  #include "wisey/IfStatement.hpp"
  #include "wisey/IGlobalStatement.hpp"
  #include "wisey/ImportStatement.hpp"
  #include "wisey/IncrementExpression.hpp"
  #include "wisey/InjectedFieldDeclaration.hpp"
  #include "wisey/InjectionArgument.hpp"
  #include "wisey/Injector.hpp"
  #include "wisey/IntConstant.hpp"
  #include "wisey/InterfaceDefinition.hpp"
  #include "wisey/InterfaceTypeSpecifier.hpp"
  #include "wisey/InterfaceTypeSpecifierFull.hpp"
  #include "wisey/IControllerTypeSpecifier.hpp"
  #include "wisey/IInterfaceTypeSpecifier.hpp"
  #include "wisey/IModelTypeSpecifier.hpp"
  #include "wisey/INodeTypeSpecifier.hpp"
  #include "wisey/IObjectElementDeclaration.hpp"
  #include "wisey/IObjectDefinition.hpp"
  #include "wisey/IObjectTypeSpecifier.hpp"
  #include "wisey/ITypeSpecifier.hpp"
  #include "wisey/Log.hpp"
  #include "wisey/LogicalAndExpression.hpp"
  #include "wisey/LogicalOrExpression.hpp"
  #include "wisey/LongConstant.hpp"
  #include "wisey/MethodCall.hpp"
  #include "wisey/MethodDeclaration.hpp"
  #include "wisey/MethodSignatureDeclaration.hpp"
  #include "wisey/ModelDefinition.hpp"
  #include "wisey/ModelTypeSpecifier.hpp"
  #include "wisey/ModelTypeSpecifierFull.hpp"
  #include "wisey/NegateExpression.hpp"
  #include "wisey/NodeDefinition.hpp"
  #include "wisey/NodeTypeSpecifier.hpp"
  #include "wisey/NodeTypeSpecifierFull.hpp"
  #include "wisey/NullExpression.hpp"
  #include "wisey/ObjectBuilder.hpp"
  #include "wisey/ObjectBuilderArgument.hpp"
  #include "wisey/ObjectOwnerTypeSpecifier.hpp"
  #include "wisey/PackageType.hpp"
  #include "wisey/PrimitiveTypes.hpp"
  #include "wisey/PrimitiveTypeSpecifier.hpp"
  #include "wisey/PrintOutStatement.hpp"
  #include "wisey/PrintErrStatement.hpp"
  #include "wisey/ProgramFile.hpp"
  #include "wisey/ReceivedFieldDeclaration.hpp"
  #include "wisey/RelationalExpression.hpp"
  #include "wisey/ReturnStatement.hpp"
  #include "wisey/ReturnVoidStatement.hpp"
  #include "wisey/StringLiteral.hpp"
  #include "wisey/StateFieldDeclaration.hpp"
  #include "wisey/StaticMethodCall.hpp"
  #include "wisey/StaticMethodDeclaration.hpp"
  #include "wisey/SwitchStatement.hpp"
  #include "wisey/ThreadExpression.hpp"
  #include "wisey/ThreadDefinition.hpp"
  #include "wisey/ThreadTypeSpecifier.hpp"
  #include "wisey/ThreadTypeSpecifierFull.hpp"
  #include "wisey/TryCatchStatement.hpp"
  #include "wisey/ThrowStatement.hpp"
  #include "wisey/TypeComparisionExpression.hpp"
  #include "wisey/VariableDeclaration.hpp"
  #include "wisey/WhileStatement.hpp"
  
  using namespace std;
  using namespace wisey;
  
  ProgramFile *programFile;
  PackageType* filePackageType;
  
  extern int yylex();
  extern int yylineno;
  extern std::string SourceFile;

  #define YYDEBUG 1

  void yyerror(const char *error_msg) {
    printf("%s(%d): %s\n", SourceFile.c_str(), yylineno, error_msg);
    exit(1);
  }
%}

%error-verbose
%locations

/** 
 * Data types used for parsing
 */
%union {
  wisey::IExpression* expression;
  wisey::IStatement* statement;
  wisey::IGlobalStatement* global_statement;
  wisey::GlobalStatementList* global_statement_list;
  wisey::Block* block;
  wisey::CompoundStatement* compound_statement;
  wisey::CaseStatement* case_statement;
  wisey::DefaultCaseStatement* default_case_statement;
  wisey::SwitchCases* switch_cases;
  wisey::ITypeSpecifier* type_specifier;
  wisey::ArrayTypeSpecifier* array_type_specifier;
  wisey::ArrayOwnerTypeSpecifier* array_owner_type_specifier;
  wisey::ArraySpecificTypeSpecifier* array_specific_type_specifier;
  wisey::IObjectDefinition* object_definition;
  wisey::IObjectTypeSpecifier* object_type_specifier;
  wisey::Identifier* identifier;
  wisey::VariableDeclaration* variable_declaration;
  wisey::ObjectBuilderArgument* object_builder_argument;
  wisey::ObjectBuilderArgumentList* object_builder_argument_list;
  wisey::InjectionArgument* injection_argument;
  wisey::InjectionArgumentList* injection_argument_list;
  wisey::IModelTypeSpecifier* model_type_specifier;
  wisey::IControllerTypeSpecifier* controller_type_specifier;
  wisey::IInterfaceTypeSpecifier* interface_type_specifier;
  wisey::IObjectElementDeclaration* object_element;
  wisey::INodeTypeSpecifier* node_type_specifier;
  wisey::IThreadTypeSpecifier* thread_type_specifier;
  wisey::AccessLevel access_specifier;
  wisey::MethodSignatureDeclaration* method_signature;
  wisey::Catch* catch_clause;
  wisey::ProgramFile* program_file;
  std::vector<wisey::Catch*>* catch_vector;
  std::vector<wisey::VariableDeclaration*>* variable_vector;
  std::vector<const wisey::IExpression*>* expression_vector;
  std::vector<wisey::MethodSignatureDeclaration*>* method_signature_vector;
  std::tuple<std::vector<wisey::IObjectElementDeclaration*>, 
             std::vector<wisey::IObjectDefinition*>>* object_element_list;
  std::vector<wisey::ITypeSpecifier*>* type_specifier_list;
  std::vector<wisey::IModelTypeSpecifier*>* model_type_specifier_list;
  std::vector<wisey::IInterfaceTypeSpecifier*>* interface_list;
  std::list<const wisey::IExpression*>* list_of_const_expressions;
  std::string* string;
  unsigned long unsignedlong;
  int token;
}

/**
 * Tokens used in wisey 
 */
%token <string> TIDENTIFIER TCHAR TINTEGER TLONG TFLOAT TDOUBLE STRING_LITERAL TMODELIDENTIFIER
%token <string> TFIELDIDENTIFIER TINTERFACEIDENTIFIER TCONTROLLERIDENTIFIER TNODEIDENTIFIER
%token <string> TCONSTANTIDENTIFIER TTHREADIDENTIFIER

%token <token> TANDOP TBIND TBREAK TBUILD TBUILDER TCASE TCATCH TCEQ TCGE TCLE TINCOP
%token <token> TCONSTANT TCONTINUE TCNE TCONTROLLER TDECOP TDO TELSE TEXIT TEXTENDS TEXTERNAL
%token <token> TDEFAULT TFALLTHROUGH TFALSE TFIXED TFOR TIF TIMPLEMENTS TIMPORT TINJECTOR TINJECT
%token <token> TINSTANCEOF TINTERFACE TMODEL TNEW TNODE TNULL TOROP TPACKAGE TPRINTERR TPRINTOUT
%token <token> TPRIVATE TPUBLIC TRECEIVE TRETURN TSENDS TSTATE TSTATIC
%token <token> TSWITCH TTHREAD TTHROW TTHROWS TTO TTRY TTRUE TTYPEBOOLEAN 
%token <token> TTYPECHAR TTYPEDOUBLE TTYPEFLOAT TTYPEINT TTYPELONG TTYPESTRING TTYPEVOID TWHILE

/**
 * Parsing tree node types
 */
%type <identifier> identifier
%type <string> package_optional package_name
%type <expression> string_literal constant_value expression multiplicative_expression 
%type <expression> additive_expression relational_expression equality_expression
%type <expression> logical_and_expression logical_or_expression
%type <expression> conditional_expression postfix_expression object_builder
%type <expression> cast_expression primary_expression assignment unary_expression
%type <expression> type_comparision_expression injection array_allocation static_array_allocation
%type <expression> thread_expression constant_reference static_method_call field_identifier
%type <variable_vector> method_declaration_arguments
%type <expression_vector> call_arguments string_concatenation_list static_array_elements
%type <block> block_item_list 
%type <program_file> program
%type <statement> exit_statement statement variable_declaration
%type <statement> method_argument_declaration jump_statement block_item
%type <statement> declaration expression_statement iteration_statement
%type <statement> print_statement selection_statement 
%type <statement> throw_statement try_catch_statement
%type <global_statement> bind_action import_statement global_statement
%type <object_definition> controller_definition interface_definition model_definition
%type <object_definition> node_definition thread_definition external_thread_definition
%type <object_definition> object_definition external_object_definition external_model_definition
%type <object_definition> external_node_definition external_controller_definition
%type <object_definition> external_interface_definition
%type <object_definition> inner_controller_definition inner_interface_definition 
%type <object_definition> inner_model_definition inner_node_definition
%type <object_definition> inner_object_definition
%type <global_statement_list> global_statement_list
%type <compound_statement> compound_statement
%type <case_statement> case_statement
%type <default_case_statement> default_case_statement
%type <switch_cases> case_statement_list case_statement_list_with_default
%type <object_element> object_element_declaration external_object_element_declaration
%type <object_element> field_declaration method_definition static_method_definition
%type <object_element> external_method_declaration interface_static_method_definition
%type <object_element> constant_declaration interface_element_declaration method_signature
%type <object_element> external_interface_element_declaration external_static_method_declaration
%type <object_element_list> object_element_declaration_list 
%type <object_element_list> external_object_element_declaration_list
%type <object_element_list> interface_element_delcaration_list
%type <object_element_list> external_interface_element_delcaration_list
%type <type_specifier> type_specifier primitive_type_specifier object_owner_type_specifier 
%type <type_specifier> non_array_type_specifier injectable_type_specifier 
%type <type_specifier> array_specific_owner_type_specifier sends_object
%type <array_type_specifier> array_type_specifier
%type <array_owner_type_specifier> array_owner_type_specifier
%type <array_specific_type_specifier> array_specific_type_specifier
%type <object_type_specifier> top_level_object_type_specifier 
%type <object_type_specifier> buildable_concrete_object_type_specifier
%type <object_type_specifier> injectable_object_type_specifier inner_object_type_specifier
%type <object_builder_argument_list> object_builder_argument_list
%type <object_builder_argument> object_builder_argument
%type <injection_argument_list> injection_argument_list
%type <injection_argument> injection_argument
%type <model_type_specifier> model_type_specifier exception_type_specifier 
%type <model_type_specifier> model_type_specifier_full inner_model_type_specifier 
%type <model_type_specifier> inner_model_type_specifier_full
%type <thread_type_specifier> thread_type_specifier thread_type_specifier_full 
%type <thread_type_specifier> inner_thread_type_specifier inner_thread_type_specifier_full
%type <controller_type_specifier> controller_type_specifier controller_type_specifier_full
%type <controller_type_specifier> inner_controller_type_specifier inner_controller_type_specifier_full
%type <interface_type_specifier> interface_type_specifier interface_type_specifier_full
%type <interface_type_specifier> inner_interface_type_specifier inner_interface_type_specifier_full
%type <node_type_specifier> node_type_specifier node_type_specifier_full
%type <node_type_specifier> inner_node_type_specifier inner_node_type_specifier_full
%type <access_specifier> access_specifier
%type <catch_clause> catch_clause
%type <catch_vector> catch_block
%type <model_type_specifier_list> method_exceptions exception_type_specifier_list
%type <interface_list> interface_list implmeneted_interfaces extends_interfaces
%type <list_of_const_expressions> array_dimensions
%type <unsignedlong> array_undefined_dimensions_list;

%left '+' '-'
%left '*' '/'

/**
 * Expect one shift/reduce conflit: the dangling ELSE
 */
%expect 0

/**
 * Top-most parsing tree node
 */
%start program

%%

program
  : package_optional global_statement_list
    { programFile = new ProgramFile(*$1, *$2); delete $1; delete $2; }
  ;

package_optional
  : /* blank */ { filePackageType = NULL; $$ = new std::string(""); }
  | TPACKAGE package_name ';' {  filePackageType = new PackageType(*$2); $$ = $2; }
  ;

package_name
  : TIDENTIFIER
  | package_name '.' TIDENTIFIER
    { $$ = $1; $$->append(std::string(".")); $$->append(*$3); delete $3; }
  ;

global_statement_list
  : global_statement { $$ = new GlobalStatementList(); $$->push_back($1); }
  | global_statement_list global_statement { $1->push_back($2); }
  ;

global_statement
  : object_definition { $$ = (IGlobalStatement*) $1; }
  | external_object_definition { $$ = (IGlobalStatement*) $1; }
  | bind_action
  | import_statement
  ;

inner_object_definition
  : inner_controller_definition
  | inner_interface_definition
  | inner_model_definition
  | inner_node_definition

object_definition
  : controller_definition
  | interface_definition
  | model_definition
  | node_definition
  | thread_definition
  ;

external_object_definition
  : external_controller_definition
  | external_interface_definition
  | external_model_definition
  | external_node_definition
  | external_thread_definition
  ;

import_statement
  : TIMPORT interface_type_specifier_full ';' { $$ = new ImportStatement($2); }
  | TIMPORT model_type_specifier_full ';' { $$ = new ImportStatement($2); }
  | TIMPORT controller_type_specifier_full ';' { $$ = new ImportStatement($2); }
  | TIMPORT node_type_specifier_full ';' { $$ = new ImportStatement($2); }
  | TIMPORT thread_type_specifier_full ';' { $$ = new ImportStatement($2); }
  | TIMPORT inner_interface_type_specifier_full ';' { $$ = new ImportStatement($2); }
  | TIMPORT inner_model_type_specifier_full ';' { $$ = new ImportStatement($2); }
  | TIMPORT inner_controller_type_specifier_full ';' { $$ = new ImportStatement($2); }
  | TIMPORT inner_node_type_specifier_full ';' { $$ = new ImportStatement($2); }
  | TIMPORT inner_thread_type_specifier_full ';' { $$ = new ImportStatement($2); }
  ;

bind_action
  : TBIND '(' controller_type_specifier ')' '.' TTO '(' interface_type_specifier ')' ';'
    { $$ = new BindAction($3, $8); }
  | TBIND '(' inner_controller_type_specifier ')' '.' TTO '(' interface_type_specifier ')' ';'
    { $$ = new BindAction($3, $8); }
  | TBIND '(' controller_type_specifier ')' '.' TTO '(' inner_interface_type_specifier ')' ';'
    { $$ = new BindAction($3, $8); }
  | TBIND '(' inner_controller_type_specifier ')' '.' TTO '(' inner_interface_type_specifier ')' ';'
    { $$ = new BindAction($3, $8); }
  ;

interface_definition
  : TINTERFACE interface_type_specifier extends_interfaces 
      '{' interface_element_delcaration_list '}'
    {
      IExpression* package = $2->takePackage();
      package = package ? package : new FakeExpression(NULL, filePackageType);
      InterfaceTypeSpecifierFull* fullSpecifier = 
        new InterfaceTypeSpecifierFull(package, $2->getShortName());
      $$ = new InterfaceDefinition(AccessLevel::PUBLIC_ACCESS,
                                   fullSpecifier, 
                                   *$3, 
                                   std::get<0>(*$5), 
                                   std::get<1>(*$5));
      delete $2;
      delete $3;
      delete $5;
    }
  ;

inner_interface_definition
  : access_specifier TINTERFACE interface_type_specifier extends_interfaces 
      '{' interface_element_delcaration_list '}'
    {
      IExpression* package = $3->takePackage();
      package = package ? package : new FakeExpression(NULL, filePackageType);
      InterfaceTypeSpecifierFull* fullSpecifier =
        new InterfaceTypeSpecifierFull(package, $3->getShortName());
      $$ = new InterfaceDefinition($1,
                                   fullSpecifier, 
                                   *$4, 
                                   std::get<0>(*$6), 
                                   std::get<1>(*$6));
      delete $3;
      delete $4;
      delete $6;
    }
  ;

external_interface_definition
  : TEXTERNAL TINTERFACE interface_type_specifier extends_interfaces 
      '{' external_interface_element_delcaration_list '}'
    {
      IExpression* package = $3->takePackage();
      package = package ? package : new FakeExpression(NULL, filePackageType);
      InterfaceTypeSpecifierFull* fullSpecifier =
        new InterfaceTypeSpecifierFull(package, $3->getShortName());
      $$ = new ExternalInterfaceDefinition(fullSpecifier, *$4, std::get<0>(*$6), std::get<1>(*$6));
      delete $3;
      delete $4;
      delete $6;
    }
  ;

external_interface_element_delcaration_list
  : /* blank */ 
    { 
      $$ = new std::tuple<std::vector<IObjectElementDeclaration*>,
                          std::vector<IObjectDefinition*>>();
    }
  | external_interface_element_delcaration_list external_interface_element_declaration
    { std::get<0>(*$1).push_back($2); }
  | external_interface_element_delcaration_list external_object_definition
    { std::get<1>(*$1).push_back($2); }
  ;

external_interface_element_declaration
  : method_signature
  | constant_declaration
  | external_static_method_declaration
  ;

interface_element_delcaration_list
  : /* blank */ 
    { 
      $$ = new std::tuple<std::vector<IObjectElementDeclaration*>,
                          std::vector<IObjectDefinition*>>();
    }
  | interface_element_delcaration_list interface_element_declaration
    { std::get<0>(*$1).push_back($2); }
  | interface_element_delcaration_list inner_object_definition
    { std::get<1>(*$1).push_back($2); }
  ;

interface_element_declaration
  : method_signature
  | constant_declaration
  | interface_static_method_definition
  ;

method_signature
  : type_specifier TIDENTIFIER '(' method_declaration_arguments ')' method_exceptions ';'
      {
        $$ = new MethodSignatureDeclaration($1, *$2, *$4, *$6);
        delete $2;
        delete $4;
        delete $6;
      }
  ;

controller_definition
  : TCONTROLLER controller_type_specifier implmeneted_interfaces 
      '{' object_element_declaration_list '}'
    {
      IExpression* package = $2->takePackage();
      package = package ? package : new FakeExpression(NULL, filePackageType);
      ControllerTypeSpecifierFull* fullSpecifier =
        new ControllerTypeSpecifierFull(package, $2->getShortName());
      $$ = new ControllerDefinition(AccessLevel::PUBLIC_ACCESS, 
                                    fullSpecifier, 
                                    std::get<0>(*$5), 
                                    *$3, 
                                    std::get<1>(*$5));
      delete $2;
      delete $5;
      delete $3;
    }
  ;

inner_controller_definition
  : access_specifier TCONTROLLER controller_type_specifier implmeneted_interfaces 
      '{' object_element_declaration_list '}'
    {
      IExpression* package = $3->takePackage();
      package = package ? package : new FakeExpression(NULL, filePackageType);
      ControllerTypeSpecifierFull* fullSpecifier =
        new ControllerTypeSpecifierFull(package, $3->getShortName());
      $$ = new ControllerDefinition($1, 
                                    fullSpecifier, 
                                    std::get<0>(*$6), 
                                    *$4, 
                                    std::get<1>(*$6));
      delete $3;
      delete $6;
      delete $4;
    }
  ;

external_controller_definition
  : TEXTERNAL TCONTROLLER controller_type_specifier implmeneted_interfaces
      '{' external_object_element_declaration_list '}'
    {
      IExpression* package = $3->takePackage();
      package = package ? package : new FakeExpression(NULL, filePackageType);
      ControllerTypeSpecifierFull* fullSpecifier =
        new ControllerTypeSpecifierFull(package, $3->getShortName());
      $$ = new ExternalControllerDefinition(fullSpecifier, 
                                            std::get<0>(*$6), 
                                            *$4,
                                            std::get<1>(*$6));
      delete $3;
      delete $6;
      delete $4;
    }
  ;

node_definition
  : TNODE node_type_specifier implmeneted_interfaces
      '{' object_element_declaration_list '}'
    {
      IExpression* package = $2->takePackage();
      package = package ? package : new FakeExpression(NULL, filePackageType);
      NodeTypeSpecifierFull* fullSpecifier = 
        new NodeTypeSpecifierFull(package, $2->getShortName());
      $$ = new NodeDefinition(AccessLevel::PUBLIC_ACCESS, 
                              fullSpecifier, 
                              std::get<0>(*$5), 
                              *$3, 
                              std::get<1>(*$5));
      delete $2;
      delete $5;
      delete $3;
    }
  ;

inner_node_definition
  : access_specifier TNODE node_type_specifier implmeneted_interfaces
      '{' object_element_declaration_list '}'
    {
      IExpression* package = $3->takePackage();
      package = package ? package : new FakeExpression(NULL, filePackageType);
      NodeTypeSpecifierFull* fullSpecifier =
        new NodeTypeSpecifierFull(package, $3->getShortName());
      $$ = new NodeDefinition($1, 
                              fullSpecifier, 
                              std::get<0>(*$6), 
                              *$4, 
                              std::get<1>(*$6));
      delete $3;
      delete $6;
      delete $4;
    }
  ;

external_node_definition
  : TEXTERNAL TNODE node_type_specifier implmeneted_interfaces
      '{' external_object_element_declaration_list '}'
    {
      IExpression* package = $3->takePackage();
      package = package ? package : new FakeExpression(NULL, filePackageType);
      NodeTypeSpecifierFull* fullSpecifier =
        new NodeTypeSpecifierFull(package, $3->getShortName());
      $$ = new ExternalNodeDefinition(fullSpecifier, std::get<0>(*$6), *$4, std::get<1>(*$6));
      delete $3;
      delete $6;
      delete $4;
    }
  ;

model_definition
  : TMODEL model_type_specifier implmeneted_interfaces
      '{' object_element_declaration_list '}'
    {
      IExpression* package = $2->takePackage();
      package = package ? package : new FakeExpression(NULL, filePackageType);
      ModelTypeSpecifierFull* fullSpecifier =
        new ModelTypeSpecifierFull(package, $2->getShortName());
      $$ = new ModelDefinition(AccessLevel::PUBLIC_ACCESS,
                               fullSpecifier, 
                               std::get<0>(*$5), 
                               *$3, 
                               std::get<1>(*$5));
      delete $2;
      delete $5;
      delete $3;
    }
  ;

inner_model_definition
  : access_specifier TMODEL model_type_specifier implmeneted_interfaces
      '{' object_element_declaration_list '}'
    {
      IExpression* package = $3->takePackage();
      package = package ? package : new FakeExpression(NULL, filePackageType);
      ModelTypeSpecifierFull* fullSpecifier =
        new ModelTypeSpecifierFull(package, $3->getShortName());
      $$ = new ModelDefinition($1,
                               fullSpecifier, 
                               std::get<0>(*$6), 
                               *$4, 
                               std::get<1>(*$6));
      delete $3;
      delete $6;
      delete $4;
    }
  ;

external_model_definition
  : TEXTERNAL TMODEL model_type_specifier implmeneted_interfaces
      '{' external_object_element_declaration_list '}'
    {
      IExpression* package = $3->takePackage();
      package = package ? package : new FakeExpression(NULL, filePackageType);
      ModelTypeSpecifierFull* fullSpecifier =
        new ModelTypeSpecifierFull(package, $3->getShortName());
      $$ = new ExternalModelDefinition(fullSpecifier, std::get<0>(*$6), *$4, std::get<1>(*$6));
      delete $3;
      delete $6;
      delete $4;
    }
  ;

thread_definition
  : TTHREAD thread_type_specifier sends_object implmeneted_interfaces 
      '{' object_element_declaration_list '}'
    {
      IExpression* package = $2->takePackage();
      package = package ? package : new FakeExpression(NULL, filePackageType);
      ThreadTypeSpecifierFull* fullSpecifier =
        new ThreadTypeSpecifierFull(package, $2->getShortName());
      $$ = new ThreadDefinition(AccessLevel::PUBLIC_ACCESS, 
                                fullSpecifier, 
                                $3,
                                std::get<0>(*$6), 
                                *$4, 
                                std::get<1>(*$6));
      delete $2;
      delete $4;
      delete $6;
    }
  ;

external_thread_definition
  : TEXTERNAL TTHREAD thread_type_specifier implmeneted_interfaces
      '{' external_object_element_declaration_list '}'
    {
      IExpression* package = $3->takePackage();
      package = package ? package : new FakeExpression(NULL, filePackageType);
      ThreadTypeSpecifierFull* fullSpecifier =
        new ThreadTypeSpecifierFull(package, $3->getShortName());
      $$ = new ExternalThreadDefinition(fullSpecifier, 
                                        std::get<0>(*$6), 
                                        *$4,
                                        std::get<1>(*$6));
      delete $3;
      delete $6;
      delete $4;
    }
  ;

external_method_declaration
  : type_specifier TIDENTIFIER '(' method_declaration_arguments ')' method_exceptions ';'
      {
        $$ = new ExternalMethodDeclaration($1, *$2, *$4, *$6);
        delete $2;
        delete $4;
        delete $6;
      }
  ;

external_static_method_declaration
  : TSTATIC type_specifier TIDENTIFIER '(' method_declaration_arguments ')' method_exceptions ';'
      {
        $$ = new ExternalStaticMethodDeclaration($2, *$3, *$5, *$7);
        delete $3;
        delete $5;
        delete $7;
      }
  ;

implmeneted_interfaces
  : /* blank */ { $$ = new std::vector<IInterfaceTypeSpecifier*>(); }
  | TIMPLEMENTS interface_list { $$ = $2; }
  ;

sends_object
  : /* blank */ { $$ = PrimitiveTypes::VOID_TYPE->newTypeSpecifier(); }
  | TSENDS type_specifier { $$ = $2; }
  ;

extends_interfaces
  : /* blank */ { $$ = new std::vector<IInterfaceTypeSpecifier*>(); }
  | TEXTENDS interface_list { $$ = $2; }
  ;

interface_list
  : interface_type_specifier 
    { $$ = new std::vector<wisey::IInterfaceTypeSpecifier*>; $$->push_back($1); }
  | interface_list ',' interface_type_specifier { $$ = $1; $$->push_back($3); }
  | interface_list ',' inner_interface_type_specifier { $$ = $1; $$->push_back($3); }
  ;

object_element_declaration_list
  : /* blank */  
    { 
      $$ = new std::tuple<std::vector<IObjectElementDeclaration*>,
                          std::vector<IObjectDefinition*>>();
    }
  | object_element_declaration_list object_element_declaration
    { std::get<0>(*$1).push_back($2); }
  | object_element_declaration_list inner_object_definition
    { std::get<1>(*$1).push_back($2); }
  ;

object_element_declaration
  : constant_declaration
  | field_declaration
  | method_definition
  | static_method_definition
  ;

external_object_element_declaration_list
  : /* blank */
    { 
      $$ = new std::tuple<std::vector<IObjectElementDeclaration*>,
                          std::vector<IObjectDefinition*>>();
    }
  | external_object_element_declaration_list external_object_element_declaration
    { std::get<0>(*$1).push_back($2); }
  | external_object_element_declaration_list external_object_definition
    { std::get<1>(*$1).push_back($2); }
  ;

external_object_element_declaration
  : constant_declaration
  | field_declaration
  | external_method_declaration
  | external_static_method_declaration
  ;

constant_declaration
  : access_specifier TCONSTANT type_specifier TCONSTANTIDENTIFIER '=' expression ';'
    { $$ = new ConstantDeclaration($1, $3, *$4, $6); delete $4; }
  ;

field_declaration
  : type_specifier TFIELDIDENTIFIER ';'
    {
      $$ = new FixedFieldDeclaration($1, *$2);
      delete $2;
    }
  | TFIXED type_specifier TFIELDIDENTIFIER ';'
    {
      $$ = new FixedFieldDeclaration($2, *$3);
      delete $3;
    }
  | TINJECT injectable_type_specifier TFIELDIDENTIFIER ';'
    {
      InjectionArgumentList arguments;
      $$ = new InjectedFieldDeclaration($2, *$3, arguments);
      delete $3;
    }
  | TINJECT injectable_type_specifier TFIELDIDENTIFIER injection_argument_list ';'
    {
      $$ = new InjectedFieldDeclaration($2, *$3, *$4);
      delete $3;
      delete $4;
    }
  | TRECEIVE type_specifier TFIELDIDENTIFIER ';'
    {
      $$ = new ReceivedFieldDeclaration($2, *$3);
      delete $3;
    }
  | TSTATE type_specifier TFIELDIDENTIFIER ';'
    {
      $$ = new StateFieldDeclaration($2, *$3);
      delete $3;
    }
  ;

compound_statement
  : '{' '}' { Block* block = new Block(); $$ = new CompoundStatement(block, yylineno); }
  | '{'  block_item_list '}' { $$ = new CompoundStatement($2, yylineno); }
  ;

block_item_list
  : block_item { $$ = new Block(); $$->getStatements().push_back($<statement>1); }
  | block_item_list block_item { $1->getStatements().push_back($<statement>2); }
  ;

block_item
  : declaration
  | statement
  ;

declaration
  : variable_declaration
  ;

statement
  : compound_statement { $$ = (IStatement*) $1; }
  | expression_statement
  | selection_statement
  | iteration_statement
  | print_statement
  | jump_statement
  | throw_statement
  | try_catch_statement
  | exit_statement
  ;

print_statement
  : TPRINTOUT '(' string_concatenation_list ')' ';' { $$ = new PrintOutStatement(*$3); delete $3; }
  | TPRINTERR '(' string_concatenation_list ')' ';' { $$ = new PrintErrStatement(*$3); delete $3; }
  ;

string_concatenation_list
  : cast_expression { $$ = new std::vector<const IExpression*>(); $$->push_back($1); }
  | string_concatenation_list '+' cast_expression { $1->push_back($3); $$ = $1; }
  ;

case_statement_list_with_default
  : case_statement_list
  | case_statement_list default_case_statement { $$ = $1; $1->defaultStatement = $2; }
  ;

case_statement_list
  : case_statement { $$ = new SwitchCases(); $$->caseStatements.push_back($<case_statement>1); }
  | case_statement_list case_statement { $1->caseStatements.push_back($<case_statement>2); }
  ;

case_statement
  : TCASE expression ':' block_item_list
    { $$ = CaseStatement::newCaseStatement($2, $4); }
  | TCASE expression ':' block_item_list TFALLTHROUGH ';'
    { $$ = CaseStatement::newCaseStatementWithFallThrough($2, $4); }
  ;

default_case_statement
  : TDEFAULT ':' block_item_list { $$ = new DefaultCaseStatement($3); }
  ;

expression_statement
  : ';' { $$ = new EmptyStatement(); }
  | expression ';' { $$ = new ExpressionStatement($1); }
  ;

selection_statement
  : TIF '(' expression ')' compound_statement TELSE statement
    { $$ = new IfElseStatement ($3, $5, $7); }
  | TIF '(' expression ')' compound_statement { $$ = new IfStatement($3, $5); }
  | TSWITCH '(' expression ')' '{' case_statement_list_with_default '}'
    { $$ = new SwitchStatement($3, $6); }
  ;

iteration_statement
  : TWHILE '(' expression ')' statement { $$ = new WhileStatement($3, $5); }
  | TDO statement TWHILE '(' expression ')' ';' { $$ = new DoStatement($2, $5); }
  | TFOR '(' expression_statement expression_statement ')' statement
    { $$ = ForStatement::newWithNoIncrement($3, $4, $6, yylineno); }
  | TFOR '(' expression_statement expression_statement expression ')' statement
    { $$ = new ForStatement($3, $4, $5, $7, yylineno); }
  | TFOR '(' declaration expression_statement ')' statement
    { $$ = ForStatement::newWithNoIncrement($3, $4, $6, yylineno); }
  | TFOR '(' declaration expression_statement expression ')' statement
    { $$ = new ForStatement($3, $4, $5, $7, yylineno); }
  ;

jump_statement
  : TCONTINUE ';' { $$ = new ContinueStatement(); }
  | TBREAK ';' { $$ = new BreakStatement(); }
  | TRETURN ';' { $$ =  new ReturnVoidStatement(yylineno); }
  | TRETURN expression ';' { $$ = new ReturnStatement($2, yylineno); }
  ;

throw_statement
  : TTHROW expression ';' { $$ = new ThrowStatement($2, yylineno); }
  ;

exit_statement
  : TEXIT '(' expression ')' ';' { $$ = new ExitStatement($3, yylineno); }
  ;

try_catch_statement
  : TTRY compound_statement catch_block { 
    $$ = new TryCatchStatement($2, *$3); delete $3; 
  }
  ;

catch_block
  : catch_clause { $$ = new std::vector<Catch *>(); $$->push_back($1); }
  | catch_block catch_clause { $1->push_back($2); }
  ;

catch_clause
  : TCATCH '(' exception_type_specifier '*' TIDENTIFIER ')' compound_statement
    { $$ = new Catch($3, *$5, $7, yylineno); delete $5; }
  ;

variable_declaration
  : type_specifier identifier ';' { $$ = VariableDeclaration::create($1, $2, yylineno); }
  | type_specifier identifier '=' expression ';'
    { $$ = VariableDeclaration::createWithAssignment($1, $2, $4, yylineno); }
  ;

method_definition
  : access_specifier type_specifier TIDENTIFIER '(' method_declaration_arguments ')'
      method_exceptions compound_statement
    {
      $$ = new MethodDeclaration($1, $2, *$3, *$5, *$7, $8, yylineno);
      delete $3;
      delete $5;
      delete $7;
    }
  ;

static_method_definition
  : access_specifier TSTATIC type_specifier TIDENTIFIER '(' method_declaration_arguments ')'
      method_exceptions compound_statement
    {
      $$ = new StaticMethodDeclaration($1, $3, *$4, *$6, *$8, $9, yylineno);
      delete $4;
      delete $6;
      delete $8;
    }
  ;

interface_static_method_definition
  : TSTATIC type_specifier TIDENTIFIER '(' method_declaration_arguments ')'
      method_exceptions compound_statement
    {
      AccessLevel accessLevel = AccessLevel::PUBLIC_ACCESS;
      $$ = new StaticMethodDeclaration(accessLevel, $2, *$3, *$5, *$7, $8, yylineno);
      delete $3;
      delete $5;
      delete $7;
    }
  ;

method_exceptions
  : /* blank */ { $$ = new std::vector<IModelTypeSpecifier*>(); }
  | TTHROWS exception_type_specifier_list { $$ = $2; }
  ;

exception_type_specifier_list
  : exception_type_specifier { $$ = new std::vector<IModelTypeSpecifier*>(); $$->push_back($1); }
  | exception_type_specifier_list ',' exception_type_specifier { $1->push_back($3); }
  ;

method_argument_declaration
  : type_specifier identifier { $$ = VariableDeclaration::create($1, $2, yylineno); }
  ;

method_declaration_arguments
  : /* blank */  { $$ = new VariableList(); }
  | method_argument_declaration
    { $$ = new VariableList(); $$->push_back($<variable_declaration>1); }
  | method_declaration_arguments ',' method_argument_declaration
    { $1->push_back($<variable_declaration>3); }
  ;

access_specifier
  : TPUBLIC { $$ = AccessLevel::PUBLIC_ACCESS; }
  | TPRIVATE { $$ = AccessLevel::PRIVATE_ACCESS; }
  ;

constant_value
  : TCHAR { $$ = new CharConstant($1->c_str()[1]); delete $1; }
  | TINTEGER { $$ = new IntConstant(atol($1->c_str())); delete $1; }
  | TLONG { $$ = new LongConstant(atoll($1->c_str())); delete $1; }
  | TFLOAT { $$ = new FloatConstant(atof($1->c_str())); delete $1; }
  | TDOUBLE { $$ = new DoubleConstant(strtod($1->c_str(), NULL)); delete $1; }
  | TTRUE { $$ = new BooleanConstant(true); }
  | TFALSE { $$ = new BooleanConstant(false); }
  ;
    
string_literal
  : STRING_LITERAL { $$ = new StringLiteral($1->substr(1, $1->length() - 2)); delete $1; }
  ;

constant_reference
  : top_level_object_type_specifier '.' TCONSTANTIDENTIFIER
    { $$ = new ConstantReference($1, *$3); delete $3; }
  | inner_object_type_specifier '.' TCONSTANTIDENTIFIER
    { $$ = new ConstantReference($1, *$3); delete $3; }
  | TCONSTANTIDENTIFIER
    { $$ = new ConstantReference(NULL, *$1); delete $1; }
  ;

static_method_call
  : top_level_object_type_specifier '.' TIDENTIFIER '(' call_arguments ')'
    {
      $$ = new StaticMethodCall($1, *$3, *$5, yylineno);
      delete $3;
      delete $5;
    }
  | inner_object_type_specifier '.' TIDENTIFIER '(' call_arguments ')'
    {
      $$ = new StaticMethodCall($1, *$3, *$5, yylineno);
      delete $3;
      delete $5;
    }
  ;

identifier
  : TIDENTIFIER { $$ = new Identifier(*$1); delete $1; }
  ;

field_identifier
  : TFIELDIDENTIFIER { $$ = new Identifier(*$1); delete $1; }
  ;

primary_expression
  : identifier { $$ = (IExpression*) $1; }
  | field_identifier
  | constant_value
  | constant_reference
  | string_literal
  | static_array_allocation
  | object_builder
  | injection
  | static_method_call
  | thread_expression
  | '(' expression ')' { $$ = $2; }
  | TNULL { $$ = new NullExpression(); }
  ;

postfix_expression
  : primary_expression
  | postfix_expression '.' TIDENTIFIER { $$ = new IdentifierChain($1, *$3); delete $3; }
  | postfix_expression '[' expression ']' { $$ = new ArrayElementExpression($1, $3, yylineno); }
  | postfix_expression '(' call_arguments ')'
    { $$ = new MethodCall($1, *$3, yylineno); delete $3; }
  | postfix_expression TINCOP { $$ = IncrementExpression::newIncrementByOne($1, yylineno); }
  | postfix_expression TDECOP { $$ = IncrementExpression::newDecrementByOne($1, yylineno); }
  ;

unary_expression
  : postfix_expression
  | '-' cast_expression { $$ = new NegateExpression($2); }
  | '!' cast_expression { $$ = new BooleanNotExpression($2); }
  ;

cast_expression
  : unary_expression
  | '(' type_specifier ')' cast_expression { $$ = new CastExpression($2, $4, yylineno); }
  ;

multiplicative_expression
  : cast_expression
  | multiplicative_expression '*' cast_expression
    { $$ = new AdditiveMultiplicativeExpression($1, '*', $3, yylineno); }
  | multiplicative_expression '/' cast_expression
    { $$ = new AdditiveMultiplicativeExpression($1, '/', $3, yylineno); }
  ;

additive_expression
  : multiplicative_expression
  | additive_expression '+' multiplicative_expression
    { $$ = new AdditiveMultiplicativeExpression($1, '+', $3, yylineno); }
  | additive_expression '-' multiplicative_expression
    { $$ = new AdditiveMultiplicativeExpression($1, '-', $3, yylineno); }
  ;

relational_expression
  : additive_expression
  | relational_expression '<' additive_expression
    { $$ = new RelationalExpression($1, RELATIONAL_OPERATION_LT, $3, yylineno); }
  | relational_expression '>' additive_expression
    { $$ = new RelationalExpression($1, RELATIONAL_OPERATION_GT, $3, yylineno); }
  | relational_expression TCLE additive_expression
    { $$ = new RelationalExpression($1, RELATIONAL_OPERATION_LE, $3, yylineno); }
  | relational_expression TCGE additive_expression
    { $$ = new RelationalExpression($1, RELATIONAL_OPERATION_GE, $3, yylineno); }
  ;

type_comparision_expression
  : relational_expression
  | type_comparision_expression TINSTANCEOF type_specifier
    { $$ = new TypeComparisionExpression($1, $3); }
  ;

equality_expression
  : type_comparision_expression
  | equality_expression TCEQ relational_expression
    { $$ = new RelationalExpression($1, RELATIONAL_OPERATION_EQ, $3, yylineno); }
  | equality_expression TCNE relational_expression
    { $$ = new RelationalExpression($1, RELATIONAL_OPERATION_NE, $3, yylineno); }
  ;

logical_and_expression
  : equality_expression
  | logical_and_expression TANDOP equality_expression { $$ = new LogicalAndExpression($1, $3); }
  ;

logical_or_expression
  : logical_and_expression
  | logical_or_expression TOROP logical_and_expression { $$ = new LogicalOrExpression($1, $3); }
  ;

conditional_expression
  : logical_or_expression
  | logical_or_expression '?' expression ':' conditional_expression
    { $$ = new ConditionalExpression($1, $3, $5); }
  ;

expression
  : conditional_expression
  | assignment
  | array_allocation
  ;

assignment
  : postfix_expression '=' expression { $$ = new Assignment($1, $3, yylineno); }
  ;

thread_expression
  : TTHREAD { $$ = new ThreadExpression(); }

array_allocation
  : TNEW array_specific_type_specifier { $$ = new ArrayAllocation($2); }
  ;

static_array_allocation
  : '{' static_array_elements '}' { $$ = new ArrayAllocationStatic(*$2, yylineno); delete $2; }
  ;

static_array_elements
  : expression { $$ = new ExpressionList(); $$->push_back($1); }
  | call_arguments ',' expression  { $1->push_back($3); $$ = $1; }
  | call_arguments ','  { $$ = $1; }
  ;

injection
  : TINJECTOR '(' injectable_object_type_specifier ')' injection_argument_list '.' TINJECT '(' ')'
    { $$ = new Injector($3, *$5, yylineno); delete $5; }
  | TINJECTOR '(' injectable_object_type_specifier ')' '.' TINJECT '(' ')'
    { InjectionArgumentList argumentList; $$ = new Injector($3, argumentList, yylineno); }
  ;

injection_argument_list
  : injection_argument { $$ = new InjectionArgumentList(); $$->push_back($1); }
  | injection_argument_list injection_argument { $1->push_back($2); }
  ;

injection_argument
  : '.' TIDENTIFIER '(' expression ')' { $$ = new InjectionArgument(*$2, $4); delete $2; }
  ;

object_builder
  : TBUILDER '(' buildable_concrete_object_type_specifier ')' object_builder_argument_list
    '.' TBUILD '(' ')'
    { $$ = new ObjectBuilder($3, *$5, yylineno); delete $5; }
  | TBUILDER '(' buildable_concrete_object_type_specifier ')' '.' TBUILD '(' ')'
    { ObjectBuilderArgumentList argumentList; $$ = new ObjectBuilder($3, argumentList, yylineno); }
  ;

object_builder_argument_list
  : object_builder_argument { $$ = new ObjectBuilderArgumentList(); $$->push_back($1); }
  | object_builder_argument_list object_builder_argument { $1->push_back($2); }
  ;

object_builder_argument
  : '.' TIDENTIFIER '(' expression ')' { $$ = new ObjectBuilderArgument(*$2, $4); delete $2; }
  ;

call_arguments
  : /* blank */  { $$ = new ExpressionList(); }
  | expression { $$ = new ExpressionList(); $$->push_back($1); }
  | call_arguments ',' expression  { $1->push_back($3); }
  ;

type_specifier
  : non_array_type_specifier
  | array_type_specifier { $$ = (ITypeSpecifier*) $1; }
  | array_owner_type_specifier { $$ = (ITypeSpecifier*) $1; }
  ;

injectable_type_specifier
  : non_array_type_specifier
  | array_specific_owner_type_specifier
  ;

non_array_type_specifier
  : primitive_type_specifier
  | top_level_object_type_specifier { $$ = (ITypeSpecifier*) $1; }
  | inner_object_type_specifier { $$ = (ITypeSpecifier*) $1; }
  | object_owner_type_specifier
  ;

object_owner_type_specifier
  : top_level_object_type_specifier '*' { $$ = new ObjectOwnerTypeSpecifier($1); }
  | inner_object_type_specifier '*' { $$ = new ObjectOwnerTypeSpecifier($1); }
  ;

inner_model_type_specifier
  : top_level_object_type_specifier '.' TMODELIDENTIFIER 
    { 
      $$ = new ModelTypeSpecifier($1->takePackage(), $1->getShortName() + "." + *$3);
      delete $1; 
      delete $3; 
    }
  ;

inner_controller_type_specifier
  : top_level_object_type_specifier '.' TCONTROLLERIDENTIFIER 
    { 
      $$ = new ControllerTypeSpecifier($1->takePackage(), $1->getShortName() + "." + *$3);
      delete $1; 
      delete $3; 
    }
  ;

inner_interface_type_specifier
  : top_level_object_type_specifier '.' TINTERFACEIDENTIFIER 
    { 
      $$ = new InterfaceTypeSpecifier($1->takePackage(), $1->getShortName() + "." + *$3);
      delete $1; 
      delete $3; 
    }
  ;

inner_node_type_specifier
  : top_level_object_type_specifier '.' TNODEIDENTIFIER 
    { 
      $$ = new NodeTypeSpecifier($1->takePackage(), $1->getShortName() + "." + *$3);
      delete $1; 
      delete $3; 
    }
  ;

inner_thread_type_specifier
  : top_level_object_type_specifier '.' TTHREADIDENTIFIER 
    { 
      $$ = new ThreadTypeSpecifier($1->takePackage(), $1->getShortName() + "." + *$3);
      delete $1; 
      delete $3; 
    }
  ;

inner_object_type_specifier
  : inner_model_type_specifier { $$ = (IObjectTypeSpecifier*) $1; }
  | inner_controller_type_specifier { $$ = (IObjectTypeSpecifier*) $1; }
  | inner_interface_type_specifier { $$ = (IObjectTypeSpecifier*) $1; }
  | inner_node_type_specifier { $$ = (IObjectTypeSpecifier*) $1; }
  | inner_thread_type_specifier { $$ = (IObjectTypeSpecifier*) $1; }
  ;

top_level_object_type_specifier
  : model_type_specifier { $$ = $1; }
  | controller_type_specifier { $$ = $1; }
  | interface_type_specifier { $$ = $1; }
  | node_type_specifier { $$ = $1; }
  | thread_type_specifier { $$ = $1; }
  ;

inner_model_type_specifier_full
  : top_level_object_type_specifier '.' TMODELIDENTIFIER
    { 
      $$ = new ModelTypeSpecifierFull($1->takePackage(), $1->getShortName() + "." + *$3);
      delete $1; 
      delete $3; 
    }  
  ;

inner_controller_type_specifier_full
  : top_level_object_type_specifier '.' TCONTROLLERIDENTIFIER 
    { 
      $$ = new ControllerTypeSpecifierFull($1->takePackage(), $1->getShortName() + "." + *$3);
      delete $1; 
      delete $3; 
    }
  ;

inner_interface_type_specifier_full
  : top_level_object_type_specifier '.' TINTERFACEIDENTIFIER
    { 
      $$ = new InterfaceTypeSpecifierFull($1->takePackage(), $1->getShortName() + "." + *$3);
      delete $1; 
      delete $3; 
    }
  ;

inner_node_type_specifier_full
  : top_level_object_type_specifier '.' TNODEIDENTIFIER
    { 
      $$ = new NodeTypeSpecifierFull($1->takePackage(), $1->getShortName() + "." + *$3);
      delete $1; 
      delete $3; 
    }
  ;

inner_thread_type_specifier_full
  : top_level_object_type_specifier '.' TTHREADIDENTIFIER
    { 
      $$ = new ThreadTypeSpecifierFull($1->takePackage(), $1->getShortName() + "." + *$3);
      delete $1; 
      delete $3; 
    }
  ;

array_owner_type_specifier
  : array_type_specifier '*'
    { $$ = new ArrayOwnerTypeSpecifier($1); }
  ;

array_type_specifier
  : non_array_type_specifier array_undefined_dimensions_list
    { $$ = new ArrayTypeSpecifier($1, $2); }
  ;

array_specific_owner_type_specifier
  : array_specific_type_specifier '*'
    { $$ = new ArraySpecificOwnerTypeSpecifier($1); }
  ;

array_specific_type_specifier
  : non_array_type_specifier array_dimensions
    { $$ = new ArraySpecificTypeSpecifier($1, *$2); delete $2; }
  ;

array_dimensions
  : '[' expression ']' 
    { 
      $$ = new std::list<const IExpression*>(); 
      $$->push_back($2); 
    }
  | array_dimensions '[' expression ']' 
    { $1->push_back($3); $$ = $1; }
  ;

array_undefined_dimensions_list
  : '[' ']' { $$ = 1u; }
  | array_undefined_dimensions_list '[' ']' { $$ = $1 + 1; }

primitive_type_specifier
  : TTYPEBOOLEAN { $$ = PrimitiveTypes::BOOLEAN_TYPE->newTypeSpecifier(); }
  | TTYPECHAR { $$ = PrimitiveTypes::CHAR_TYPE->newTypeSpecifier(); }
  | TTYPEDOUBLE { $$ = PrimitiveTypes::DOUBLE_TYPE->newTypeSpecifier(); }
  | TTYPEFLOAT { $$ = PrimitiveTypes::FLOAT_TYPE->newTypeSpecifier(); }
  | TTYPEINT { $$ = PrimitiveTypes::INT_TYPE->newTypeSpecifier(); }
  | TTYPELONG { $$ = PrimitiveTypes::LONG_TYPE->newTypeSpecifier(); }
  | TTYPESTRING { $$ = PrimitiveTypes::STRING_TYPE->newTypeSpecifier(); }
  | TTYPEVOID { $$ = PrimitiveTypes::VOID_TYPE->newTypeSpecifier(); }
  ;

model_type_specifier
  : TMODELIDENTIFIER
    { $$ = new ModelTypeSpecifier(NULL, *$1); delete $1; }
  | model_type_specifier_full
  ;

model_type_specifier_full
  : postfix_expression '.' TMODELIDENTIFIER 
    { $$ = new ModelTypeSpecifierFull($1, *$3); delete $3; }
  ;

controller_type_specifier
  : TCONTROLLERIDENTIFIER 
    { $$ = new ControllerTypeSpecifier(NULL, *$1); delete $1; }
  | controller_type_specifier_full
  ;

controller_type_specifier_full
  : postfix_expression '.' TCONTROLLERIDENTIFIER 
    { $$ = new ControllerTypeSpecifierFull($1, *$3); delete $3; }
  ;

interface_type_specifier
  : TINTERFACEIDENTIFIER 
    { $$ = new InterfaceTypeSpecifier(NULL, *$1); delete $1; }
  | interface_type_specifier_full
  ;

interface_type_specifier_full
  : postfix_expression '.' TINTERFACEIDENTIFIER 
    { $$ = new InterfaceTypeSpecifierFull($1, *$3); delete $3; }
  ;

node_type_specifier
  : TNODEIDENTIFIER
    { $$ = new NodeTypeSpecifier(NULL, *$1); delete $1; }
  | node_type_specifier_full
  ;

node_type_specifier_full
  : postfix_expression '.' TNODEIDENTIFIER 
    { $$ = new NodeTypeSpecifierFull($1, *$3); delete $3; }
  ;

thread_type_specifier
  : TTHREADIDENTIFIER
    { $$ = new ThreadTypeSpecifier(NULL, *$1); delete $1; }
  | thread_type_specifier_full
  ;

thread_type_specifier_full
  : postfix_expression '.' TTHREADIDENTIFIER 
    { $$ = new ThreadTypeSpecifierFull($1, *$3); delete $3; }
  ;

exception_type_specifier
  : model_type_specifier { $$ = (ModelTypeSpecifier*) $1; }
  | inner_model_type_specifier { $$ = (ModelTypeSpecifier*) $1; }
  ;

buildable_concrete_object_type_specifier
  : model_type_specifier { $$ = (IObjectTypeSpecifier*) $1; }
  | inner_model_type_specifier { $$ = (IObjectTypeSpecifier*) $1; }
  | node_type_specifier { $$ = (IObjectTypeSpecifier*) $1; }
  | inner_node_type_specifier { $$ = (IObjectTypeSpecifier*) $1; }
  ;

injectable_object_type_specifier
  : interface_type_specifier { $$ = (IObjectTypeSpecifier*) $1; }
  | inner_interface_type_specifier { $$ = (IObjectTypeSpecifier*) $1; }
  | controller_type_specifier { $$ = (IObjectTypeSpecifier*) $1; }
  | inner_controller_type_specifier { $$ = (IObjectTypeSpecifier*) $1; }
  ;

%%


