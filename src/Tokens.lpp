%{
  #include <string>
  #include "AccessLevel.hpp"
  #include "ArrayOwnerTypeSpecifier.hpp"
  #include "ArraySpecificTypeSpecifier.hpp"
  #include "ArrayTypeSpecifier.hpp"
  #include "BindAction.hpp"
  #include "BuilderArgument.hpp"
  #include "Catch.hpp"
  #include "CompoundStatement.hpp"
  #include "ControllerTypeSpecifier.hpp"
  #include "CaseStatement.hpp"
  #include "DefaultCaseStatement.hpp"
  #include "IConstantExpression.hpp"
  #include "ILLVMTypeSpecifier.hpp"
  #include "IObjectDefinition.hpp"
  #include "Identifier.hpp"
  #include "ImmutableArrayOwnerTypeSpecifier.hpp"
  #include "ImmutableArrayTypeSpecifier.hpp"
  #include "InterfaceTypeSpecifier.hpp"
  #include "LLVMPointerOwnerTypeSpecifier.hpp"
  #include "LLVMPointerTypeSpecifier.hpp"
  #include "LLVMVariableDeclaration.hpp"
  #include "MethodDefinition.hpp"
  #include "MethodQualifier.hpp"
  #include "MethodSignatureDeclaration.hpp"
  #include "ModelTypeSpecifier.hpp"
  #include "NodeTypeSpecifier.hpp"
  #include "PrimitiveTypeSpecifier.hpp"
  #include "ProgramFile.hpp"
  #include "SwitchStatement.hpp"
  #include "VariableDeclaration.hpp"
  #include "y.tab.h"
  
  extern "C" int yywrap() { return 1; }
  extern void yyerror(const char* error_msg);
 
  #define SAVE_TOKEN yylval.string = new std::string(yytext, yyleng)
  #define TOKEN(t) (yylval.token = t)
  
  static void comment(void);
%}

D   [0-9]
NZ  [1-9]
BT  (b|B)
IS  (l|L)
DS  (d|D)
H   [a-fA-F0-9]
HP  (0[xX])
E   ([Ee][+-]?{D}+)
ES  (\\(['"\?\\abfnrtv]|[0-7]{1,3}|x[a-fA-F0-9]+))
WS  [ \t\v\n\f]

%option yylineno
%option nounput

%%

[ \t\n]                       ;
"/*"                          { comment(); }
"//".*                        { }
"::array"                     return TOKEN(TLLVMARRAY);
"::dereference"               return TOKEN(TLLVMDEREFERENCE);
"::function"                  return TOKEN(TLLVMFUNCTION);
"::i1"                        return TOKEN(TLLVMI1);
"::i8"                        return TOKEN(TLLVMI8);
"::i16"                       return TOKEN(TLLVMI16);
"::i32"                       return TOKEN(TLLVMI32);
"::i64"                       return TOKEN(TLLVMI64);
"::model"                     return TOKEN(TWISEYMODEL);
"::llvm"                      return TOKEN(TLLVM);
"::global"                    return TOKEN(TLLVMGLOBAL);
"::object"                    return TOKEN(TWISEYOBJECT);
"::pointer"                   return TOKEN(TLLVMPOINTER);
"::reference"                 return TOKEN(TLLVMREFERENCE);
"::store"                     return TOKEN(TLLVMSTORE);
"::struct"                    return TOKEN(TLLVMSTRUCT);
"::void"                      return TOKEN(TLLVMVOID);
"::wisey"                     return TOKEN(TWISEY);
"bind"                        return TOKEN(TBIND);
"boolean"                     return TOKEN(TTYPEBOOLEAN);
"break"                       return TOKEN(TBREAK);
"build"                       return TOKEN(TBUILD);
"byte"                        return TOKEN(TTYPEBYTE);
"case"                        return TOKEN(TCASE);
"catch"                       return TOKEN(TCATCH);
"char"                        return TOKEN(TTYPECHAR);
"constant"                    return TOKEN(TCONSTANT);
"continue"                    return TOKEN(TCONTINUE);
"controller"                  return TOKEN(TCONTROLLER);
"do"                          return TOKEN(TDO);
"double"                      return TOKEN(TTYPEDOUBLE);
"else"                        return TOKEN(TELSE);
"extends"                     return TOKEN(TEXTENDS);
"external"                    return TOKEN(TEXTERNAL);
"default"                     return TOKEN(TDEFAULT);
"fallthrough"                 return TOKEN(TFALLTHROUGH);
"false"                       return TOKEN(TFALSE);
"float"                       return TOKEN(TTYPEFLOAT);
"for"                         return TOKEN(TFOR);
"if"                          return TOKEN(TIF);
"immediate"                   return TOKEN(TIMMEDIATE);
"immutable"                   return TOKEN(TIMMUTABLE);
"implements"                  return TOKEN(TIMPLEMENTS);
"import"                      return TOKEN(TIMPORT);
"inject"                      return TOKEN(TINJECT);
"inScope"                     return TOKEN(TINSCOPE);
"instanceof"                  return TOKEN(TINSTANCEOF);
"int"                         return TOKEN(TTYPEINT);
"interface"                   return TOKEN(TINTERFACE);
"long"                        return TOKEN(TTYPELONG);
"model"                       return TOKEN(TMODEL);
"new"                         return TOKEN(TNEW);
"node"                        return TOKEN(TNODE);
"null"                        return TOKEN(TNULL);
"onHeap"                      return TOKEN(TONHEAP);
"onPool"                      return TOKEN(TONPOOL);
"override"                    return TOKEN(TOVERRIDE);
"package"                     return TOKEN(TPACKAGE);
"print"                       return TOKEN(TPRINT);
"printerr"                    return TOKEN(TPRINTERR);
"printout"                    return TOKEN(TPRINTOUT);
"private"                     return TOKEN(TPRIVATE);
"public"                      return TOKEN(TPUBLIC);
"receive"                     return TOKEN(TRECEIVE);
"return"                      return TOKEN(TRETURN);
"state"                       return TOKEN(TSTATE);
"static"                      return TOKEN(TSTATIC);
"string"                      return TOKEN(TTYPESTRING);
"switch"                      return TOKEN(TSWITCH);
"throw"                       return TOKEN(TTHROW);
"throws"                      return TOKEN(TTHROWS);
"try"                         return TOKEN(TTRY);
"true"                        return TOKEN(TTRUE);
"void"                        return TOKEN(TTYPEVOID);
"while"                       return TOKEN(TWHILE);
"..."                         return TOKEN(TELIPSIS);
"<<="                         return TOKEN(TSHIFTLEFTBY);
">>="                         return TOKEN(TSHIFTRIGHTBY);
"<<"                          return TOKEN(TSHIFTLEFT);
">>"                          return TOKEN(TSHIFTRIGHT);
"="                           return TOKEN('=');
"=="                          return TOKEN(TCEQ);
"!="                          return TOKEN(TCNE);
"<"                           return TOKEN('<');
"<="                          return TOKEN(TCLE);
">"                           return TOKEN('>');
">="                          return TOKEN(TCGE);
"++"                          return TOKEN(TINCOP);
"--"                          return TOKEN(TDECOP);
"+="                          return TOKEN(TINCBYOP);
"-="                          return TOKEN(TDECBYOP);
"::"                          return TDOUBLECOLON;
"("                           return TOKEN('(');
")"                           return TOKEN(')');
"["                           return TOKEN('[');
"]"                           return TOKEN(']');
"{"                           return TOKEN('{');
"}"                           return TOKEN('}');
"."                           return TOKEN('.');
","                           return TOKEN(',');
"+"                           return TOKEN('+');
"-"                           return TOKEN('-');
"*="                          return TOKEN(TMULTIPLYBY);
"*"                           return TOKEN('*');
"/="                          return TOKEN(TDIVIDEBY);
"/"                           return TOKEN('/');
"%="                          return TOKEN(TREMINDERBY);
"%"                           return TOKEN('%');
":"                           return TOKEN(':');
"?"                           return TOKEN('?');
";"                           return TOKEN(';');
"!"                           return TOKEN('!');
"&="                          return TOKEN(TBITWISEANDBY);
"&"                           return TOKEN('&');
"^="                          return TOKEN(TBITWISEXORBY);
"^"                           return TOKEN('^');
"|="                          return TOKEN(TBITWISEORBY);
"|"                           return TOKEN('|');
"&&"                          return TOKEN(TANDOP);
"||"                          return TOKEN(TOROP);
[A-Z][A-Z0-9_]*               SAVE_TOKEN; return TCONSTANTIDENTIFIER;
M[A-Z][a-zA-Z0-9_]*           SAVE_TOKEN; return TMODELIDENTIFIER;
I[A-Z][a-zA-Z0-9_]*           SAVE_TOKEN; return TINTERFACEIDENTIFIER;
C[A-Z][a-zA-Z0-9_]*           SAVE_TOKEN; return TCONTROLLERIDENTIFIER;
N[A-Z][a-zA-Z0-9_]*           SAVE_TOKEN; return TNODEIDENTIFIER;
m[A-Z][a-zA-Z0-9_]*           SAVE_TOKEN; return TFIELDIDENTIFIER;
{HP}{H}+{IS}?                 SAVE_TOKEN; return THEXADECIMAL;
[a-zA-Z_][a-zA-Z0-9_]*        SAVE_TOKEN; return TIDENTIFIER;
{D}*"."{D}+{E}?{DS}           SAVE_TOKEN; return TDOUBLE;
{D}+"."{E}?{DS}               SAVE_TOKEN; return TDOUBLE;
{D}*"."{D}+{E}?               SAVE_TOKEN; return TFLOAT;
{D}+"."{E}?                   SAVE_TOKEN; return TFLOAT;
{D}+{BT}                      SAVE_TOKEN; return TBYTE;
{D}+{IS}                      SAVE_TOKEN; return TLONG;
{D}+                          SAVE_TOKEN; return TINTEGER;
"'"([^'\\\n]|{ES})+"'"        SAVE_TOKEN; return TCHAR;
(\"([^"\\\n]|{ES})*\")+       SAVE_TOKEN; return TSTRING_LITERAL;
.                             printf("Unknown token!n"); yyterminate();

%%

static void comment(void) {
  int c;

  while ((c = yyinput()) != 0) {
    if (c == '*') {
      while ((c = yyinput()) == '*') {
      }
      if (c == '/') {
        return;
      }
      if (c == 0) {
        break;
      }
    }
  }
  yyerror("unterminated comment");
}

