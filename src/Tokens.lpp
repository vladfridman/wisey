%{
  #include <string>
  #include "yazyk/Block.hpp"
  #include "yazyk/Identifier.hpp"
  #include "yazyk/TypeSpecifier.hpp"
  #include "yazyk/VariableDeclaration.hpp"
  #include "y.tab.h"
  #define SAVE_TOKEN yylval.string = new std::string(yytext, yyleng)
  #define TOKEN(t) (yylval.token = t)
  extern "C" int yywrap() { return 1; }
%}

D   [0-9]
NZ  [1-9]
IS  (l|L)
DS  (d|D)
E   ([Ee][+-]?{D}+)
ES  (\\(['"\?\\abfnrtv]|[0-7]{1,3}|x[a-fA-F0-9]+))
WS  [ \t\v\n\f]

%option yylineno
%option nounput

%%

[ \t\n]                       ;
"int"                         return TOKEN(TTYPEINT);
"long"                        return TOKEN(TTYPELONG);
"float"                       return TOKEN(TTYPEFLOAT);
"double"                      return TOKEN(TTYPEDOUBLE);
"void"                        return TOKEN(TTYPEVOID);
"return"                      return TOKEN(TRETURN);
"while"                       return TOKEN(TWHILE);
"for"                         return TOKEN(TFOR);
"="                           return TOKEN('=');
"=="                          return TOKEN(TCEQ);
"!="                          return TOKEN(TCNE);
"<"                           return TOKEN('<');
"<="                          return TOKEN(TCLE);
">"                           return TOKEN('>');
">="                          return TOKEN(TCGE);
"++"                          return TOKEN(TINCOP);
"--"                          return TOKEN(TDECOP);
"("                           return TOKEN('(');
")"                           return TOKEN(')');
"{"                           return TOKEN('{');
"}"                           return TOKEN('}');
"."                           return TOKEN('.');
","                           return TOKEN(',');
"+"                           return TOKEN('+');
"-"                           return TOKEN('-');
"*"                           return TOKEN('*');
"/"                           return TOKEN('/');
":"                           return TOKEN(':');
"?"                           return TOKEN('?');
";"                           return TOKEN(';');
"&&"                          return TOKEN(TANDOP);
"||"                          return TOKEN(TOROP);
[a-zA-Z_][a-zA-Z0-9_]*        SAVE_TOKEN; return TIDENTIFIER;
{D}*"."{D}+{E}?{DS}           SAVE_TOKEN; return TDOUBLE;
{D}+"."{E}?{DS}               SAVE_TOKEN; return TDOUBLE;
{D}*"."{D}+{E}?               SAVE_TOKEN; return TFLOAT;
{D}+"."{E}?                   SAVE_TOKEN; return TFLOAT;
{D}+{IS}                      SAVE_TOKEN; return TLONG;
{D}+                          SAVE_TOKEN; return TINTEGER;
"'"([^'\\\n]|{ES})+"'"        SAVE_TOKEN; return TCHAR;
(\"([^"\\\n]|{ES})*\"{WS}*)+  SAVE_TOKEN; return STRING_LITERAL;
.                             printf("Unknown token!n"); yyterminate();

%%

