%{
  #include <string>
  #include "wisey/AccessLevel.hpp"
  #include "wisey/ArrayTypeSpecifier.hpp"
  #include "wisey/Catch.hpp"
  #include "wisey/CompoundStatement.hpp"
  #include "wisey/ControllerTypeSpecifier.hpp"
  #include "wisey/CaseStatement.hpp"
  #include "wisey/DefaultCaseStatement.hpp"
  #include "wisey/FieldDeclaration.hpp"
  #include "wisey/IObjectDefinition.hpp"
  #include "wisey/Identifier.hpp"
  #include "wisey/InterfaceTypeSpecifier.hpp"
  #include "wisey/MethodDeclaration.hpp"
  #include "wisey/MethodSignatureDeclaration.hpp"
  #include "wisey/ModelTypeSpecifier.hpp"
  #include "wisey/NodeTypeSpecifier.hpp"
  #include "wisey/ObjectBuilderArgument.hpp"
  #include "wisey/PrimitiveTypeSpecifier.hpp"
  #include "wisey/ProgramFile.hpp"
  #include "wisey/SwitchStatement.hpp"
  #include "wisey/VariableDeclaration.hpp"
  #include "y.tab.h"
  
  extern "C" int yywrap() { return 1; }
  extern void yyerror(const char* error_msg);
 
  #define SAVE_TOKEN yylval.string = new std::string(yytext, yyleng)
  #define TOKEN(t) (yylval.token = t)
  
  static void comment(void);
%}

D   [0-9]
NZ  [1-9]
IS  (l|L)
DS  (d|D)
E   ([Ee][+-]?{D}+)
ES  (\\(['"\?\\abfnrtv]|[0-7]{1,3}|x[a-fA-F0-9]+))
WS  [ \t\v\n\f]

%option yylineno
%option nounput

%%

[ \t\n]                       ;
"/*"                          { comment(); }
"//".*                        { }
"bind"                        return TOKEN(TBIND);
"boolean"                     return TOKEN(TTYPEBOOLEAN);
"break"                       return TOKEN(TBREAK);
"build"                       return TOKEN(TBUILD);
"builder"                     return TOKEN(TBUILDER);
"case"                        return TOKEN(TCASE);
"catch"                       return TOKEN(TCATCH);
"char"                        return TOKEN(TTYPECHAR);
"constant"                    return TOKEN(TCONSTANT);
"continue"                    return TOKEN(TCONTINUE);
"controller"                  return TOKEN(TCONTROLLER);
"do"                          return TOKEN(TDO);
"double"                      return TOKEN(TTYPEDOUBLE);
"else"                        return TOKEN(TELSE);
"exit"                        return TOKEN(TEXIT);
"extends"                     return TOKEN(TEXTENDS);
"external"                    return TOKEN(TEXTERNAL);
"default"                     return TOKEN(TDEFAULT);
"fallthrough"                 return TOKEN(TFALLTHROUGH);
"false"                       return TOKEN(TFALSE);
"fixed"                       return TOKEN(TFIXED);
"float"                       return TOKEN(TTYPEFLOAT);
"for"                         return TOKEN(TFOR);
"if"                          return TOKEN(TIF);
"implements"                  return TOKEN(TIMPLEMENTS);
"import"                      return TOKEN(TIMPORT);
"inject"                      return TOKEN(TINJECT);
"injector"                    return TOKEN(TINJECTOR);
"instanceof"                  return TOKEN(TINSTANCEOF);
"int"                         return TOKEN(TTYPEINT);
"interface"                   return TOKEN(TINTERFACE);
"long"                        return TOKEN(TTYPELONG);
"model"                       return TOKEN(TMODEL);
"new"                         return TOKEN(TNEW);
"node"                        return TOKEN(TNODE);
"null"                        return TOKEN(TNULL);
"package"                     return TOKEN(TPACKAGE);
"printerr"                    return TOKEN(TPRINTERR);
"printout"                    return TOKEN(TPRINTOUT);
"private"                     return TOKEN(TPRIVATE);
"public"                      return TOKEN(TPUBLIC);
"receive"                     return TOKEN(TRECEIVE);
"return"                      return TOKEN(TRETURN);
"state"                       return TOKEN(TSTATE);
"static"                      return TOKEN(TSTATIC);
"string"                      return TOKEN(TTYPESTRING);
"switch"                      return TOKEN(TSWITCH);
"thread"                      return TOKEN(TTHREAD);
"throw"                       return TOKEN(TTHROW);
"throws"                      return TOKEN(TTHROWS);
"to"                          return TOKEN(TTO);
"try"                         return TOKEN(TTRY);
"true"                        return TOKEN(TTRUE);
"void"                        return TOKEN(TTYPEVOID);
"while"                       return TOKEN(TWHILE);
"="                           return TOKEN('=');
"=="                          return TOKEN(TCEQ);
"!="                          return TOKEN(TCNE);
"<"                           return TOKEN('<');
"<="                          return TOKEN(TCLE);
">"                           return TOKEN('>');
">="                          return TOKEN(TCGE);
"++"                          return TOKEN(TINCOP);
"--"                          return TOKEN(TDECOP);
"("                           return TOKEN('(');
")"                           return TOKEN(')');
"["                           return TOKEN('[');
"]"                           return TOKEN(']');
"{"                           return TOKEN('{');
"}"                           return TOKEN('}');
"."                           return TOKEN('.');
","                           return TOKEN(',');
"+"                           return TOKEN('+');
"-"                           return TOKEN('-');
"*"                           return TOKEN('*');
"/"                           return TOKEN('/');
":"                           return TOKEN(':');
"?"                           return TOKEN('?');
";"                           return TOKEN(';');
"!"                           return TOKEN('!');
"&&"                          return TOKEN(TANDOP);
"||"                          return TOKEN(TOROP);
[A-Z][A-Z0-9_]*               SAVE_TOKEN; return TCONSTANTIDENTIFIER;
M[A-Z][a-zA-Z0-9_]*           SAVE_TOKEN; return TMODELIDENTIFIER;
I[A-Z][a-zA-Z0-9_]*           SAVE_TOKEN; return TINTERFACEIDENTIFIER;
C[A-Z][a-zA-Z0-9_]*           SAVE_TOKEN; return TCONTROLLERIDENTIFIER;
N[A-Z][a-zA-Z0-9_]*           SAVE_TOKEN; return TNODEIDENTIFIER;
m[A-Z][a-zA-Z0-9_]*           SAVE_TOKEN; return TFIELDIDENTIFIER;
[a-zA-Z_][a-zA-Z0-9_]*        SAVE_TOKEN; return TIDENTIFIER;
{D}*"."{D}+{E}?{DS}           SAVE_TOKEN; return TDOUBLE;
{D}+"."{E}?{DS}               SAVE_TOKEN; return TDOUBLE;
{D}*"."{D}+{E}?               SAVE_TOKEN; return TFLOAT;
{D}+"."{E}?                   SAVE_TOKEN; return TFLOAT;
{D}+{IS}                      SAVE_TOKEN; return TLONG;
{D}+                          SAVE_TOKEN; return TINTEGER;
"'"([^'\\\n]|{ES})+"'"        SAVE_TOKEN; return TCHAR;
(\"([^"\\\n]|{ES})*\")+       SAVE_TOKEN; return STRING_LITERAL;
.                             printf("Unknown token!n"); yyterminate();

%%

static void comment(void) {
  int c;

  while ((c = yyinput()) != 0) {
    if (c == '*') {
      while ((c = yyinput()) == '*') {
      }
      if (c == '/') {
        return;
      }
      if (c == 0) {
        break;
      }
    }
  }
  yyerror("unterminated comment");
}

