%{
  #include "node.hpp"
  
  using namespace std;
  using namespace yazyk;
  
  Block *programBlock; /* the top level root node of our final AST */
  
  extern int yylex();
  
  void yyerror(const char *error_msg) {
    extern int yylineno;
    printf("Line %d: %s\n", yylineno, error_msg);
    exit(1);
  }
%}

%error-verbose
%locations

/* Represents the many different ways we can access our data */
%union {
  yazyk::INode *node;
  yazyk::IExpression *expr;
  yazyk::IStatement *stmt;
  yazyk::Block *block;
  yazyk::TypeSpecifier *type;
  yazyk::ReturnStatement *returnStatement;
  yazyk::Identifier *ident;
  yazyk::VariableDeclaration *var_decl;
  std::vector<yazyk::VariableDeclaration*> *varvec;
  std::vector<yazyk::IExpression*> *exprvec;
  std::string *string;
  int token;
}

/* Tokens used in yk */
%token <string> TIDENTIFIER TINTEGER TDOUBLE
%token <token> TCEQ TCNE TCLE TCGE
%token <token> TTYPEINT TTYPELONG TTYPEFLOAT TTYPEDOUBLE
%token <token> TRETURN

/* Define the type of node our nonterminal symbols represent.
   The types refer to the %union declaration above. Ex: when
   we call an ident (defined by union type ident) we are really
   calling an (NIdentifier*). It makes the compiler happy.
 */
%type <ident> ident
%type <expr> numeric expr multiplicative_expression additive_expression primary_expression
%type <expr> relational_expression
%type <returnStatement> return_statement
%type <varvec> func_decl_args
%type <exprvec> call_args
%type <block> program stmts block
%type <stmt> stmt var_decl func_decl func_arg_decl
%type <type> type_specifier

/* Operator precedence for mathematical operators */
%left '+' '-'
%left '*' '/'

%start program

%%

program
  : stmts { programBlock = $1; }
  ;
        
stmts
  : stmt { $$ = new Block(); $$->statements.push_back($<stmt>1); }
  | stmts stmt { $1->statements.push_back($<stmt>2); }
  ;

stmt
  : var_decl
  | func_decl
  | return_statement { $$ = $1; }
  | expr ';' { $$ = new ExpressionStatement(*$1); }
  ;

block
  : '{' stmts '}' { $$ = $2; }
  | '{' '}' { $$ = new Block(); }
  ;

return_statement
  : TRETURN ';'
  | TRETURN expr ';' { $$ = new ReturnStatement(*$2); }
  ;

var_decl
  : type_specifier ident ';' { $$ = new VariableDeclaration(*$1, *$2); }
  | type_specifier ident '=' expr ';' { $$ = new VariableDeclaration(*$1, *$2, $4); }
  ;
        
func_decl
  : type_specifier ident '(' func_decl_args ')' block
    { $$ = new FunctionDeclaration(*$1, *$2, *$4, *$6); delete $4; }
  ;

func_arg_decl
  : type_specifier ident { $$ = new VariableDeclaration(*$1, *$2); }
  ;

func_decl_args
  : /*blank*/  { $$ = new VariableList(); }
  | func_arg_decl { $$ = new VariableList(); $$->push_back($<var_decl>1); }
  | func_decl_args ',' func_arg_decl { $1->push_back($<var_decl>3); }
  ;

ident
  : TIDENTIFIER { $$ = new Identifier(*$1); delete $1; }
  ;

numeric
  : TINTEGER { $$ = new Integer(atol($1->c_str())); delete $1; }
  | TDOUBLE { $$ = new Double(atof($1->c_str())); delete $1; }
  ;
    
expr
  : ident '=' expr { $$ = new Assignment(*$<ident>1, *$3); }
  | ident '(' call_args ')' { $$ = new MethodCall(*$1, *$3); delete $3; }
  | relational_expression
  ;

primary_expression
  : numeric
  | ident { $<ident>$ = $1; }
  | '(' expr ')' { $$ = $2; }
  ;

multiplicative_expression
  : primary_expression
  | multiplicative_expression '*' primary_expression { $$ = new BinaryOperator(*$1, '*', *$3); }
  | multiplicative_expression '/' primary_expression { $$ = new BinaryOperator(*$1, '/', *$3); }
  ;

additive_expression
  : multiplicative_expression { $$ = $1; }
  | additive_expression '+' multiplicative_expression { $$ = new BinaryOperator(*$1, '+', *$3); }
  | additive_expression '-' multiplicative_expression { $$ = new BinaryOperator(*$1, '-', *$3); }
  ;

relational_expression
  : additive_expression { $$ = $1; }
  | relational_expression '<' additive_expression
    { $$ = new RelationalExpression(*$1, RELATIONAL_OPERATION_LT, *$3); }
  | relational_expression '>' additive_expression
    { $$ = new RelationalExpression(*$1, RELATIONAL_OPERATION_GT, *$3); }
  | relational_expression TCLE additive_expression
    { $$ = new RelationalExpression(*$1, RELATIONAL_OPERATION_LE, *$3); }
  | relational_expression TCGE additive_expression
    { $$ = new RelationalExpression(*$1, RELATIONAL_OPERATION_GE, *$3); }
  ;

call_args
  : /*blank*/  { $$ = new ExpressionList(); }
  | expr { $$ = new ExpressionList(); $$->push_back($1); }
  | call_args ',' expr  { $1->push_back($3); }
  ;

type_specifier
  : TTYPEINT { $$ = new TypeSpecifier(PRIMITIVE_TYPE_INT); }
  | TTYPELONG { $$ = new TypeSpecifier(PRIMITIVE_TYPE_LONG); }
  | TTYPEFLOAT { $$ = new TypeSpecifier(PRIMITIVE_TYPE_FLOAT); }
  | TTYPEDOUBLE { $$ = new TypeSpecifier(PRIMITIVE_TYPE_DOUBLE); }
  ;

%%