package wisey.lang.threads;

import wisey.lang.CCallStack;

/**
 * Default implementation of the worker thread.
 *
 * When implementing your worker thread inject and instance of this class
 * and delegate IWorkerThread method calls to it
 */
thread TDefaultWorker implements IWorkerThread {
  inject CWorkerThreadRunner* mWorkerThreadRunner;
  inject CCallStack* mCallStack;

  public void startWorker(IWorkerThread workerThread) {
    mWorkerThreadRunner.createThread(workerThread);    
  }

  public void start() {
  }

  public boolean hasStarted() {
    return mWorkerThreadRunner.hasStarted();
  }

  public boolean hasResult() {
    return mWorkerThreadRunner.hasResult();
  }

  public boolean wasCancelled() {
    return mWorkerThreadRunner.wasCancelled();
  }

  public ::wisey::object* awaitResult() {
    mWorkerThreadRunner.joinThread();

    return mWorkerThreadRunner.getResult();
  }

  public void cancel() {
    mWorkerThreadRunner.cancelThread();
  }

  public void work() {
  }

  public ::wisey::object* send(::wisey::object* message) {
    mWorkerThreadRunner.setResult(message);
    return null;
  }

  public CCallStack getCallStack() {
    return mCallStack;
  }
}
