package wisey.lang.threads;

import wisey.lang.CCallStack;

/**
 * Uses pthread library to enable thread functionality
 */
controller CWorkerThreadRunner implements IThreadRunner {
  state ::llvm::struct::_opaque_pthread_t::pointer mMyNativeThread;
  state boolean mIsCancelled;
  state boolean mIsFinished;
  state ::wisey::model* mResult;

  /**
   * Creates new posix thread that calls runBridge function that in turn calls thread's run method
   */
  public void createThread(IWorkerThread workerThread) {
    if (mMyNativeThread) {
      return;
    }
    ::llvm::function::pthread_create(::llvm::reference(mMyNativeThread), 
                                     (::llvm::struct::_opaque_pthread_attr_t::pointer) null, 
                                     IThreadRunner.runBridge, 
                                     (::llvm::i8::pointer) workerThread);
  }

  /**
   * Tells whether thread has started
   */
  public boolean isStarted() {
    return mMyNativeThread;
  }

  /**
   * Tells whether the thread has finished working and has the result
   */
  public boolean isFinished() {
    return mIsFinished;
  }

  /**
   * Tells whether the worker thread has been cancelled
   */
  public boolean isCancelled() {
    return mIsCancelled;
  }

  /**
   * Waits for thread to finish its work
   */
  public void joinThread() {
    if (!mMyNativeThread || mIsCancelled || mIsFinished) {
      return;
    }
    ::llvm::function::pthread_join(mMyNativeThread, (::llvm::i8::pointer::pointer) null);
    mIsFinished = true;
  }

  /**
   * Cancel execution of the worker thread
   */
  public void cancelThread() {
    if (!mMyNativeThread || mIsCancelled || mIsFinished) {
      return;
    }
    ::llvm::function::pthread_cancel(mMyNativeThread);
    mIsCancelled = true;
  }

  /**
   * Reset the thread so it can be restarted
   */
  public void resetThread() {
    if (!mIsCancelled && !mIsFinished) {
      return;
    }
    if (mMyNativeThread != null) {
      ::llvm::function::pthread_cancel(mMyNativeThread);
    }
    mIsFinished = false;
    mIsCancelled = false;
    mResult = null;
    mMyNativeThread = null;
  }

  /**
   * Exits thread
   */
  public void exitThread() {
    mIsFinished = true;
    ::llvm::function::pthread_exit((::llvm::i8::pointer) null);
  }

  /**
   * Set result of the thread
   */
  public void setResult(::wisey::model* result) {
    mResult = result;
  }

  /**
   * Return the result
   */
  public ::wisey::model* getResult() {
    return mResult;
  }
}