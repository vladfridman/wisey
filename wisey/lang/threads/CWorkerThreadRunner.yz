package wisey.lang.threads;

import wisey.lang.CCallStack;

/**
 * Uses pthread library to enable thread functionality
 */
controller CWorkerThreadRunner implements IThreadRunner {
  state ::llvm::struct::_opaque_pthread_t::pointer mMyNativeThread;
  state boolean mIsCanceled;
  state ::wisey::model* mResult;

  /**
   * Creates a new posix thread that calls workBridge function that in turn calls work method
   */
  public void createThread(IWorkerThread workerThread) {
    ::llvm::function::pthread_create(::llvm::reference(mMyNativeThread), 
                                     (::llvm::struct::_opaque_pthread_attr_t::pointer) null, 
                                     IThreadRunner.runBridge, 
                                     (::llvm::i8::pointer) workerThread);
  }

  /**
   * Waits for thread to finish its work
   */
  public void joinThread() {
    if (!mIsCanceled) {
      ::llvm::function::pthread_join(mMyNativeThread, (::llvm::i8::pointer::pointer) null);
    }
  }

  /**
   * Exits thread
   */
  public void exitThread() {
    ::llvm::function::pthread_exit((::llvm::i8::pointer) null);
  }

  /**
   * Cancel execution of the worker thread
   */
  public void cancelThread() {
    ::llvm::function::pthread_cancel(mMyNativeThread);
    mIsCanceled = true;
  }

  /**
   * Tells whether thread has started
   */
  public boolean hasStarted() {
    return mMyNativeThread != null;
  }

  /**
   * Tells whether the worker thread has been cancelled
   */
  public boolean wasCancelled() {
    return mIsCanceled;
  }

  /**
   * Set result of the thread
   */
  public void setResult(::wisey::model* result) {
    mResult = result;
  }

  /**
   * Return the result
   */
  public ::wisey::model* getResult() {
    return mResult;
  }

  /**
   * Tells whether the thread has prepared the result
   */
  public boolean hasResult() {
    return mResult != null;
  }
}