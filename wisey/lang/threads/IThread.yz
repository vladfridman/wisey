package wisey.lang.threads;

import wisey.lang.CCallStack;

/**
 * Represents a thread of execution. All thread objects must implement this interface.
 */
interface IThread {

  /**
   * The work of this thread is done in this method
   */
  void run() conceal;

  /**
   * Sends a message to the calling thread. 
   *
   * Returns null if the message was sent successfully
   * Returns the sent message if it could not be sent
   */
  ::wisey::model* send(::wisey::model* message) conceal;

  /**
   * Exits the thread
   */
  void exit() conceal;

  /**
   * Returns the call stack for this thread
   */
  CCallStack getCallStack() conceal;

  /**
   * Tells whether the thread has started running
   */
  boolean isStarted() reveal;
  
  /**
   * Tells whether the thread has finished execution
   */
  boolean isFinished() reveal;
  
  /**
   * Tells whether the thread was cancelled
   */
  boolean isCancelled() reveal;

  /**
   * Cancel expecution of the thread
   */
  void cancel() reveal;

  /**
   * Resets the thread to its pre-start state
   */
  void reset() reveal;

  /**
   * Method for putting the current thread to sleep
   */
  static void sleep(int seconds) {
    ::llvm::function::sleep(seconds);
  }

  /**
   * Throws an exception when passed object is not the current thread
   */
  static void checkConcealedMethodCall(IThread object) throws MThreadConcealedMethodException {
    if (object != thread) {
      throw builder(MThreadConcealedMethodException).build();
    }
  }

  /**
   * Throws an exception when passed object is the same as the current thread
   */
  static void checkRevealedMethodCall(IThread object) throws MThreadRevealedMethodException {
    if (object == thread) {
      throw builder(MThreadRevealedMethodException).build();
    }
  }
}
