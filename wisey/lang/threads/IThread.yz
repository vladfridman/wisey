package wisey.lang.threads;

import wisey.lang.CCallStack;

/**
 * Represents a thread of execution. All thread objects must implement this interface.
 */
interface IThread {

  /**
   * The work of this thread is done in this method
   */
  void run();

  /**
   * Sends a message to the calling thread. 
   *
   * Returns null if the message was sent successfully
   * Returns the sent message if it could not be sent
   */
  ::wisey::model* send(::wisey::model* message);

  /**
   * Exits thread with null as a result. This is called from within the thread
   */
  void exit();

  /**
   * Returns the call stack for this thread
   */
  CCallStack getCallStack();

  /**
   * Method for putting the current thread to sleep
   */
  static void sleep(int seconds) {
    ::llvm::function::sleep(seconds);
  }

  /**
   * Throws an exception when passed object is not the current thread
   */
  static void insideThreadGuard(IThread object) throws MThreadBoundaryException {
    if (object != thread) {
      throw builder(MThreadBoundaryException).withIsMethodInternal(true).build();
    }
  }

  /**
   * Throws an exception when passed object is the same as the current thread
   */
  static void outsideThreadGuard(IThread object) throws MThreadBoundaryException {
    if (object == thread) {
      throw builder(MThreadBoundaryException).withIsMethodInternal(false).build();
    }
  }
}
