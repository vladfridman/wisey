package wisey.lang.threads;

import wisey.lang.CCallStack;

/**
 * Default implementation of the producer thread.
 *
 * When implementing your producer thread inject and instance of this class
 * and delegate IProducerThread method calls to it
 */
thread TDefaultProducer implements IProducerThread {
  inject CProducerThreadRunner* mProducerThreadRunner;
  inject CCallStack* mCallStack;

  public void startProducer(IProducerThread producerThread,
                            int size) {
    mProducerThreadRunner.createThread(producerThread, size);
  }

  public void start() {
  }

  public boolean hasStarted() {
    return mProducerThreadRunner.hasStarted();
  }

  public boolean hasResult() {
    return mProducerThreadRunner.hasResult();
  }

  public boolean wasCancelled() {
    return mProducerThreadRunner.wasCancelled();
  }

  public void cancel() {
    mProducerThreadRunner.cancelThread();
  }

  public ::wisey::model* consume() {
    return mProducerThreadRunner.consumeResult();
  }

  public void produce() {
  }

  public ::wisey::model* send(::wisey::model* message) {
    return mProducerThreadRunner.addResult(message);
  }

  public CCallStack getCallStack() {
    return mCallStack;
  }
}
