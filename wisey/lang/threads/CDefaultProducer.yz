package wisey.lang.threads;

import wisey.lang.CCallStack;

/**
 * Default implementation of the producer thread.
 *
 * When implementing your producer thread inject and instance of this class
 * and delegate IProducerThread method calls to it
 *
 * A producer thread can be in one of 4 states: Not started, Started, Cancelled, Finished
 * Before thread can be started again after it has been cancelled or finished it has to be reset
 */
controller CDefaultProducer {
  inject CProducerThreadRunner* mProducerThreadRunner;
  inject CCallStack* mCallStack;

  /**
   * Starts the given thread with the results buffer of the given size
   *
   * Calling this method after the thread has already been started has no effect
   * This is called from an outside thread through a reveal method
   */
  public void start(IProducerThread producerThread, int size) {
    mProducerThreadRunner.createThread(producerThread, size);
  }

  /**
   * Tells whether the thread has been started
   *
   * This is called from an outside thread through a reveal method
   */
  public boolean isStarted() {
    return mProducerThreadRunner.isStarted();
  }

  /**
   * Tells whether the thread has finished execution and has the result
   *
   * This is called from an outside thread through a reveal method
   */
  public boolean isFinished() {
    return mProducerThreadRunner.isFinished();
  }

  /**
   * Tells whether the thread execution has been cancelled
   *
   * This is called from an outside thread through a reveal method
   */
  public boolean isCancelled() {
    return mProducerThreadRunner.isCancelled();
  }

  /**
   * Cancel thread execution from antoher thread
   * If the thread has been already canceled or finished or not started then this has no effect
   *
   * This is called from an outside thread through a reveal method
   */
  public void cancel() {
    mProducerThreadRunner.cancelThread();
  }

  /**
   * Reset the thread to its initial state so it can be started again
   * Calling this when the thread is in Started or Not Started state has no effect
   *
   * This is called from an outside thread through a reveal method
   */
  public void reset() {
    mProducerThreadRunner.resetThread();
  }

  /**
   * Tells whether the thread has a result in its buffer that can be consumed
   * If the thread is in not started or cancelled state it returns false
   *
   * This is called from an outside thread through a reveal method
   */
  public boolean hasResult() {
    return mProducerThreadRunner.hasResult();
  }

  /**
   * Consumes the one result object from the result buffer
   * If the thread is Not started or Cancelled state returns null
   *
   * This is called from an outside thread through a reveal method
   */
  public ::wisey::model* consume() {
    return mProducerThreadRunner.consumeResult();
  }

  /**
   * Exits thread with null as a result. This is called from within the thread
   *
   * This is called from within the thread through a conceal method
   */
  public void exit() {
    mProducerThreadRunner.exitThread();
  }

  /**
   * Adds a result to the buffer of thread results
   *
   * This is called from within the thread through a conceal method
   */
  public ::wisey::model* send(::wisey::model* message) {
    return mProducerThreadRunner.addResult(message);
  }

  /**
   * Returns the callstack controller for the worker thread
   *
   * This is called from within the thread through a conceal method
   */
  public CCallStack getCallStack() {
    return mCallStack;
  }
}
