package wisey.lang.threads;

import wisey.lang.CCallStack;
import wisey.lang.MArrayIndexOutOfBoundsException;
import wisey.lang.MCastException;
import wisey.lang.MNullPointerException;
import wisey.lang.MReferenceCountException;
import wisey.lang.MStackOverflowException;

/**
 * Represents a thread runner object that calls pthread functions to enable thread functionality
 */
interface IThreadRunner {

  /**
   * This native function bridges run() method of the thread object with the i8* (i8*)* function 
   * parameter of the posix threads interface.
   */
  public ::llvm::function ::llvm::i8::pointer runBridge(::llvm::i8::pointer argument) {
    thread = (IThread) ((IWorkerThread) argument);
    callstack = injector(CCallStack).inject();
    callstack = thread.getCallStack();

    try {
      thread.run();
    } catch (MNullPointerException* exception) {
      thread.getCallStack().reportException(exception);
    } catch (MReferenceCountException* exception) {
      thread.getCallStack().reportException(exception);
      string ending = exception.getReferenceCount() > 1 ? "s" : "";
      printerr("Details: Object referenced by expression still has " + 
        exception.getReferenceCount() + " active reference" + ending + "\n");
    } catch (MCastException* exception) {
      thread.getCallStack().reportException(exception);
      printerr("Details: Can not cast from " + exception.getFromType() + " to " + 
        exception.getToType() + "\n");
    } catch (MArrayIndexOutOfBoundsException* exception) {
      thread.getCallStack().reportException(exception);
      printerr("Details: Index " + exception.getIndex() + " is used on array of size " + 
        exception.getArraySize() + "\n");
    } catch (MStackOverflowException* exception) {
      thread.getCallStack().reportException(exception);
    } catch (MThreadConcealedMethodException* exception) {
      thread.getCallStack().reportException(exception);
    } catch (MThreadRevealedMethodException* exception) {
      thread.getCallStack().reportException(exception);
    }
    
    thread.exit();

    return argument;
  }
}