package wisey.lang;

/**
 * String controller allows one to work with a modifiable string
 */
controller CString {

  public constant long DEFAULT_INITIAL_CAPACITY = 16l;

  receive char[]* mBuffer;
  receive long mCapacity; 
  receive long mLength;

  /**
   * Creates an empty modifiable CString
   */
  public static CString* create() {
    return injector(CString)
      .withBuffer(new char[DEFAULT_INITIAL_CAPACITY])
      .withCapacity(DEFAULT_INITIAL_CAPACITY)
      .withLength(0)
      .inject();
  }

  /**
   * Creates a modifiable CString from a string literal
   */
  public static CString* createFromString(string input) {
    return memcopyAndInject(input, input.getLength());
  }

  /**
   * Creates a modifiable CString from an MString model
   */
  public static CString* createFromModel(MString input) {
    return memcopyAndInject(input.getContent(), input.getLength());
  }

  /**
   * Creates a CString from a null terminated char array
   */
  public static CString* createFromCharArray(char[] input) {
    return memcopyAndInject(input, input.getSize());
  }

  /**
   * Creates a CString from a null terminated immutable char array
   */
  public static CString* createFromImmutableCharArray(immutable char[] input) {
    return memcopyAndInject(input, input.getSize());
  }

  /**
   * Creates an MString copy of this string
   */
  public MString* toModel() {
    char[]* buffer = new char[mLength + 1];
    ::llvm::i8::pointer destination = buffer;
    ::llvm::i8::pointer source = mBuffer;
    MSystem.memcopy(destination, source, mCapacity);
    return builder(MString).withContent(buffer).build();    
  }

  /**
   * Returns the string length
   */
  public long getLength() {
    return mLength;
  }

  /**
   * Creates a copy of the string
   */
  public CString* copy() {
    char[]* buffer = new char[mCapacity];
    ::llvm::i8::pointer destination = buffer;
    ::llvm::i8::pointer source = mBuffer;
    MSystem.memcopy(destination, source, mCapacity);
    return injector(CString)
      .withBuffer(buffer)
      .withCapacity(mCapacity)
      .withLength(mLength)
      .inject();
  }

  /**
   * Tries to fit the new string into existing buffer, creates a new buffer if needed
   */
  public CString appendString(string appendix) {
    long length = mLength + appendix.getLength();
    if (length <= mCapacity) {
       ::llvm::i8::pointer destination = mBuffer;     
       destination = destination + mLength;     
       ::llvm::i8::pointer source = appendix;
       MSystem.memcopy(destination, source, appendix.getLength());
    } else {
      long newCapacity = estimateCapacity(length);
      char[]* buffer = new char[newCapacity];
      ::llvm::i8::pointer destination = buffer;
      ::llvm::i8::pointer source = mBuffer;
      MSystem.memcopy(destination, source, mLength);
      destination = destination + mLength;
      source = appendix;
      MSystem.memcopy(destination, source, appendix.getLength());
      mBuffer = buffer;
      mCapacity = newCapacity;
    }

    mLength = length;
    
    return this;
  }

  /**
   * Returns char array for this string
   */
  public char[] getContent() {
    return mBuffer;
  }

  /**
   * Returns string capacity
   */ 
  public long getCapacity() {
    return mCapacity;
  }

  private static long estimateCapacity(long size) {
    return (long) (((float) (size + 1)) * 1.5);
  }

  private static CString* memcopyAndInject(::llvm::i8::pointer source, long length) {
    long capacity = estimateCapacity(length);
    char[]* buffer = new char[capacity];
    ::llvm::i8::pointer destination = buffer;
    MSystem.memcopy(destination, source, length);
    return injector(CString)
      .withBuffer(buffer)
      .withCapacity(capacity)
      .withLength(length)
      .inject();
  }
}