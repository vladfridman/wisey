package wisey.lang;

import wisey.lang.threads.CDefaultWorker;
import wisey.lang.threads.IWorkerThread;

/**
 * Represents main thread where the program runs
 */
thread TMainThread implements IWorkerThread {
  inject CDefaultWorker* mDefaultWorker;
  inject IProgram* mProgram;

  public void run() conceal {
    MProgramResult* programResult = builder(MProgramResult).withResult(mProgram.run()).build();
    thread.send(programResult);
  }

  public void start() reveal {
    mDefaultWorker.start(this);
  }

  public boolean hasStarted() reveal {
    return mDefaultWorker.hasStarted();
  }

  public boolean hasResult() reveal {
    return mDefaultWorker.hasResult();
  }

  public boolean wasCancelled() reveal {
    return mDefaultWorker.wasCancelled();
  }

  public ::wisey::model* awaitResult() reveal {
    return mDefaultWorker.awaitResult();
  }

  public void cancel() reveal {
    mDefaultWorker.cancel();
  }

  public ::wisey::model* send(::wisey::model* message) conceal {
    return mDefaultWorker.send(message);
  }

  public CCallStack getCallStack() conceal {
    return mDefaultWorker.getCallStack();
  }

  public void exit() conceal {
    mDefaultWorker.exit();
  }

  /**
   * Represents program result
   */
  public model MProgramResult {
    int mResult;

    public int getResult() {
      return mResult;
    }
  }
}
