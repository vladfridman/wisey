package wisey.lang;

import wisey.lang.CCallStack;
import wisey.lang.CProgramRunner;
import wisey.lang.CWorkerThreadRunner;
import wisey.lang.IProgram;
import wisey.lang.IWorkerThread;
import wisey.lang.MProgramResult;

/**
 * Represents main thread where the program runs
 */
thread TMainThread implements IWorkerThread {
  inject CWorkerThreadRunner* mWorkerThreadRunner;
  inject CProgramRunner* mProgramRunner;
  inject CCallStack* mCallStack;

  state MProgramResult* mProgramResult;

  public void start() {
    mWorkerThreadRunner.createThread(this);
  }

  public boolean hasStarted() {
    return mWorkerThreadRunner.hasStarted();
  }

  public boolean hasResult() {
    return mProgramResult != null;
  }

  public boolean wasCancelled() {
    return mWorkerThreadRunner.wasCancelled();
  }

  public ::llvm::object awaitResult() {
    mWorkerThreadRunner.joinThread();

    return mProgramResult;
  }

  public void cancel() {
    mWorkerThreadRunner.cancelThread();
  }

  public void work() {
    MProgramResult* programResult = mProgramRunner.run();
    thread.send((::llvm::object*) programResult);
  }

  public boolean send(::llvm::object* programResult) {
    mProgramResult = programResult;
    mWorkerThreadRunner.exitThread();
    return true;
  }

  public CCallStack getCallStack() {
    return mCallStack;
  }
}
