package wisey.lang;

import wisey.lang.CCallStack;
import wisey.lang.CProgramRunner;
import wisey.lang.CWorkerThreadRunner;
import wisey.lang.IProgram;
import wisey.lang.IWorkerThread;

/**
 * Represents main thread result container
 */
model MMainThreadMessage {
  int mContent;

  public int getContent() {
    return mContent;
  }
}

/**
 * Represents main thread where the program runs
 */
thread TMainThread implements IWorkerThread {
  inject CWorkerThreadRunner* mWorkerThreadRunner;
  inject CProgramRunner* mProgramRunner;
  inject CCallStack* mCallStack;
  
  receive IProgram* mProgram;

  state MMainThreadMessage* mMessage;

  public void start() {
    mWorkerThreadRunner.createThread(this);
  }

  public ::llvm::i8* waitForResult() {
    mWorkerThreadRunner.joinThread();

    return mMessage;
  }

  public void work() {
    int result = mProgramRunner.run(mProgram);
    MMainThreadMessage* message = builder(MMainThreadMessage).withContent(result).build();
    thread.send((::llvm::i8*) message);
  }

  public void send(::llvm::i8* message) {
    mMessage = message;
    mWorkerThreadRunner.exitThread();
  }

  public CCallStack getCallStack() {
    return mCallStack;
  }
}
