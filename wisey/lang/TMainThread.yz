package wisey.lang;

import wisey.lang.CCallStack;
import wisey.lang.CProgramRunner;
import wisey.lang.IProgram;
import wisey.lang.IThread;

::llvm::struct _opaque_pthread_t {
  ::llvm::i64,
  ::llvm::struct::__darwin_pthread_handler_rec*,
  ::llvm::i8 [8176],
}

::llvm::struct __darwin_pthread_handler_rec {
  ::llvm::void (::llvm::i8*)*, 
  ::llvm::i8*, 
  ::llvm::struct::__darwin_pthread_handler_rec*
}

::llvm::struct _opaque_pthread_attr_t {
  ::llvm::i64,
  ::llvm::i8 [56],
}

::llvm::function ::llvm::void pthread_create(::llvm::struct::_opaque_pthread_t**, 
                                             ::llvm::struct::_opaque_pthread_attr_t*, 
                                             ::llvm::i8* (::llvm::i8*)*, 
                                             ::llvm::i8*);

::llvm::function ::llvm::void pthread_join(::llvm::struct::_opaque_pthread_t*, ::llvm::i8**);

::llvm::function ::llvm::void pthread_exit(::llvm::i8*);

/**
 * Represents main thread where the program runs
 */
thread TMainThread sends int implements IThread {
  inject CCallStack* mCallStack;
  inject CProgramRunner* mProgramRunner;

  receive IProgram* mProgram;

  state ::llvm::struct::_opaque_pthread_t* mMyNativeThread;
  state int mMyMessage;

  public void run() {
    int result = mProgramRunner.run(mProgram);
    send(result);
  }

  ::llvm::function ::llvm::i8* runBridge(::llvm::i8* argument) {
    ::llvm::function::wisey.lang.TMainThread.run((TMainThread) argument, 
                                                 (IThread) ((TMainThread) argument), 
                                                 ::llvm::function::wisey.lang.TMainThread.getCallStack((TMainThread) argument, 
                                                                                                       (IThread) ((TMainThread) argument), 
                                                                                                       (CCallStack) null));

    return argument;
  }

  public int start() {
    ::llvm::function::pthread_create(::llvm::reference(mMyNativeThread), 
                                        (::llvm::struct::_opaque_pthread_attr_t*) null, 
                                        runBridge, 
                                        (::llvm::i8*) this);
    ::llvm::i32* result;
    ::llvm::function::pthread_join(mMyNativeThread, (::llvm::i8**) ::llvm::reference(result));

    return ::llvm::dereference(result);
  }

  public void send(int message) {
    mMyMessage = message;
    ::llvm::function::pthread_exit((::llvm::i8*) ::llvm::reference(mMyMessage));
  }

  public CCallStack getCallStack() {
    return mCallStack;
  }
}
