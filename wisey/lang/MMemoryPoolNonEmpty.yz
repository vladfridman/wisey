package wisey.lang;

/**
 * Thrown when attempting to destroy an CMemoryPool that still has objects allocated in it
 */
model MMemoryPoolNonEmpty implements IException {
  receive long mObjectCount;
  receive IException mNestedException;

  public NString* report() override {
    if (mNestedException instanceof MReferenceCountException) {
      return mNestedException.report();
    }

    NString* message = callstack.reportException(this);
    string ending = mObjectCount > 1 ? "s" : "";
    message.appendString("Details: Attempting to destroy a memory pool that still contains ");
    message.appendNString(NString.createFromLong(mObjectCount));
    message.appendString(" allocated object");
    message.appendString(ending);
    message.appendString("\n");

    if (mNestedException == null) {
      return message;
    }
    
    message.appendString("Was thrown from memory clean up after ");
    message.appendString(MSystem.getOriginalObjectTypeName(mNestedException));
    message.appendString("\n");
    message.appendNString(mNestedException.report());

    return message;
  }

  /**
   * Returns the number of objects that are still allocated in the pool
   */
  public long getObjectCount() {
    return mObjectCount;
  }
}
