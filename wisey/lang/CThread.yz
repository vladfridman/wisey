package wisey.lang;

/**
 * Keeps track of the method call stack and can print out a strack trace
 */
controller CThread {
  state NCallStackNode* mCallStackHead;
  state NCallStackNode mCallStackTail;

  /**
   * Pushes a new method on the call stack
   */
  public void pushStack(string objectName, 
                        string methodName, 
                        string fileName, 
                        int lineNumber) {
    if (mCallStackTail == null) {
      NCallStackNode* newNode = builder(NCallStackNode)
        .withObjectName(objectName)
        .withMethodName(methodName)
        .withFileName(fileName)
        .withLineNumber(lineNumber)
        .withPreviousNode(null)
        .build();
      mCallStackHead = newNode;
      mCallStackTail = mCallStackHead;
    } else {
      NCallStackNode* newNode = builder(NCallStackNode)
        .withObjectName(objectName)
        .withMethodName(methodName)
        .withFileName(fileName)
        .withLineNumber(lineNumber)
        .withPreviousNode(mCallStackTail)
        .build();
      mCallStackTail.setNext(newNode);
      mCallStackTail = mCallStackTail.getNext();
    }
  }

  /**
   * Pops the method call stack
   */
  public void popStack() {
    if (mCallStackTail == null) {
      return;
    }

    mCallStackTail = mCallStackTail.getPrevious();
    if (mCallStackTail == null) {
      mCallStackHead = null;
    } else {
      mCallStackTail.setNext(null);
    }
  }

  /**
   * Dumps the call stack to standart output
   */
  public void dumpStack() {
    NCallStackNode iterator = mCallStackTail;
    while (iterator != null) {
      printout(iterator.getObjectName() + "." + iterator.getMethodName() + "(" + 
        iterator.getFileName() + ":" + iterator.getLineNumber() + ")\n");
      iterator = iterator.getPrevious();
    }
  }

  /**
   * Print a stack trace for an exception.
   *
   * The last element in the stack trace is the call to this method and is not printed
   */
  public void reportException(IException exception) {
    printerr("Unhandled exception " + exception.getName() + "\n");
    NCallStackNode iterator = mCallStackTail;
    while (iterator != null) {
      printerr("  at " + iterator.getObjectName() + "." + iterator.getMethodName() + "(" +
        iterator.getFileName() + ":" + iterator.getLineNumber() + ")\n");
      iterator = iterator.getPrevious();
    }
  }

  /**
   * An element of the stack structore used to store method call stack
   */
  private node NCallStackNode {
    string mObjectName;
    string mMethodName;
    string mFileName;
    int mLineNumber;
    NCallStackNode mPreviousNode;
    state NCallStackNode* mNextNode;

    public string getObjectName() {
      return mObjectName;
    }

    public string getMethodName() {
      return mMethodName;
    }

    public string getFileName() {
      return mFileName;
    }

    public int getLineNumber() {
      return mLineNumber;
    }

    public void setNext(NCallStackNode* next) {
      mNextNode = next;
    }

    public NCallStackNode getNext() {
      return mNextNode;
    }

    public NCallStackNode getPrevious() {
      return mPreviousNode;
    }
  }
}
