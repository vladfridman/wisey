package wisey.lang;

/**
 * An element of the stack structore used to store method call stack
 *
 * TODO: make it an inner class of CThread so it does not get exported
 */
node NProgramStackNode {
  string mObjectName;
  string mMethodName;
  string mFileName;
  int mLineNumber;
  NProgramStackNode mPreviousNode;
  state NProgramStackNode* mNextNode;

  public string getObjectName() {
    return mObjectName;
  }

  public string getMethodName() {
    return mMethodName;
  }

  public string getFileName() {
    return mFileName;
  }

  public int getLineNumber() {
    return mLineNumber;
  }

  public void setNext(NProgramStackNode* next) {
    mNextNode = next;
  }

  public NProgramStackNode getNext() {
    return mNextNode;
  }

  public NProgramStackNode getPrevious() {
    return mPreviousNode;
  }
}

/**
 * Keeps track of the method call stack and can print out a strack trace
 */
controller CThread {
  state NProgramStackNode* mProgramStackHead;
  state NProgramStackNode mProgramStackTail;
  state string mObjectName;
  state string mMethodName;

  /**
   * Sets current object and method name that later will be pushed to the stack with a line number
   */
  public void setObjectAndMethod(string objectName, string methodName) {
    mObjectName = objectName;
    mMethodName = methodName;
  }

  /**
   * Pushes a new method on the call stack
   */
  public void pushStack(string fileName, int lineNumber) {
    if (mProgramStackTail == null) {
      NProgramStackNode* newNode = builder(NProgramStackNode)
        .withObjectName(mObjectName)
        .withMethodName(mMethodName)
        .withFileName(fileName)
        .withLineNumber(lineNumber)
        .withPreviousNode(null)
        .build();
      mProgramStackHead = newNode;
      mProgramStackTail = mProgramStackHead;
    } else {
      NProgramStackNode* newNode = builder(NProgramStackNode)
        .withObjectName(mObjectName)
        .withMethodName(mMethodName)
        .withFileName(fileName)
        .withLineNumber(lineNumber)
        .withPreviousNode(mProgramStackTail)
        .build();
      mProgramStackTail.setNext(newNode);
      mProgramStackTail = mProgramStackTail.getNext();
    }
  }

  /**
   * Pops the method call stack
   */
  public void popStack() {
    if (mProgramStackTail == null) {
      return;
    }

    mObjectName = mProgramStackTail.getObjectName();
    mMethodName = mProgramStackTail.getMethodName();

    mProgramStackTail = mProgramStackTail.getPrevious();
    if (mProgramStackTail == null) {
      mProgramStackHead = null;
    } else {
      mProgramStackTail.setNext(null);
    }
  }

  /**
   * Dumps the call stack to standart output
   */
  public void dumpStack() {
    printout(mObjectName + "." + mMethodName + "(CThread.yz:109)\n");
    NProgramStackNode iterator = mProgramStackTail;
    while (iterator != null) {
      printout(iterator.getObjectName() + "." + iterator.getMethodName() + "(" + 
        iterator.getFileName() + ":" + iterator.getLineNumber() + ")\n");
      iterator = iterator.getPrevious();
    }
  }
}
