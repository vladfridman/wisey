package wisey.lang;

/**
 * An element of the stack structore used to store method call stack
 *
 * TODO: make it an inner class of CThread so it does not get exported
 */
node NProgramStackNode {
  string mObjectName;
  string mMethodName;
  string mFileName;
  int mLineNumber;
  NProgramStackNode mPreviousNode;
  state NProgramStackNode* mNextNode;

  public string getObjectName() {
    return mObjectName;
  }

  public string getMethodName() {
    return mMethodName;
  }

  public string getFileName() {
    return mFileName;
  }

  public int getLineNumber() {
    return mLineNumber;
  }

  public void setNext(NProgramStackNode* next) {
    mNextNode = next;
  }

  public NProgramStackNode getNext() {
    return mNextNode;
  }

  public NProgramStackNode getPrevious() {
    return mPreviousNode;
  }
}

/**
 * Keeps track of the method call stack and can print out a strack trace
 */
controller CThread {
  state NProgramStackNode* mProgramStackHead;
  state NProgramStackNode mProgramStackTail;

  /**
   * Pushes a new method on the call stack
   */
  public void pushStack(string objectName, 
                        string methodName, 
                        string fileName, 
                        int lineNumber) {
    if (mProgramStackTail == null) {
      NProgramStackNode* newNode = builder(NProgramStackNode)
        .withObjectName(objectName)
        .withMethodName(methodName)
        .withFileName(fileName)
        .withLineNumber(lineNumber)
        .withPreviousNode(null)
        .build();
      mProgramStackHead = newNode;
      mProgramStackTail = mProgramStackHead;
    } else {
      NProgramStackNode* newNode = builder(NProgramStackNode)
        .withObjectName(objectName)
        .withMethodName(methodName)
        .withFileName(fileName)
        .withLineNumber(lineNumber)
        .withPreviousNode(mProgramStackTail)
        .build();
      mProgramStackTail.setNext(newNode);
      mProgramStackTail = mProgramStackTail.getNext();
    }
  }

  /**
   * Pops the method call stack
   */
  public void popStack() {
    if (mProgramStackTail == null) {
      return;
    }

    mProgramStackTail = mProgramStackTail.getPrevious();
    if (mProgramStackTail == null) {
      mProgramStackHead = null;
    } else {
      mProgramStackTail.setNext(null);
    }
  }

  /**
   * Dumps the call stack to standart output
   */
  public void dumpStack() {
    NProgramStackNode iterator = mProgramStackTail;
    while (iterator != null) {
      printout(iterator.getObjectName() + "." + iterator.getMethodName() + "(" + 
        iterator.getFileName() + ":" + iterator.getLineNumber() + ")\n");
      iterator = iterator.getPrevious();
    }
  }

  /**
   * Print a stack trace for an exception.
   *
   * The last element in the stack trace is the call to this method and is not printed
   */
  public void reportException(IException exception) {
    printerr("Unhandled exception " + exception.getName() + "\n");
    NProgramStackNode iterator = mProgramStackTail;
    while (iterator != null) {
      printerr("  at " + iterator.getObjectName() + "." + iterator.getMethodName() + "(" +
        iterator.getFileName() + ":" + iterator.getLineNumber() + ")\n");
      iterator = iterator.getPrevious();
    }
  }
}
