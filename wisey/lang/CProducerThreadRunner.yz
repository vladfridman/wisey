package wisey.lang;

import wisey.lang.IProducerThread;

/**
 * Uses pthread library to enable thread functionality, producer thread produces many results
 */
controller CProducerThreadRunner {
  state ::llvm::struct::_opaque_pthread_t::pointer mMyNativeThread;
  state boolean mIsCanceled;
  state ::llvm::i8::pointer*[]* mResults;
  state int mSize;
  state int mIndexStart;
  state int mIndexEnd;

  /**
   * This native function bridges produce() method of the thread object with the i8* (i8*)* function 
   * parameter of the posix threads interface.
   */
  ::llvm::function ::llvm::i8::pointer produceBridge(::llvm::i8::pointer argument) {
    thread = (IThread) ((IProducerThread) argument);
    callstack = null;
    callstack = thread.getCallStack();
    ((IProducerThread) argument).produce();

    return argument;
  }

  /**
   * Creates a new posix thread that calls workBridge function that in turn calls work method
   */
  public void createThread(IProducerThread workerThread, int size) {
    mSize = size + 1;
    mResults = new ::llvm::i8::pointer*[mSize];
    ::llvm::function::pthread_create(::llvm::reference(mMyNativeThread), 
                                     (::llvm::struct::_opaque_pthread_attr_t::pointer) null, 
                                     produceBridge, 
                                     (::llvm::i8::pointer) workerThread);
  }

  /**
   * Waits for the thread to finish and returns
   */
  public void joinThread() {
    if (!mIsCanceled) {
      ::llvm::function::pthread_join(mMyNativeThread, (::llvm::i8::pointer::pointer) null);
    }
  }

  /**
   * Adds result to the list of results if there is space
   */
  public boolean addResult(::llvm::i8::pointer* result) {
    int nextIndexEnd = (mIndexEnd + 1) % mSize;
    if (mIndexStart == nextIndexEnd) {
      return false;
    }
    mResults[mIndexEnd] = result;
    mIndexEnd = nextIndexEnd;
    return true;
  }

  /**
   * Returns one of the results from the list of results in FIFO order
   */
  public ::llvm::i8::pointer consumeResult() {
    if (mIndexStart == mIndexEnd) {
      return null;
    }
    int previousIndexStart = mIndexStart;
    mIndexStart = (mIndexStart + 1) % mSize;
    return mResults[previousIndexStart];
  }

  /**
   * Tells whether there are any results available
   */
  public boolean hasResult() {
    return mIndexStart != mIndexEnd;
  }

  /**
   * Tells whether there is any room available for results
   */
  public boolean hasRoom() {
    return (mIndexEnd + 1) % mSize != mIndexStart;
  }

  /**
   * Exits thread
   */
  public void exitThread() {
    ::llvm::function::pthread_exit((::llvm::i8::pointer) null);
  }

  /**
   * Cancel execution of the worker thread
   */
  public void cancelThread() {
    ::llvm::function::pthread_cancel(mMyNativeThread);
    mIsCanceled = true;
  }

  /**
   * Tells whether thread has started
   */
  public boolean hasStarted() {
    return mMyNativeThread != null;
  }

  /**
   * Tells whether the worker thread has been cancelled
   */
  public boolean wasCancelled() {
    return mIsCanceled;
  }
}