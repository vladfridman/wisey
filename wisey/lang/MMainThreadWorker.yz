package wisey.lang;

import wisey.threads.CCallStack;
import wisey.threads.CWorkerThread;
import wisey.threads.IThread;
import wisey.threads.IWorker;
import wisey.threads.MThreadBoundaryException;

/**
 * This class is the worker for the main thread, it injects the program and sends the result
 */
model MMainThreadWorker implements IWorker {

  receive immutable string[]* mArguments;

  /**
   * This method is called from main() function automatically generated by compiler
   */
  public static int startMainThread(string[]* arguments) {
    CWorkerThread* workerThread = inject(CWorkerThread).onHeap();
    MMainThreadWorker* mainThreadWorker = build(MMainThreadWorker)
      .withArguments(arguments)
      .onHeap();
    workerThread.start(mainThreadWorker);
    MProgramResult* result = workerThread.awaitResult();
    if (result != null) {
      return result.getResult();
    }
    
    printerr("Main thread ended without a result\n");
    IProgram.terminate(1);

    return 1;
  }

  public void work() throws MThreadBoundaryException override {
    IProgram* program = inject(IProgram).onHeap();
    thread.getContextManager().setContext(IThread.getTypeName(), thread);
    MProgramResult* programResult = build(MProgramResult)
      .withResult(program.run(mArguments))
      .onHeap();
    program = null;
    thread.getContextManager().eraseContext(IThread.getTypeName());
    thread.send(programResult);
  }

  /**
   * Represents program result
   */
  public model MProgramResult {
    receive int mResult;

    public int getResult() {
      return mResult;
    }
  }
}
