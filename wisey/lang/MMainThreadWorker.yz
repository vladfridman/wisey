package wisey.lang;

import wisey.threads.CCallStack;
import wisey.threads.CWorkerThread;
import wisey.threads.IThread;
import wisey.threads.IWorker;
import wisey.threads.MThreadBoundaryException;

/**
 * This object is the worker for the main thread.
 *
 * It injects the program controller and calls run() on it
 */
model MMainThreadWorker implements IWorker {

  /**
   * Command line arguments passed from the main() function
   */
  receive immutable string[]* mArguments;

  /**
   * This method is called from main() function automatically generated by compiler
   */
  public static int startMainThread(string[]* arguments) {
    CWorkerThread* workerThread = inject(CWorkerThread).onHeap();
    MMainThreadWorker* mainThreadWorker = build(MMainThreadWorker)
      .withArguments(arguments)
      .onHeap();
    workerThread.start(mainThreadWorker);
    MProgramResult* result = workerThread.awaitResult();
    if (result != null) {
      return result.getResult();
    }
    
    printerr("Main thread ended without a result\n");
    IProgram.terminate(1);

    return 1;
  }

  public void work() throws MThreadBoundaryException override {
    IProgram* program = inject(IProgram).onHeap();
    MProgramResult* programResult = build(MProgramResult)
      .withResult(program.run(mArguments))
      .onHeap();
    program = null;
    thread.send(programResult);
  }

  /**
   * Represents program result
   */
  public model MProgramResult {
    /**
     * Program result value expected to be of type int
     */
    receive int mResult;

    /**
     * Returns back program result value
     */
    public int getResult() {
      return mResult;
    }
  }
}
