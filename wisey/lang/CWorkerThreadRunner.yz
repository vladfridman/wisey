package wisey.lang;

import wisey.lang.IWorkerThread;

::llvm::struct _opaque_pthread_t {
  ::llvm::i64,
  ::llvm::struct::__darwin_pthread_handler_rec*,
  ::llvm::i8 [8176],
}

::llvm::struct __darwin_pthread_handler_rec {
  ::llvm::void (::llvm::i8*)*, 
  ::llvm::i8*, 
  ::llvm::struct::__darwin_pthread_handler_rec*
}

::llvm::struct _opaque_pthread_attr_t {
  ::llvm::i64,
  ::llvm::i8 [56],
}

::llvm::function ::llvm::void pthread_create(::llvm::struct::_opaque_pthread_t**, 
                                             ::llvm::struct::_opaque_pthread_attr_t*, 
                                             ::llvm::i8* (::llvm::i8*)*, 
                                             ::llvm::i8*);

::llvm::function ::llvm::void pthread_join(::llvm::struct::_opaque_pthread_t*, ::llvm::i8**);

::llvm::function ::llvm::void pthread_exit(::llvm::i8*);

/**
 * Uses pthread library to enable thread functionality
 */
controller CWorkerThreadRunner {
  state ::llvm::struct::_opaque_pthread_t* mMyNativeThread;

  ::llvm::function ::llvm::i8* runBridge(::llvm::i8* argument) {
    thread = (IThread) ((IWorkerThread) argument);
    callstack = null;
    callstack = thread.getCallStack();
    ((IWorkerThread) argument).work();

    return argument;
  }

  public void createThread(IWorkerThread workerThread) {
    ::llvm::function::pthread_create(::llvm::reference(mMyNativeThread), 
                                     (::llvm::struct::_opaque_pthread_attr_t*) null, 
                                     runBridge, 
                                     (::llvm::i8*) workerThread);
  }

  public void joinThread() {
    ::llvm::function::pthread_join(mMyNativeThread, (::llvm::i8**) null);
  }

  public void exitThread() {
    ::llvm::function::pthread_exit((::llvm::i8*) null);
  }
}