package wisey.lang;

import wisey.lang.IWorkerThread;

::llvm::struct _opaque_pthread_t {
  ::llvm::i64,
  ::llvm::struct::__darwin_pthread_handler_rec*,
  ::llvm::i8 [8176],
}

::llvm::struct __darwin_pthread_handler_rec {
  ::llvm::void (::llvm::i8*)*, 
  ::llvm::i8*, 
  ::llvm::struct::__darwin_pthread_handler_rec*
}

::llvm::struct _opaque_pthread_attr_t {
  ::llvm::i64,
  ::llvm::i8 [56],
}

::llvm::function ::llvm::void pthread_create(::llvm::struct::_opaque_pthread_t**, 
                                             ::llvm::struct::_opaque_pthread_attr_t*, 
                                             ::llvm::i8* (::llvm::i8*)*, 
                                             ::llvm::i8*);

::llvm::function ::llvm::void pthread_join(::llvm::struct::_opaque_pthread_t*, ::llvm::i8**);

::llvm::function ::llvm::void pthread_cancel(::llvm::struct::_opaque_pthread_t*);

::llvm::function ::llvm::void pthread_exit(::llvm::i8*);

/**
 * Uses pthread library to enable thread functionality
 */
controller CWorkerThreadRunner {
  state ::llvm::struct::_opaque_pthread_t* mMyNativeThread;
  state boolean mIsCanceled;

  /**
   * This native function bridges work() method of the thread object with the i8* (i8*)* function 
   * parameter of the posix threads interface.
   */
  ::llvm::function ::llvm::i8* workBridge(::llvm::i8* argument) {
    thread = (IThread) ((IWorkerThread) argument);
    callstack = null;
    callstack = thread.getCallStack();
    ((IWorkerThread) argument).work();

    return argument;
  }

  /**
   * Creates a new posix thread that calls workBridge function that in turn calls work method
   */
  public void createThread(IWorkerThread workerThread) {
    ::llvm::function::pthread_create(::llvm::reference(mMyNativeThread), 
                                     (::llvm::struct::_opaque_pthread_attr_t*) null, 
                                     workBridge, 
                                     (::llvm::i8*) workerThread);
  }

  /**
   * Waits for thread to finish its work
   */
  public void joinThread() {
    if (!mIsCanceled) {
      ::llvm::function::pthread_join(mMyNativeThread, (::llvm::i8**) null);
    }
  }

  /**
   * Exits thread
   */
  public void exitThread() {
    ::llvm::function::pthread_exit((::llvm::i8*) null);
  }

  /**
   * Cancel execution of the worker thread
   */
  public void cancelThread() {
    ::llvm::function::pthread_cancel(mMyNativeThread);
    mIsCanceled = true;
  }

  /**
   * Tells whether thread has started
   */
  public boolean hasStarted() {
    return mMyNativeThread != null;
  }

  /**
   * Tells whether the worker thread has been cancelled
   */
  public boolean wasCancelled() {
    return mIsCanceled;
  }
}