package wisey.lang;

/**
 * String model is an immutable representation of a string
 */
model MString {

  receive immutable char[]* mContent;

  /**
   * Creates an MString from a string literal
   */
  public static MString* createFromString(string input) {
    return copyMemoryAndBuild(input, input.getLength() + 1);
  }

  /**
   * Creates an MString from a null terminated char array
   */
  public static MString* createFromCharArray(char[] input) {
    if (input.getSize() == 0) {
      return copyMemoryAndBuild(input, 1);
    }
    long length = input[input.getSize() - 1] == '\0' 
      ? (long) ::llvm::function::strlen(input) + 1
      : input.getSize() + 1;
    return copyMemoryAndBuild(input, length);
  }

  /**
   * Creates an MString from a null terminated immutable char array
   */
  public static MString* createFromImmutableCharArray(immutable char[] input) {
    if (input.getSize() == 0) {
      return copyMemoryAndBuild(input, 1);
    }
    long length = input[input.getSize() - 1] == '\0' 
      ? (long) ::llvm::function::strlen(input) + 1
      : input.getSize() + 1;
    return copyMemoryAndBuild(input, length);
  }

  /**
   * Creates CString equivalent
   */
  public CString* toController() {
    return CString.createFromImmutableCharArray(mContent);
  }

  /**
   * Returns the string length
   */
  public long getLength() {
    long size = mContent.getSize();
    return size ? size - 1 : 0l;
  }

  /**
   * Creates a copy of the string
   */
  public MString* copy() {
    long length = mContent.getSize();
    char[]* buffer = new char[length];
    MSystem.copyMemory(buffer, mContent, length);
    return build(MString).withContent(buffer).onHeap();
  }

  /**
   * Returns char array for this string
   */
  public immutable char[] getContent() {
    return mContent;
  }

  /**
   * Compares the string to the given input string and returns 0 if they are equal
   */
  public int compareToString(string input) {
    return ::llvm::function::strcmp(mContent, input);
  }

  /**
   * Compares the string to the given input MString and returns 0 if they are equal
   */
  public int compareToMString(MString input) {
    return ::llvm::function::strcmp(mContent, input.getContent());
  }

  /**
   * Compares the string to the given input immutable char array and returns 0 if they are equal
   */
  public int compareToImmutableCharArray(immutable char[] input) {
    return ::llvm::function::strcmp(mContent, input);
  }

  /**
   * Compares the string to the given input char array and returns 0 if they are equal
   */
  public int compareToCharArray(char[] input) {
    return ::llvm::function::strcmp(mContent, input);
  }

  private static MString* copyMemoryAndBuild(::llvm::i8::pointer source, long length) {
    char[]* buffer = new char[length];
    MSystem.copyMemory(buffer, source, length - 1);
    return build(MString).withContent(buffer).onHeap();    
  }
}