package wisey.lang;

/**
 * String node allows one to work with a modifiable string.
 * <br/>
 * Instantiate this object by calling one of the static create methods
 */
node NString {

  private constant long DEFAULT_INITIAL_CAPACITY = 64l;

  /**
   * Character buffer containing the string
   */
  receive char[]* mBuffer;

  /**
   * Character buffer capacity
   */
  receive long mCapacity; 

  /**
   * Current string length
   */
  receive long mLength;

  /**
   * Creates an empty modifiable NString
   */
  public static NString* create() {
    return build(NString)
      .withBuffer(new char[DEFAULT_INITIAL_CAPACITY])
      .withCapacity(DEFAULT_INITIAL_CAPACITY)
      .withLength(0)
      .onHeap();
  }

  /**
   * Create a string object on memory pool
   */
  public static NString* createOnPool(CMemoryPool pool) {
    return build(NString)
      .withBuffer(new char[DEFAULT_INITIAL_CAPACITY])
      .withCapacity(DEFAULT_INITIAL_CAPACITY)
      .withLength(0)
      .onPool(pool);
  }

  /**
   * Clears the string without changing its capacity
   */
  public void clear() {
    mBuffer[0] = '\0';
    mLength = 0;
  }

  /**
   * Creates a modifiable NString from a string literal
   */
  public static NString* createFromString(string input) {
    return copyMemoryAndBuild(input, input.getLength());
  }

  /**
   * Creates a modifiable NString from an MString model
   */
  public static NString* createFromModel(MString input) {
    return copyMemoryAndBuild(input.getContent(), input.getLength());
  }

  /**
   * Creates a NString from a null terminated char array
   */
  public static NString* createFromCharArray(char[] input) {
    if (input.getSize() == 0) {
      return copyMemoryAndBuild(input, 0);
    }
    long length = input[input.getSize() - 1] == '\0' 
      ? (long) ::llvm::function::strlen(input)
      : input.getSize();
    return copyMemoryAndBuild(input, length);
  }

  /**
   * Creates a NString from a null terminated immutable char array
   */
  public static NString* createFromImmutableCharArray(immutable char[] input) {
    if (input.getSize() == 0) {
      return copyMemoryAndBuild(input, 0);
    }
    long length = input[input.getSize() - 1] == '\0' 
      ? (long) ::llvm::function::strlen(input)
      : input.getSize();
    return copyMemoryAndBuild(input, length);
  }

  /**
   * Get a string representation of a boolean
   */
  public static NString* createFromBoolean(boolean input) {
    return input ? createFromString("true") : createFromString("false");
  }

  /**
   * Get a string representation of an int
   */
  public static NString* createFromInt(int input) {
    char[]* buffer = new char[80];
    ::llvm::function::sprintf(buffer, "%d", input);
    return createFromCharArray(buffer);
  }

  /**
   * Get a string representation of a long
   */
  public static NString* createFromLong(long input) {
    char[]* buffer = new char[80];
    ::llvm::function::sprintf(buffer, "%d", input);
    return createFromCharArray(buffer);
  }

  /**
   * Get a string representation of a char
   */
  public static NString* createFromChar(char input) {
    char[]* buffer = new char[2];
    ::llvm::function::sprintf(buffer, "%c", input);
    return createFromCharArray(buffer);
  }

  /**
   * Get a string representation of a float
   */
  public static NString* createFromFloat(float input) {
    char[]* buffer = new char[80];
    ::llvm::function::sprintf(buffer, "%f", (double) input);
    return createFromCharArray(buffer);
  }

  /**
   * Get a string representation of a double
   */
  public static NString* createFromDouble(double input) {
    char[]* buffer = new char[80];
    ::llvm::function::sprintf(buffer, "%e", input);
    return createFromCharArray(buffer);
  }

  /**
   * Tries to convert the NString to boolean
   */
  public boolean toBoolean() {
    if (!compareToString("true") || !compareToString("1")) {
      return true;
    }
    if (!compareToString("false") || !compareToString("0")) {
      return false;
    }

    throw build(MCastException).withFromType("string").withToType("boolean").onHeap();
  }

  /**
   * Tries to convert the NString to char
   */
  public char toChar() {
    char value;
    int success = ::llvm::function::sscanf(mBuffer, "%c", ::llvm::reference(value));
    if (success) {
      return value;
    }

    throw build(MCastException).withFromType("string").withToType("char").onHeap();
  }

  /**
   * Tries to convert the NString to int
   */
  public int toInt() {
    int value;
    int success = ::llvm::function::sscanf(mBuffer, "%d", ::llvm::reference(value));
    if (success) {
      return value;
    }

    throw build(MCastException).withFromType("string").withToType("int").onHeap();
  }

  /**
   * Tries to convert the NString to long
   */
  public long toLong() {
    long value;
    int success = ::llvm::function::sscanf(mBuffer, "%d", ::llvm::reference(value));
    if (success) {
      return value;
    }

    throw build(MCastException).withFromType("string").withToType("long").onHeap();
  }

  /**
   * Tries to convert the NString to float
   */
  public float toFloat() {
    float value;
    int success = ::llvm::function::sscanf(mBuffer, "%f", ::llvm::reference(value));
    if (success) {
      return value;
    }

    throw build(MCastException).withFromType("string").withToType("float").onHeap();
  }

  /**
   * Tries to convert the NString to double
   */
  public double toDouble() {
    float value;
    int success = ::llvm::function::sscanf(mBuffer, "%f", ::llvm::reference(value));
    if (success) {
      return value;
    }

    throw build(MCastException).withFromType("string").withToType("double").onHeap();
  }

  /**
   * Creates an MString copy of this string
   */
  public MString* toModel() {
    char[]* buffer = new char[mLength + 1];
    MSystem.copyMemory(buffer, mBuffer, mLength);
    return build(MString).withContent(buffer).onHeap();    
  }

  /**
   * Returns the string length
   */
  public long getLength() {
    return mLength;
  }

  /**
   * Creates a copy of the string
   */
  public NString* copy() {
    char[]* buffer = new char[mCapacity];
    MSystem.copyMemory(buffer, mBuffer, mCapacity);
    return build(NString)
      .withBuffer(buffer)
      .withCapacity(mCapacity)
      .withLength(mLength)
      .onHeap();
  }

  /**
   * Tries to fit the new string into existing buffer, creates a new buffer if needed
   */
  public NString appendString(string appendix) {
    return append(appendix, appendix.getLength());
  }

  /**
   * Appends another NString to this string
   */
  public NString appendNString(NString appendix) {
    return append(appendix.getContent(), appendix.getLength());
  }

  /**
   * Appends another MString to this string
   */
  public NString appendMString(MString appendix) {
    return append(appendix.getContent(), appendix.getLength());
  }

  /**
   * Appends a character array to the string
   */
  public NString appendCharArray(char[] appendix) {
    if (appendix.getSize() == 0) {
      return this;
    }
    long length = appendix[appendix.getSize() - 1] == '\0' 
      ? ::llvm::function::strlen(appendix)
      : appendix.getSize();
    return append(appendix, length);
  }

  /**
   * Appends a immutable character array to the string
   */
  public NString appendImmutableCharArray(immutable char[] appendix) {
    if (appendix.getSize() == 0) {
      return this;
    }
    long length = appendix[appendix.getSize() - 1] == '\0' 
      ? ::llvm::function::strlen(appendix)
      : appendix.getSize();
    return append(appendix, length);
  }

  /**
   * Returns char array for this string
   */
  public char[] getContent() {
    return mBuffer;
  }

  /**
   * Returns string capacity
   */ 
  public long getCapacity() {
    return mCapacity;
  }

  /**
   * Compares the string to the given input string and returns 0 if they are equal
   */
  public int compareToString(string input) {
    return ::llvm::function::strcmp(mBuffer, input);
  }

  /**
   * Compares the string to the given input MString and returns 0 if they are equal
   */
  public int compareToMString(MString input) {
    return ::llvm::function::strcmp(mBuffer, input.getContent());
  }

  /**
   * Compares the string to the given input NString and returns 0 if they are equal
   */
  public int compareToNString(NString input) {
    return ::llvm::function::strcmp(mBuffer, input.getContent());
  }

  /**
   * Compares the string to the given input immutable char array and returns 0 if they are equal
   */
  public int compareToImmutableCharArray(immutable char[] input) {
    return ::llvm::function::strcmp(mBuffer, input);
  }

  /**
   * Compares the string to the given input char array and returns 0 if they are equal
   */
  public int compareToCharArray(char[] input) {
    return ::llvm::function::strcmp(mBuffer, input);
  }

  /**
   * Returns true is this string starts with the given string
   */
  public boolean startsWith(string start) {
    if (start.getLength() > getLength()) {
      return false;
    }
    return ::llvm::function::strncmp(mBuffer, start, start.getLength()) == 0;
  }

  /**
   * Returns character at a given position
   */
  public char charAt(long i) {
    return mBuffer[i];
  }

  private static long estimateCapacity(long size) {
    return (long) (((float) (size + 1)) * 1.5);
  }

  private static NString* copyMemoryAndBuild(::llvm::i8::pointer source, long length) {
    long capacity = estimateCapacity(length);
    char[]* buffer = new char[capacity];
    MSystem.copyMemory(buffer, source, length);
    return build(NString)
      .withBuffer(buffer)
      .withCapacity(capacity)
      .withLength(length)
      .onHeap();
  }

  private NString append(::llvm::i8::pointer source, long sourceLength) {
    long length = mLength + sourceLength;
    if (length <= mCapacity) {
       ::llvm::i8::pointer destination = mBuffer;     
       destination = destination + mLength;     
       MSystem.copyMemory(destination, source, sourceLength);
    } else {
      long newCapacity = estimateCapacity(length);
      char[]* buffer = new char[newCapacity];
      ::llvm::i8::pointer destination = buffer;
      MSystem.copyMemory(destination, mBuffer, mLength);
      destination = destination + mLength;
      MSystem.copyMemory(destination, source, sourceLength);
      mBuffer = buffer;
      mCapacity = newCapacity;
    }

    mLength = length;
    
    return this;
  }
}