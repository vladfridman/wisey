package wisey.data;

/**
 * Map of llvm pointer references 
 */
controller CPointerMap {

  public constant long DEFAULT_SIZE = 109l;

  receive long mSize;
  inject immediate CPointerList*[mSize]* mBuckets;

  /**
   * Creates a hashmap of deafault size
   */
  public static CPointerMap* create() {
    return injector(CPointerMap).withSize(DEFAULT_SIZE).inject();
  }

  /**
   * Creates a hasmap of the given size
   */
  public static CPointerMap* createWithSize(long size) {
    return injector(CPointerMap).withSize(size).inject();
  }

  /**
   * Puts a reference to an object into the map according keyed by the given key
   */
  public void put(::llvm::i8::pointer key, CPointerList.IListElement* element) {
    long hash = key % mSize;
    if (mBuckets[hash] == null) {
      mBuckets[hash] = injector(CPointerList).inject();
    }
    CPointerList pointerList = mBuckets[hash];
    pointerList.erase(key);
    pointerList.append(key, element);
  }

  /**
   * Looks up a reference to an object given by the key
   */
  public CPointerList.IListElement get(::llvm::i8::pointer key) {
    long hash = key % mSize;
    CPointerList pointerList = mBuckets[hash];
    if (!pointerList) {
      return null;
    }
    return pointerList.get(key);
  }

  /**
   * Erases entries in the hashmap with the given key
   */
  public void erase(::llvm::i8::pointer key) {
    long hash = key % mSize;
    CPointerList pointerList = mBuckets[hash];
    if (!pointerList) {
      return;
    }
    pointerList.erase(key);
  }

  /**
   * Clears the map
   */
  public void clear() {
    mBuckets = null;
  }
}