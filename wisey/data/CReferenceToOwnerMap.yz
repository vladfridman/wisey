package wisey.data;

/**
 * Map of owner references to wisey objects
 * <pre>
 * controller CProgram implements IProgram {
 *   inject CReferenceToOwnerMap* mMap;
 * 
 *   public int run(immutable string[] arguments) override {
 *     string make = "Tesla";
 *     MCar* tesla = build(MCar).withMake(make).onHeap(); 
 *     // Store entry in the map where key is "Tesla" and value is the MCar object allocated above
 *     // tesla is null after this instruction
 *     mMap.put(tesla.getMake(), tesla);
 *     // Get ownership back from the map to the MCar object
 *     tesla = mMap.take(make);
 *     return 0;
 *   }
 * }
 * </pre>
 */
controller CReferenceToOwnerMap {

  inject immediate ::llvm::i8::pointer* mStdMap.withConstructor(mapCreate).withDestructor(mapDestroy);

  /**
   * Puts a reference to an object into the map according keyed by the given key
   */
  public void put(::llvm::i8::pointer key, ::wisey::object* value) {
    ::llvm::function::stl_reference_to_owner_map_put(mStdMap, key, value);
  }

  /**
   * Looks up a reference to an object given by the key
   */
  public ::wisey::object get(::llvm::i8::pointer key) {
    return ::llvm::function::stl_reference_to_object_map_get(mStdMap, key);
  }

  /**
   * Returns the object associated with the given key
   */
  public ::wisey::object* take(::llvm::i8::pointer key) {
    return ::llvm::function::stl_reference_to_owner_map_take(mStdMap, key);
  }

  /**
   * Creates an instance of the COwnerMap
   */
  public static CReferenceToOwnerMap* create() {
    return inject(CReferenceToOwnerMap).onHeap();
  }

  /**
   * Erases entries in the hashmap with the given key
   */
  public void erase(::llvm::i8::pointer key) {
    ::llvm::function::stl_reference_to_owner_map_erase(mStdMap, key);
  }

  /**
   * Clears the map
   */
  public void clear() {
    ::llvm::function::stl_reference_to_owner_map_clear(mStdMap);
  }

  /**
   * Returns map size
   */
  public long getSize() {
    return ::llvm::function::stl_reference_to_object_map_size(mStdMap);
  }

  private ::llvm::function ::llvm::i8::pointer mapCreate() {
    return ::llvm::function::stl_reference_to_object_map_create();
  }

  private ::llvm::function ::llvm::void mapDestroy(::llvm::i8::pointer map) {
    ::llvm::function::stl_reference_to_owner_map_clear(map);
    ::llvm::function::stl_reference_to_object_map_destroy(map);
  }
}