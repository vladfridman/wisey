package wisey.data;

/**
 * Map of ints keyed by longs
 */
controller CLongToIntMap {

  inject immediate ::llvm::i8::pointer* mStdMap.withConstructor(mapCreate).withDestructor(mapDestroy);

  /**
   * Puts a reference to an object into the map according keyed by the given key
   */
  public void put(long key, int value) {
    ::llvm::function::stl_long_to_int_map_put(mStdMap, key, value);
  }

  /**
   * Looks up a reference to an object given by the key
   */
  public int get(long key) throws MMapEntryDoesNotExistException {
    if (!::llvm::function::stl_long_to_int_map_has(mStdMap, key)) {
      throw build(MMapEntryDoesNotExistException).onHeap();
    }
    return ::llvm::function::stl_long_to_int_map_get(mStdMap, key);
  }

  /**
   * Tells whether an entry with the given key exists
   */
  public boolean has(long key) throws MMapEntryDoesNotExistException {
    return ::llvm::function::stl_long_to_int_map_has(mStdMap, key);
  }

  /**
   * Creates an instance of the CLongToIntMap
   */
  public static CLongToIntMap* create() {
    return inject(CLongToIntMap).onHeap();
  }

  /**
   * Erases entries in the hashmap with the given key
   */
  public void erase(long key) {
    ::llvm::function::stl_long_to_int_map_erase(mStdMap, key);
  }

  /**
   * Clears the map
   */
  public void clear() {
    ::llvm::function::stl_long_to_int_map_clear(mStdMap);
  }

  /**
   * Returns map size
   */
  public long getSize() {
    return ::llvm::function::stl_long_to_int_map_size(mStdMap);
  }

  /**
   * Returns an array containing map values
   */
  public int[]* toArray() {
    return ::llvm::function::stl_long_to_int_map_to_array(mStdMap);
  }

  private ::llvm::function ::llvm::i8::pointer mapCreate() {
    return ::llvm::function::stl_long_to_int_map_create();
  }

  private ::llvm::function ::llvm::void mapDestroy(::llvm::i8::pointer map) {
    ::llvm::function::stl_long_to_int_map_clear(map);
    ::llvm::function::stl_long_to_int_map_destroy(map);
  }
}