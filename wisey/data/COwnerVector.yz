package wisey.data;

import wisey.lang.MSystem;

/**
 * Vector where every element is an owner reference to an object.
 */
controller COwnerVector {

  inject immediate ::llvm::i8::pointer* mStdVector.withConstructor(vectorCreate).withDestructor(vectorDestroy);

  /**
   * Appends a value to the end of the vector
   */
  public void pushBack(::wisey::object* value) {
    ::llvm::function::stl_owner_vector_push_back(mStdVector, value);
  }

  /**
   * Deletes the last element from the vector
   */
  public ::wisey::object* popBack() {
    return ::llvm::function::stl_owner_vector_pop_back(mStdVector);
  }

  /**
   * Returns the element with the given index
   */
  public ::wisey::object getAt(long index) {
    return ::llvm::function::stl_object_vector_at(mStdVector, index);
  }

  /**
   * Returns vector size
   */
  public long getSize() {
    return ::llvm::function::stl_object_vector_size(mStdVector);
  }

  /**
   * Clears the vector
   */
  public void clear() {
    ::llvm::function::stl_owner_vector_clear(mStdVector);
  }

  /**
   * Sort vector using the given compare function
   */
  public void sort(IObjectComparator comparator) {
    ::llvm::function::stl_object_vector_sort(mStdVector, comparator, thread, callstack);
  }

  private ::llvm::function ::llvm::i8::pointer vectorCreate() {
    return ::llvm::function::stl_object_vector_create();
  }

  private ::llvm::function ::llvm::void vectorDestroy(::llvm::i8::pointer map) {
    ::llvm::function::stl_owner_vector_clear(map);
    ::llvm::function::stl_object_vector_destroy(map);
  }
}