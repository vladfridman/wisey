package wisey.data;

import wisey.lang.MSystem;

/**
 * Vector of owner references
 */
controller COwnerVector {

  public constant long DEFAULT_INITIAL_CAPACITY = 16l;

  receive long mCapacity;
  inject ::wisey::object*[mCapacity]* mData;
  state long mSize;

  /**
   * Creates a vector with default initial capacity
   */
  public static COwnerVector* create() {
    return injector(COwnerVector).withCapacity(DEFAULT_INITIAL_CAPACITY)
      .inject();    
  }

  /**
   * Creates a vector with specified initial capacity
   */
  public static COwnerVector* createWithCapacity(long initialCapacity) {
    return injector(COwnerVector).withCapacity(initialCapacity)
      .inject();
  }

  /**
   * Appends a value to the end of the vector
   */
  public void pushBack(::wisey::object* value) {
    if (mSize >= mData.getSize()) {
      resize();
    }
    mData[mSize] = value;
    mSize++; 
  }

  /**
   * Deletes the last element from the vector
   */
  public ::wisey::object* popBack() {
    mSize--; 
    return mData[mSize];
  }

  /**
   * Returns the elemtn with the given inde
   */
  public ::wisey::object getAt(long index) {
    return mData[index];
  }

  /**
   * Returns vector size
   */
  public long getSize() {
    return mSize;
  }

  /**
   * Returns vector capacity
   */
  public long getCapacity() {
    return mCapacity;
  }

  private void resize() {
    mCapacity = mSize * 2;
    ::wisey::object*[]* array = new ::wisey::object*[mCapacity];
    MSystem.memcopy(array, mData, mCapacity);
    MSystem.memset(mData, mSize * 8);
    mData = array;
  }
}