package wisey.data;

import wisey.lang.MSystem;

/**
 * Vector of references to objects
 */
controller CReferenceVector {

  public constant long DEFAULT_INITIAL_CAPACITY = 16l;

  receive long mCapacity;
  inject ::wisey::object[mCapacity]* mData;
  state long mSize;

  /**
   * Creates a vector with default initial capacity
   */
  public static CReferenceVector* create() {
    return injector(CReferenceVector).withCapacity(DEFAULT_INITIAL_CAPACITY)
      .inject();    
  }

  /**
   * Creates a vector with specified initial capacity
   */
  public static CReferenceVector* createWithCapacity(long initialCapacity) {
    return injector(CReferenceVector).withCapacity(initialCapacity)
      .inject();
  }

  /**
   * Appends a value to the end of the vector
   */
  public void pushBack(::wisey::object value) {
    if (mSize >= mData.getSize()) {
      resize();
    }
    mData[mSize] = value;
    mSize++; 
  }

  /**
   * Deletes the last element from the vector
   */
  public ::wisey::object popBack() {
    mSize--; 
    return mData[mSize];
  }

  /**
   * Returns the elemtn with the given inde
   */
  public ::wisey::object getAt(long index) {
    return mData[index];
  }

  /**
   * Returns vector size
   */
  public long getSize() {
    return mSize;
  }

  /**
   * Returns vector capacity
   */
  public long getCapacity() {
    return mCapacity;
  }

  /**
   * Clears the vector
   */
  public void clear() {
    for (int i = 0; i < mData.getSize(); i++) {
      mData[i] = null;
    }
    mSize = 0;
  }

  private void resize() {
    mCapacity = mSize * 2;
    ::wisey::object[]* array = new ::wisey::object[mCapacity];
    MSystem.copyMemory(array, mData, mSize * 8);
    MSystem.zeroMemory(mData, mSize * 8);
    mData = array;
  }
}