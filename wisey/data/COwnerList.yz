package wisey.data;

import wisey.lang.CMemoryPool;

/**
 * List where every element is an owner reference to an object.
 * <pre>
 * controller CProgram implements IProgram {
 *   inject COwnerList* mOwnerList;
 * 
 *   public int run(immutable string[] arguments) override {
 *     MCar* tesla = build(MCar).withYear(2019).onHeap(); 
 *     // tesla is null after this instruction because ownership has been passed to the list
 *     mOwnerList.pushBack(tesla);
 *     // returns 2019
 *     return mOwnerList.front().getYear();
 *   }
 * }
 * </pre>
 */
controller COwnerList {

  inject immediate ::llvm::i8::pointer* mList.withConstructor(listCreate).withDestructor(listDestroy);

  /**
   * Pops an owner reference from the back of the list, returns null if the list is empty
   */
  public ::wisey::object* popBack() {
    ::wisey::object* value = ::llvm::function::stl_owner_list_pop_back(mList);
    return value;
  }

  /**
   * Push an owner reference to the back of the list
   */
  public void pushBack(::wisey::object* value) {
    ::llvm::function::stl_owner_list_push_back(mList, value);
  }

  /**
   * Returns the object reference at the back of the list, returns null if the list is empty
   */
  public ::wisey::object back() {
    return ::llvm::function::stl_object_list_back(mList);
  }

  /**
   * Pops an owner reference from the front of the list, returns null if the list is empty
   */
  public ::wisey::object* popFront() {
    ::wisey::object* value = ::llvm::function::stl_owner_list_pop_front(mList);
    return value;
  }

  /**
   * Push an owner reference to the front of the list
   */
  public void pushFront(::wisey::object* value) {
    ::llvm::function::stl_owner_list_push_front(mList, value);
  }

  /**
   * Returns the object reference at the front of the list, returns null if the list is empty
   */
  public ::wisey::object front() {
    return ::llvm::function::stl_object_list_front(mList);
  }

  /**
   * Sort list using the given compare function
   */
  public void sort(IObjectComparator comparator) {
    ::llvm::function::stl_object_list_sort(mList, comparator, thread, callstack);
  }

  /**
   * Returns the list size
   */
  public long getSize() {
    return ::llvm::function::stl_object_list_size(mList);
  }

  /**
   * Clears the list and destroys all objects pointed to by owner referencess in the list
   */
  public void clear() {
    ::llvm::function::stl_owner_list_clear(mList);
  }

  private ::llvm::function ::llvm::i8::pointer listCreate() {
    return ::llvm::function::stl_object_list_create();
  }

  private ::llvm::function ::llvm::void listDestroy(::llvm::i8::pointer map) {
    ::llvm::function::stl_owner_list_clear(map);
    ::llvm::function::stl_object_list_destroy(map);
  }
}