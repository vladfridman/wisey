/* Interfaces */

external interface wisey.data.CPointerList.IListElement {

  wisey.data.CPointerList.IListElement getNext();
  wisey.data.CPointerList.IListElement* takeNext();
  void setNext(
    wisey.data.CPointerList.IListElement* element);
  ::llvm::i8::pointer getKey();
}

external interface wisey.data.IObjectComparator {

  boolean compare(
    ::wisey::object left,
    ::wisey::object right);
}

external interface wisey.lang.IException {

  void report();
}

external interface wisey.lang.IProgram {

  int run(
    immutable string[] arguments) throws wisey.lang.MReferenceCountException, wisey.lang.MNullPointerException;
  static void terminate(
    int exitCode);
}

external interface wisey.threads.IProducer {

  void produce();
}

external interface wisey.threads.IThread {

  void run() throws wisey.threads.MThreadBoundaryException;
  ::wisey::model* send(
    ::wisey::model* message) throws wisey.threads.MThreadBoundaryException;
  void exit() throws wisey.threads.MThreadBoundaryException;
  wisey.threads.CCallStack getCallStack() throws wisey.threads.MThreadBoundaryException;
  wisey.threads.CContextManager getContextManager() throws wisey.threads.MThreadBoundaryException;
  static void yield();
  static void sleep(
    int seconds);
  static void usleep(
    int microseconds);
  static void insideThreadGuard(
    wisey.threads.IThread object) throws wisey.threads.MThreadBoundaryException;
  static void outsideThreadGuard(
    wisey.threads.IThread object) throws wisey.threads.MThreadBoundaryException;
}

external interface wisey.threads.IThreadRunner {
}

external interface wisey.threads.IWorker {

  void work() throws wisey.threads.MThreadBoundaryException;
}

/* Models */

external model wisey.data.MLongToIntMap {

  receive ::llvm::i8::pointer::immutable* mMap;

  int get(
    long key) throws wisey.data.MMapEntryDoesNotExistException;
  long getSize();
  int[]* getValues();
  long[]* getKeys();
}

external model wisey.data.MMapEntryDoesNotExistException
  implements
    wisey.lang.IException {

  void report() override;
}

external model wisey.io.MFileCouldNotOpenException
  implements
    wisey.lang.IException {

  receive wisey.lang.MString* mFileName;

  void report() override;
  wisey.lang.MString getFileName();
}

external model wisey.io.MStreamClosedException
  implements
    wisey.lang.IException {

  void report() override;
}

external model wisey.io.MStreamCouldNotCloseException
  implements
    wisey.lang.IException {

  void report() override;
}

external model wisey.lang.MArrayIndexOutOfBoundsException
  implements
    wisey.lang.IException {

  receive long mArraySize;
  receive long mIndex;

  void report() override;
  long getArraySize();
  long getIndex();
}

external model wisey.lang.MCastException
  implements
    wisey.lang.IException {

  receive string mFromType;
  receive string mToType;

  void report() override;
  string getFromType();
  string getToType();
}

external model wisey.lang.MInterfaceNotBoundException
  implements
    wisey.lang.IException {

  receive string mInterfaceName;

  void report() override;
  string getInterfaceName();
}

external model wisey.lang.MMainThreadWorker
  implements
    wisey.threads.IWorker {

  receive immutable string[]* mArguments;

  static int startMainThread(
    string[]* arguments);
  void work() throws wisey.threads.MThreadBoundaryException override;
}

external model wisey.lang.MMemoryPoolNonEmpty
  implements
    wisey.lang.IException {

  receive long mObjectCount;
  receive wisey.lang.IException mNestedException;

  void report() override;
  long getObjectCount();
}

external model wisey.lang.MNullPointerException
  implements
    wisey.lang.IException {

  void report() override;
}

external model wisey.lang.MReferenceCountException
  implements
    wisey.lang.IException {

  receive string mObjectType;
  receive long mReferenceCount;
  receive wisey.lang.IException mNestedException;

  void report() override;
  long getReferenceCount();
  string getObjectType();
}

external model wisey.lang.MString {

  receive immutable char[]* mContent;

  static wisey.lang.MString* createFromString(
    string input);
  static wisey.lang.MString* createFromCharArray(
    char[] input);
  static wisey.lang.MString* createFromImmutableCharArray(
    immutable char[] input);
  wisey.lang.NString* toNode();
  long getLength();
  wisey.lang.MString* copy();
  immutable char[] getContent();
  int compareToString(
    string input);
  int compareToMString(
    wisey.lang.MString input);
  int compareToImmutableCharArray(
    immutable char[] input);
  int compareToCharArray(
    char[] input);
}

external model wisey.lang.MSystem {

  static string getOriginalObjectTypeName(
    ::wisey::object object);
  static long getProcessorCount();
  static void copyMemory(
    ::llvm::i8::pointer destination,
    ::llvm::i8::pointer source,
    ::llvm::i64 size);
  static void zeroMemory(
    ::llvm::i8::pointer pointer,
    ::llvm::i64 size);
}

external model wisey.threads.MContextNonExistantException
  implements
    wisey.lang.IException {

  receive string mContextName;

  void report() override;
  string getContextName();
}

external model wisey.threads.MStackOverflowException
  implements
    wisey.lang.IException {

  void report() override;
}

external model wisey.threads.MThreadBoundaryException
  implements
    wisey.lang.IException {

  receive boolean mIsMethodInternal;

  void report() override;
  boolean isMethodInternal();
}

/* Controllers */

external controller wisey.data.CConcurrentModelOwnerQueue {

  void push(
    ::wisey::model* object);
  ::wisey::model* pop();
}

external controller wisey.data.CLongToIntMap {

  void put(
    long key,
    int value);
  void addTo(
    long key,
    int value);
  int get(
    long key) throws wisey.data.MMapEntryDoesNotExistException;
  boolean has(
    long key) throws wisey.data.MMapEntryDoesNotExistException;
  static wisey.data.CLongToIntMap* create();
  void erase(
    long key);
  void clear();
  long getSize();
  int[]* getValues();
  long[]* getKeys();
  static wisey.data.MLongToIntMap* toModel(
    wisey.data.CLongToIntMap* map);
}

external controller wisey.data.COwnerList {

  void append(
    ::llvm::i8::pointer key,
    ::wisey::object* value);
  ::wisey::object get(
    ::llvm::i8::pointer key);
  void erase(
    ::llvm::i8::pointer key);
}

external controller wisey.data.COwnerVector {

  void pushBack(
    ::wisey::object* value);
  ::wisey::object* popBack();
  ::wisey::object getAt(
    long index);
  long getSize();
  void clear();
  void sort(
    wisey.data.IObjectComparator comparator);
}

external controller wisey.data.CPointerList {

  void append(
    ::llvm::i8::pointer key,
    wisey.data.CPointerList.IListElement* element);
  wisey.data.CPointerList.IListElement get(
    ::llvm::i8::pointer key);
  void erase(
    ::llvm::i8::pointer key);
}

external controller wisey.data.CReferenceList {

  void append(
    ::llvm::i8::pointer key,
    ::wisey::object value);
  ::wisey::object get(
    ::llvm::i8::pointer key);
  void erase(
    ::llvm::i8::pointer key);
}

external controller wisey.data.CReferenceToOwnerMap {

  void put(
    ::llvm::i8::pointer key,
    ::wisey::object* value);
  ::wisey::object get(
    ::llvm::i8::pointer key);
  ::wisey::object* take(
    ::llvm::i8::pointer key);
  static wisey.data.CReferenceToOwnerMap* create();
  void erase(
    ::llvm::i8::pointer key);
  void clear();
  long getSize();
}

external controller wisey.data.CReferenceToReferenceMap {

  void put(
    ::llvm::i8::pointer key,
    ::wisey::object value);
  ::wisey::object get(
    ::llvm::i8::pointer key);
  static wisey.data.CReferenceToReferenceMap* create();
  void erase(
    ::llvm::i8::pointer key);
  void clear();
  long getSize();
}

external controller wisey.data.CReferenceVector {

  void pushBack(
    ::wisey::object value);
  ::wisey::object popBack();
  ::wisey::object getAt(
    long index);
  long getSize();
  void clear();
  void sort(
    wisey.data.IObjectComparator comparator);
}

external controller wisey.io.CBinaryStreamWriter {

  receive ::llvm::struct::__sFILE::pointer mStream;

  static wisey.io.CBinaryStreamWriter* open(
    wisey.lang.NString fileName) throws wisey.io.MFileCouldNotOpenException;
  static wisey.io.CBinaryStreamWriter* openSystemOut();
  static wisey.io.CBinaryStreamWriter* openSystemErr();
  void write(
    byte[] array) throws wisey.io.MStreamClosedException;
  void writeImmutable(
    immutable byte[] array) throws wisey.io.MStreamClosedException;
  void close() throws wisey.io.MStreamClosedException, wisey.io.MStreamCouldNotCloseException;
}

external controller wisey.io.CTextStreamReader {

  constant int BUFFER_SIZE = 256;

  receive ::llvm::struct::__sFILE::pointer mStream;

  static wisey.io.CTextStreamReader* open(
    wisey.lang.NString fileName) throws wisey.io.MFileCouldNotOpenException;
  static wisey.io.CTextStreamReader* openSystemIn();
  wisey.lang.NString* readLine() throws wisey.io.MStreamClosedException;
  void close() throws wisey.io.MStreamClosedException, wisey.io.MStreamCouldNotCloseException;
}

external controller wisey.io.CTextStreamWriter {

  receive ::llvm::struct::__sFILE::pointer mStream;

  static wisey.io.CTextStreamWriter* open(
    wisey.lang.NString fileName) throws wisey.io.MFileCouldNotOpenException;
  static wisey.io.CTextStreamWriter* openSystemOut();
  static wisey.io.CTextStreamWriter* openSystemErr();
  void close() throws wisey.io.MStreamClosedException, wisey.io.MStreamCouldNotCloseException;
  ::llvm::struct::__sFILE::pointer getStream();
}

external controller wisey.lang.CMemoryPool {
}

external controller wisey.threads.CCallStack {

  constant int CALL_STACK_SIZE = 1024;

  static void throwStackOverflowException();
  void dumpStack();
  void reportException(
    wisey.lang.IException exception);
}

external controller wisey.threads.CContextManager {

  ::wisey::object getInstance(
    string contextName,
    string objectName);
  void setContext(
    string contextName,
    ::wisey::object context);
  void eraseContext(
    string contextName);
  void setInstance(
    string contextName,
    string objectName,
    ::wisey::object* instance);
}

external controller wisey.threads.CPoolThread
  implements
    wisey.threads.IThread {

  void start(
    wisey.threads.CThreadPool threadPool) throws wisey.threads.MThreadBoundaryException;
  void cancel() throws wisey.threads.MThreadBoundaryException;
  void exit() throws wisey.threads.MThreadBoundaryException override;
  ::wisey::model* send(
    ::wisey::model* message) throws wisey.threads.MThreadBoundaryException override;
  wisey.threads.CCallStack getCallStack() throws wisey.threads.MThreadBoundaryException override;
  wisey.threads.CContextManager getContextManager() throws wisey.threads.MThreadBoundaryException override;
  void run() throws wisey.threads.MThreadBoundaryException override;
}

external controller wisey.threads.CPoolThreadRunner
  implements
    wisey.threads.IThreadRunner {

  void createThread(
    wisey.threads.IThread poolThread);
  boolean isStarted();
  void cancelThread();
  void exitThread();
}

external controller wisey.threads.CProducerThread
  implements
    wisey.threads.IThread {

  void start(
    ::wisey::model* producer,
    int size) throws wisey.threads.MThreadBoundaryException;
  boolean isStarted() throws wisey.threads.MThreadBoundaryException;
  boolean isFinished() throws wisey.threads.MThreadBoundaryException;
  boolean isCancelled() throws wisey.threads.MThreadBoundaryException;
  void cancel() throws wisey.threads.MThreadBoundaryException;
  void reset() throws wisey.threads.MThreadBoundaryException;
  boolean hasResult() throws wisey.threads.MThreadBoundaryException;
  ::wisey::model* consume() throws wisey.threads.MThreadBoundaryException;
  void exit() throws wisey.threads.MThreadBoundaryException override;
  ::wisey::model* send(
    ::wisey::model* message) throws wisey.threads.MThreadBoundaryException override;
  wisey.threads.CCallStack getCallStack() throws wisey.threads.MThreadBoundaryException override;
  wisey.threads.CContextManager getContextManager() throws wisey.threads.MThreadBoundaryException override;
  void run() throws wisey.threads.MThreadBoundaryException override;
}

external controller wisey.threads.CProducerThreadRunner
  implements
    wisey.threads.IThreadRunner {

  void createThread(
    wisey.threads.IThread producerThread,
    int size);
  boolean isStarted();
  boolean isFinished();
  boolean isCancelled();
  void cancelThread();
  void resetThread();
  boolean hasResult();
  ::wisey::model* consumeResult();
  ::wisey::model* addResult(
    ::wisey::model* result);
  void exitThread();
  boolean hasRoom();
}

external controller wisey.threads.CThreadPool {

  receive long mPoolSize;

  void submit(
    wisey.threads.IWorker* worker);
  void start();
  void stop();
  ::wisey::model* getResult();
  wisey.threads.IWorker* getWorker();
  void addResult(
    ::wisey::model* result);
}

external controller wisey.threads.CWorkerThread
  implements
    wisey.threads.IThread {

  void start(
    ::wisey::model* worker) throws wisey.threads.MThreadBoundaryException;
  boolean isStarted() throws wisey.threads.MThreadBoundaryException;
  boolean isFinished() throws wisey.threads.MThreadBoundaryException;
  boolean isCancelled() throws wisey.threads.MThreadBoundaryException;
  ::wisey::model* awaitResult() throws wisey.threads.MThreadBoundaryException;
  void cancel() throws wisey.threads.MThreadBoundaryException;
  void reset() throws wisey.threads.MThreadBoundaryException;
  void exit() throws wisey.threads.MThreadBoundaryException override;
  ::wisey::model* send(
    ::wisey::model* message) throws wisey.threads.MThreadBoundaryException override;
  wisey.threads.CCallStack getCallStack() throws wisey.threads.MThreadBoundaryException override;
  wisey.threads.CContextManager getContextManager() throws wisey.threads.MThreadBoundaryException override;
  void run() throws wisey.threads.MThreadBoundaryException override;
}

external controller wisey.threads.CWorkerThreadRunner
  implements
    wisey.threads.IThreadRunner {

  void createThread(
    wisey.threads.IThread workerThread);
  boolean isStarted();
  boolean isFinished();
  boolean isCancelled();
  void joinThread();
  void cancelThread();
  void resetThread();
  void exitThread();
  void setResult(
    ::wisey::model* result);
  ::wisey::model* getResult();
}

/* Nodes */

external node wisey.lang.NString {

  constant long DEFAULT_INITIAL_CAPACITY = 64l;

  receive char[]* mBuffer;
  receive long mCapacity;
  receive long mLength;

  static wisey.lang.NString* create();
  static wisey.lang.NString* createOnPool(
    wisey.lang.CMemoryPool pool);
  static wisey.lang.NString* createFromString(
    string input);
  static wisey.lang.NString* createFromModel(
    wisey.lang.MString input);
  static wisey.lang.NString* createFromCharArray(
    char[] input);
  static wisey.lang.NString* createFromImmutableCharArray(
    immutable char[] input);
  static wisey.lang.NString* createFromBoolean(
    boolean input);
  static wisey.lang.NString* createFromInt(
    int input);
  static wisey.lang.NString* createFromLong(
    long input);
  static wisey.lang.NString* createFromChar(
    char input);
  static wisey.lang.NString* createFromFloat(
    float input);
  static wisey.lang.NString* createFromDouble(
    double input);
  boolean toBoolean();
  char toChar();
  int toInt();
  long toLong();
  float toFloat();
  double toDouble();
  wisey.lang.MString* toModel();
  long getLength();
  wisey.lang.NString* copy();
  wisey.lang.NString appendString(
    string appendix);
  wisey.lang.NString appendNString(
    wisey.lang.NString appendix);
  wisey.lang.NString appendMString(
    wisey.lang.MString appendix);
  wisey.lang.NString appendCharArray(
    char[] appendix);
  wisey.lang.NString appendImmutableCharArray(
    immutable char[] appendix);
  char[] getContent();
  long getCapacity();
  int compareToString(
    string input);
  int compareToMString(
    wisey.lang.MString input);
  int compareToNString(
    wisey.lang.NString input);
  int compareToImmutableCharArray(
    immutable char[] input);
  int compareToCharArray(
    char[] input);
  boolean startsWith(
    string start);
  char charAt(
    long i);
}

/* Bindings */

/* llvm Structs */

external ::llvm::struct __darwin_pthread_handler_rec {
  ::llvm::void (::llvm::i8::pointer)::pointer,
  ::llvm::i8::pointer,
  ::llvm::struct::__darwin_pthread_handler_rec::pointer,
}

external ::llvm::struct __sFILE {
  ::llvm::i8::pointer,
  ::llvm::i32,
  ::llvm::i32,
  ::llvm::i16,
  ::llvm::i16,
  ::llvm::struct::__sbuf,
  ::llvm::i32,
  ::llvm::i8::pointer,
  ::llvm::i32 (::llvm::i8::pointer)::pointer,
  ::llvm::i32 (::llvm::i8::pointer, ::llvm::i8::pointer, ::llvm::i32)::pointer,
  ::llvm::i64 (::llvm::i8::pointer, ::llvm::i64, ::llvm::i32)::pointer,
  ::llvm::i32 (::llvm::i8::pointer, ::llvm::i8::pointer, ::llvm::i32)::pointer,
  ::llvm::struct::__sbuf,
  ::llvm::i8::pointer,
  ::llvm::i32,
  ::llvm::array(::llvm::i8, 3),
  ::llvm::array(::llvm::i8, 1),
  ::llvm::struct::__sbuf,
  ::llvm::i32,
  ::llvm::i64,
}

external ::llvm::struct __sbuf {
  ::llvm::i8::pointer,
  ::llvm::i32,
}

external ::llvm::struct _opaque_pthread_attr_t {
  ::llvm::i64,
  ::llvm::array(::llvm::i8, 56),
}

external ::llvm::struct _opaque_pthread_t {
  ::llvm::i64,
  ::llvm::struct::__darwin_pthread_handler_rec::pointer,
  ::llvm::array(::llvm::i8, 8176),
}

/* llvm Functions */

external ::llvm::function ::llvm::void "__adjustReferenceCounter"(::llvm::i8::pointer, ::llvm::i64);
external ::llvm::function ::llvm::i8::pointer "__castObject"(::llvm::i8::pointer, ::llvm::i8::pointer);
external ::llvm::function ::llvm::void "__checkArrayNotReferenced"(::llvm::i64::pointer, ::llvm::i64, ::llvm::i8::pointer, ::llvm::i8::pointer);
external ::llvm::function ::llvm::void "__checkCastToObject"(::llvm::i8::pointer, ::llvm::i8, ::llvm::i8::pointer);
external ::llvm::function ::llvm::i8::pointer "__cxa_allocate_exception"(::llvm::i64);
external ::llvm::function ::llvm::i8::pointer "__cxa_begin_catch"(::llvm::i8::pointer);
external ::llvm::function ::llvm::void "__cxa_call_unexpected"(::llvm::i8::pointer);
external ::llvm::function ::llvm::void "__cxa_end_catch"();
external ::llvm::function ::llvm::i8::pointer "__cxa_get_exception_ptr"(::llvm::i8::pointer);
external ::llvm::function ::llvm::void "__cxa_throw"(::llvm::i8::pointer, ::llvm::i8::pointer, ::llvm::i8::pointer);
external ::llvm::function ::llvm::void "__destroyNativeObjectFunction"(::llvm::i8::pointer);
external ::llvm::function ::llvm::void "__destroyObjectOwnerFunction"(::llvm::i8::pointer, wisey.threads.IThread, wisey.threads.CCallStack, ::llvm::i8::pointer);
external ::llvm::function ::llvm::void "__destroyOwnerArrayFunction"(::llvm::i64::pointer, wisey.threads.IThread, wisey.threads.CCallStack, ::llvm::i64, ::llvm::i8::pointer, ::llvm::i1, ::llvm::i8::pointer);
external ::llvm::function ::llvm::void "__destroyPrimitiveArrayFunction"(::llvm::i64::pointer, ::llvm::i64, ::llvm::i8::pointer, ::llvm::i8::pointer);
external ::llvm::function ::llvm::void "__destroyReferenceArrayFunction"(::llvm::i64::pointer, ::llvm::i64, ::llvm::i8::pointer, ::llvm::i1, ::llvm::i8::pointer);
external ::llvm::function ::llvm::i8::pointer "__getOriginalObject"(::llvm::i8::pointer);
external ::llvm::function ::llvm::i8::pointer "__getOriginalObjectName"(::llvm::i8::pointer);
external ::llvm::function ::llvm::i32 "__gxx_personality_v0"(...);
external ::llvm::function ::llvm::i32 "__instanceOf"(::llvm::i8::pointer, ::llvm::i8::pointer);
external ::llvm::function ::llvm::i1 "__isObject"(::llvm::i8::pointer, ::llvm::i8);
external ::llvm::function ::llvm::void "__throwArrayIndexException"(wisey.threads.CCallStack, int, ::llvm::i64, ::llvm::i64);
external ::llvm::function ::llvm::void "__throwNPE"();
external ::llvm::function ::llvm::void "__throwReferenceCountException"(::llvm::i64, ::llvm::i8::pointer, ::llvm::i8::pointer);
external ::llvm::function ::llvm::void "exit"(::llvm::i32);
external ::llvm::function ::llvm::i8::pointer "fgets"(::llvm::i8::pointer, ::llvm::i32, ::llvm::struct::__sFILE::pointer);
external ::llvm::function ::llvm::i32 "fprintf"(::llvm::struct::__sFILE::pointer, ::llvm::i8::pointer, ...);
external ::llvm::function ::llvm::i64 "fwrite"(::llvm::i8::pointer, ::llvm::i64, ::llvm::i64, ::llvm::struct::__sFILE::pointer);
external ::llvm::function ::llvm::i32 "llvm.eh.typeid.for"(::llvm::i8::pointer);
external ::llvm::function ::llvm::void "llvm.memcpy.p0i8.p0i8.i64"(::llvm::i8::pointer, ::llvm::i8::pointer, ::llvm::i64, ::llvm::i1);
external ::llvm::function ::llvm::void "llvm.memset.p0i8.i64"(::llvm::i8::pointer, ::llvm::i8, ::llvm::i64, ::llvm::i1);
external ::llvm::function ::llvm::i8::pointer "malloc"(::llvm::i64);
external ::llvm::function ::llvm::i8::pointer "mem_pool_alloc"(::llvm::i8::pointer, long);
external ::llvm::function ::llvm::void "mem_pool_clear"(::llvm::i8::pointer);
external ::llvm::function ::llvm::i32 "printf"(::llvm::i8::pointer, ...);
external ::llvm::function ::llvm::i32 "sprintf"(::llvm::i8::pointer, ::llvm::i8::pointer, ...);
external ::llvm::function ::llvm::i32 "sscanf"(::llvm::i8::pointer, ::llvm::i8::pointer, ...);
external ::llvm::function ::llvm::i32 "strcmp"(::llvm::i8::pointer, ::llvm::i8::pointer);
external ::llvm::function ::llvm::i64 "strlen"(::llvm::i8::pointer);
external ::llvm::function int "strncmp"(::llvm::i8::pointer, ::llvm::i8::pointer, ::llvm::i64);

/* llvm Globals */

external ::llvm::struct::__sFILE::pointer __stderrp;
external ::llvm::struct::__sFILE::pointer __stdinp;
external ::llvm::struct::__sFILE::pointer __stdoutp;
