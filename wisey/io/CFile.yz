package wisey.io;

import wisey.lang.CString;
import wisey.lang.MString;

controller CFile {
  state MString* mFileName;
  state ::llvm::struct::__sFILE::pointer mFileStruct;

  /**
   * Tells whether a file is opened
   */
  public boolean isOpened() {
    return mFileStruct;
  }

  /**
   * Opens the given text file for writing
   *
   * Throws an exception if could not open the file or if another file is already opened
   */
  public void openForWriting(CString fileName) throws MFileOpenException, MFileCouldNotOpenException {
    open(fileName, "w");
  }

  /**
   * Opens the given text file for reading
   *
   * Throws an exception if could not open the file or if another file is already opened
   */
  public void openForReading(CString fileName) throws MFileOpenException, MFileCouldNotOpenException {
    open(fileName, "r");
  }

  /**
   * Close the file previously opened using one of the open method
   *
   * Throws an exception if could not open the file or if the file is not opened
   */
  public void close() throws MFileCloseException, MFileCouldNotCloseException {
    if (mFileStruct == null) {
      throw builder(MFileCloseException).build();
    }
    
    int result = ::llvm::function::fclose(mFileStruct);

    if (result != 0) {
      throw builder(MFileCouldNotCloseException).withFileName(mFileName).build();
    }
  }

  public ::llvm::struct::__sFILE::pointer getFileStruct() throws MFileAccessException {
    if (mFileStruct == null) {
      throw builder(MFileAccessException).build();
    }
    return mFileStruct;
  }

  private void open(CString fileName, string mode) 
    throws MFileOpenException, MFileCouldNotOpenException {
    if (mFileStruct != null) {
      throw builder(MFileOpenException)
        .withNewFile(fileName.toModel())
        .withCurrentFile(mFileName.copy())
        .build();
    }
    
    mFileName = fileName.toModel();
    mFileStruct = ::llvm::function::fopen(mFileName.getContent(), mode);
    if (mFileStruct == null) {
      throw builder(MFileCouldNotOpenException).withFileName(mFileName).build();
    }
  }
}