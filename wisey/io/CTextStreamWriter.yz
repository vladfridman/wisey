package wisey.io;

import wisey.lang.NString;

/**
 * Writes to a text stream. 
 *
 * Create an instance of this object by calling one of create static methods
 * <br/>
 * Example:
 * <pre>
 * // Create text stream to a file
 * CTextStreamWriter* stream = CTextStreamWriter.open(NString.createFromString("test.txt"));
 *
 * // write a line to a file
 * print(stream, "This is a test\n");
 *
 * // close the stream
 * stream.close();
 * </pre>
 */
controller CTextStreamWriter {

  /**
   * File handle pointer pointing to the native stream. 
   *
   * You don't need to initialize this when instantiating using a static method.
   */
  receive ::llvm::struct::__sFILE::pointer mStream;

  /**
   * Create an instance of the CTextStreamWriter to write to the the given file
   */
  public static CTextStreamWriter* open(NString fileName) throws MFileCouldNotOpenException {
    ::llvm::struct::__sFILE::pointer stream = ::llvm::function::fopen(fileName.getContent(), "w");
    if (stream == null) {
      throw build(MFileCouldNotOpenException).withFileName(fileName.toModel()).onHeap();
    }
    return inject(CTextStreamWriter).withStream(stream).onHeap();
  }

  /**
   * Create an instance of the CTextStreamWriter to write to the standard output
   */
  public static CTextStreamWriter* openSystemOut() {
    return inject(CTextStreamWriter).withStream(::llvm::global::wStdOut).onHeap();    
  }

  /**
   * Create an instance of the CTextStreamWriter to write to the error output
   */
  public static CTextStreamWriter* openSystemErr() {
    return inject(CTextStreamWriter).withStream(::llvm::global::wStdErr).onHeap();    
  }

  /**
   * Close the stream
   */
  public void close() throws MStreamClosedException, MStreamCouldNotCloseException {
    if (mStream == null) {
      throw build(MStreamClosedException).onHeap();
    }

    int result = ::llvm::function::fclose(mStream);

    if (result != 0) {
      throw build(MStreamCouldNotCloseException).onHeap();
    }
  }

  /**
   * Get the pointer to the stream
   */
  public ::llvm::struct::__sFILE::pointer getStream() {
    if (mStream == null) {
      throw build(MStreamClosedException).onHeap();
    }
    return mStream;
  }
}