package wisey.io;

import wisey.lang.CString;

/**
 * Reads lines from a text stream
 */
controller CTextStreamReader {

  public constant int BUFFER_SIZE = 256;

  receive ::llvm::struct::__sFILE::pointer mStream;

  /**
   * Create an instance of the CTextStreamReader to read the given file
   */
  public static CTextStreamReader* open(CString fileName) throws MFileCouldNotOpenException {
    ::llvm::struct::__sFILE::pointer stream = ::llvm::function::fopen(fileName.getContent(), "r");
    if (stream == null) {
      throw build(MFileCouldNotOpenException).withFileName(fileName.toModel()).onHeap();
    }
    return inject(CTextStreamReader).withStream(stream).onHeap();
  }

  /**
   * Create an instance of the CTextStreamReader to read standard input
   */
  public static CTextStreamReader* openSystemIn() {
    return inject(CTextStreamReader).withStream(::llvm::global::__stdinp).onHeap();    
  }

  /**
   * Read one line up to the new line character or end of file
   * 
   * New line character will not be part of the returned string
   */
  public CString* readLine() throws MStreamClosedException {
    if (mStream == null) {
      throw build(MStreamClosedException).onHeap();
    }

    char[]* buffer = new char[BUFFER_SIZE];
    CString* line = CString.create();
    ::llvm::i8::pointer result = null;
    long length = 0;
    long bufferSize = buffer.getSize();

    do {
      result = ::llvm::function::fgets(buffer, BUFFER_SIZE, mStream);
      if (result == null) {
        break;
      }
      
      length = ::llvm::function::strlen(buffer);
      if (buffer[length - 1] == '\n') {
        buffer[length - 1] = '\0';
      }
      line.appendCharArray(buffer);
    } while (length > 0 && buffer[length - 1] != '\0');

    if (!line.getLength()) {
      return null;
    }

    return line;
  }

  /**
   * Close the text reading stream
   */
  public void close() throws MStreamClosedException, MStreamCouldNotCloseException {
    if (mStream == null) {
      throw build(MStreamClosedException).onHeap();
    }

    int result = ::llvm::function::fclose(mStream);

    if (result != 0) {
      throw build(MStreamCouldNotCloseException).onHeap();
    }
  }
}