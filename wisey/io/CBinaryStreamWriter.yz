package wisey.io;

import wisey.lang.NString;

/**
 * Writes array of bytes to a stream. Instantiate this object using one of the static methods.
 * <br/>
 * Example:
 * <pre>
 * // Create binary stream to standard out
 * CBinaryStreamWriter* stream = CBinaryStreamWriter.openSystemOut();
 *
 * // write byte[] array into the stream 
 * stream.writeImmutable(array);
 *
 * // close the stream
 * stream.close();
 * </pre>
 */
controller CBinaryStreamWriter {

  /**
   * Do not need to initialize this when instantiating using a static method
   */
  receive ::llvm::struct::__sFILE::pointer mStream;

  /**
   * Create an instance of the CBinaryStreamWriter to write binary data to the the given file
   */
  public static CBinaryStreamWriter* open(NString fileName) throws MFileCouldNotOpenException {
    ::llvm::struct::__sFILE::pointer stream = ::llvm::function::fopen(fileName.getContent(), "wb");
    if (stream == null) {
      throw build(MFileCouldNotOpenException).withFileName(fileName.toModel()).onHeap();
    }
    return inject(CBinaryStreamWriter).withStream(stream).onHeap();
  }

  /**
   * Create an instance of the CBinaryStreamWriter to write binary data to the standard output
   */
  public static CBinaryStreamWriter* openSystemOut() {
    return inject(CBinaryStreamWriter).withStream(::llvm::global::wStdOut).onHeap();    
  }

  /**
   * Create an instance of the CBinaryStreamWriter to write binary data to the error output
   */
  public static CBinaryStreamWriter* openSystemErr() {
    return inject(CBinaryStreamWriter).withStream(::llvm::global::wStdErr).onHeap();    
  }

  /**
   * Write byte array into a stream
   */
  public void write(byte[] array) throws MStreamClosedException {
    if (!mStream) {
      throw build(MStreamClosedException).onHeap();
    }

    ::llvm::function::fwrite(array, 1l, array.getSize(), mStream);
  }

 
  /**
   * Write an immutable byte array into a stream
   */
  public void writeImmutable(immutable byte[] array) throws MStreamClosedException {
    if (!mStream) {
      throw build(MStreamClosedException).onHeap();
    }

    ::llvm::function::fwrite(array, 1l, array.getSize(), mStream);
  }
 
  /**
   * Closes the binary write stream
   */
  public void close() throws MStreamClosedException, MStreamCouldNotCloseException {
    if (mStream == null) {
      throw build(MStreamClosedException).onHeap();
    }

    int result = ::llvm::function::fclose(mStream);

    if (result != 0) {
      throw build(MStreamCouldNotCloseException).onHeap();
    }
  }
}