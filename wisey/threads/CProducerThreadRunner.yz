package wisey.threads;

import wisey.lang.CCallStack;

/**
 * Uses pthread library to enable thread functionality, producer thread produces many results
 */
controller CProducerThreadRunner implements IThreadRunner {
  state ::llvm::struct::_opaque_pthread_t::pointer mMyNativeThread;
  state boolean mIsCancelled;
  state boolean mIsFinished;
  state ::wisey::model*[]* mResults;
  state int mSize;
  state int mIndexStart;
  state int mIndexEnd;

  /**
   * Creates new posix thread that calls runBridge function that in turn calls thread's run method
   */
  public void createThread(IThread producerThread, int size) {
    if (mMyNativeThread) {
      return;
    }
    mSize = size + 1;
    mResults = new ::wisey::model*[mSize];
    ::llvm::function::pthread_create(::llvm::reference(mMyNativeThread), 
                                     (::llvm::struct::_opaque_pthread_attr_t::pointer) null, 
                                     IThreadRunner.runBridge, 
                                     (::llvm::i8::pointer) producerThread);
  }

  /**
   * Tells whether thread has started
   */
  public boolean isStarted() {
    return mMyNativeThread;
  }

  /**
   * Tells whether the thread has finished working and has the result
   */
  public boolean isFinished() {
    return mIsFinished;
  }

  /**
   * Tells whether the thread has been cancelled
   */
  public boolean isCancelled() {
    return mIsCancelled;
  }

  /**
   * Cancel execution of the thread
   */
  public void cancelThread() {
    if (!mMyNativeThread || mIsCancelled || mIsFinished) {
      return;
    }
    ::llvm::function::pthread_cancel(mMyNativeThread);
    mIsCancelled = true;
  }

  /**
   * Reset the thread so it can be restarted
   */
  public void resetThread() {
    if (!mIsCancelled && !mIsFinished) {
      return;
    }
    if (mMyNativeThread != null) {
      ::llvm::function::pthread_cancel(mMyNativeThread);
    }
    mIsFinished = false;
    mIsCancelled = false;
    mResults = null;
    mIndexStart = 0;
    mIndexEnd = 0;
    mMyNativeThread = null;
  }

  /**
   * Tells whether there are any results available
   */
  public boolean hasResult() {
    return !mIsCancelled && mIndexStart != mIndexEnd;
  }

  /**
   * Returns one of the results from the list of results in FIFO order
   */
  public ::wisey::model* consumeResult() {
    if (mIsCancelled || mIndexStart == mIndexEnd) {
      return null;
    }
    int previousIndexStart = mIndexStart;
    mIndexStart = (mIndexStart + 1) % mSize;
    return mResults[previousIndexStart];
  }

  /**
   * Adds result to the list of results if there is space
   */
  public ::wisey::model* addResult(::wisey::model* result) {
    int nextIndexEnd = (mIndexEnd + 1) % mSize;
    if (mIndexStart == nextIndexEnd) {
      return result;
    }
    mResults[mIndexEnd] = result;
    mIndexEnd = nextIndexEnd;
    return null;
  }

  /**
   * Exits thread
   */
  public void exitThread() {
    mIsFinished = true;
    ::llvm::function::pthread_exit((::llvm::i8::pointer) null);
  }

  /**
   * Tells whether there is any room available for results
   */
  public boolean hasRoom() {
    return (mIndexEnd + 1) % mSize != mIndexStart;
  }

}