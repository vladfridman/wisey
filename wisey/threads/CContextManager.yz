package wisey.threads;

import wisey.data.CReferenceMap;
import wisey.data.COwnerMap;

/**
 * Manages instances of context injected objects
 */
controller CContextManager {
  inject immediate CReferenceMap* mContextNameToContextMap;
  inject immediate COwnerMap* mContextToObjectMap;

  /**
   * Find the existing instance of the object with the given name in the given context
   */
  public ::wisey::object getInstance(string contextName, string objectName) {
    ::wisey::object context = mContextNameToContextMap.get(contextName);
    if (context == null) {
      throw build(MContextNonExistantException).withContextName(contextName).onHeap();
    }
    COwnerMap objectNameToObjectMap = mContextToObjectMap.get(context);
    return objectNameToObjectMap.get(objectName);
  }

  /**
   * Set current context to the given object value
   */
  public void setContext(string contextName, ::wisey::object context) {
    mContextNameToContextMap.put(contextName, context);
    CReferenceMap objectNameToObjectMap = mContextToObjectMap.get(context);
    if (objectNameToObjectMap == null) {
      mContextToObjectMap.put(context, COwnerMap.create());
    }
  }

  /**
   * Removes all objects stored in the given context
   */
  public void eraseContext(string contextName) {
    ::wisey::object context = mContextNameToContextMap.get(contextName);
    if (context == null) {
      return;
    }
    mContextToObjectMap.erase(context);
    mContextNameToContextMap.erase(contextName);
  }

  /**
   * Set injected object instance in the given context
   */
  public void setInstance(string contextName, string objectName, ::wisey::object* instance) {
    ::wisey::object context = mContextNameToContextMap.get(contextName);
    if (context == null) {
      throw build(MContextNonExistantException).withContextName(contextName).onHeap();
    }
    COwnerMap objectNameToObjectMap = mContextToObjectMap.get(context);
    objectNameToObjectMap.put(objectName, instance);
  }
}