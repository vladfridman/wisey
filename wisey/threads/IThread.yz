package wisey.threads;

/**
 * Represents a thread of execution. All thread objects must implement this interface.
 */
interface IThread {

  /**
   * The work of this thread is done in this method
   */
  void run() throws MThreadBoundaryException;

  /**
   * Sends a message to the calling thread. 
   *
   * Returns null if the message was sent successfully.
   * Returns the sent message if it could not be sent.
   */
  ::wisey::model* send(::wisey::model* message) throws MThreadBoundaryException;

  /**
   * Exits thread with null as a result. This is called from within the thread
   */
  void exit() throws MThreadBoundaryException;

  /**
   * Returns the call stack for this thread
   */
  CCallStack getCallStack() throws MThreadBoundaryException;

  /**
   * Return context manager that keeps instances of context injected controllers
   */
  CContextManager getContextManager() throws MThreadBoundaryException;

  /**
   * Method for yielding the CPU to the next thread
   */
  public static void yield() {
    ::llvm::function::sched_yield();
  }

  /**
   * Method for putting the current thread to sleep
   */
  public static void sleep(int seconds) {
    ::llvm::function::sleep(seconds);
  }

  /**
   * Method for putting the current thread to sleep in microseconds
   */
  public static void usleep(int microseconds) {
    ::llvm::function::usleep(microseconds);
  }

  /**
   * Throws an exception when passed object is not the current thread
   */
  public static void insideThreadGuard(IThread object) throws MThreadBoundaryException {
    if (object != thread) {
      throw build(MThreadBoundaryException).withIsMethodInternal(true).onHeap();
    }
  }

  /**
   * Throws an exception when passed object is the same as the current thread
   */
  public static void outsideThreadGuard(IThread object) throws MThreadBoundaryException {
    if (object == thread) {
      throw build(MThreadBoundaryException).withIsMethodInternal(false).onHeap();
    }
  }
}
