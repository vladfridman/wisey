package wisey.threads;

import wisey.lang.IException;
import wisey.lang.MSystem;

/**
 * Keeps track of the method call stack and can print out a strack trace
 */
controller CCallStack {
  public constant int CALL_STACK_SIZE = 1024;

  inject immediate string[CALL_STACK_SIZE]* mCallInfo;
  inject immediate int[CALL_STACK_SIZE]* mLineNumbers;
  state int mIndex;

  /**
   * Pushes a new method on the call stack
   */
  public void pushStack(string callInfo, int lineNumber) {
    if (mIndex >= CALL_STACK_SIZE) {
      throw builder(MStackOverflowException).build();
    }
    mCallInfo[mIndex] = callInfo;
    mLineNumbers[mIndex] = lineNumber;
    mIndex++;
  }

  /**
   * Pops the method call stack
   */
  public void popStack() {
    if (mIndex == 0) {
      return;
    }

    mIndex--;
  }

  /**
   * Dumps the call stack to standart output
   */
  public void dumpStack() {
    for (int i = mIndex - 1; i >= 0; i--) {
      printout(mCallInfo[i] + ":" + mLineNumbers[i] + ")\n");
    }
  }

  /**
   * Print a stack trace for an exception.
   *
   * The last element in the stack trace is the call to this method and is not printed
   */
  public void reportException(IException exception) {
    printerr("Unhandled exception " + MSystem.getOriginalObjectTypeName(exception) + "\n");
    for (int i = mIndex - 1; i >= 0; i--) {
      printerr("  at " + mCallInfo[i] + ":" + mLineNumbers[i] + ")\n");
    }
  }
}
