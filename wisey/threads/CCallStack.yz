package wisey.threads;

import wisey.lang.IException;
import wisey.lang.MSystem;
import wisey.lang.NString;

/**
 * Keeps track of the method call stack and can print out a strack trace
 */
controller CCallStack {
  /**
   * Call stack size
   */
  public constant int CALL_STACK_SIZE = 1024;

  inject immediate string[CALL_STACK_SIZE]* mCallInfo;
  inject immediate int[CALL_STACK_SIZE]* mLineNumbers;
  state int mIndex;

  /**
   * Throws stack overflo exception
   */
  public static void throwStackOverflowException() {
    throw build(MStackOverflowException).onHeap();
  }

  /**
   * Dumps the call stack to standart output
   */
  public void dumpStack() {
    for (int i = mIndex - 1; i >= 0; i--) {
      printout(mCallInfo[i] + ":" + mLineNumbers[i] + ")\n");
    }
  }

  /**
   * Print a stack trace for an exception.
   *
   * The last element in the stack trace is the call to this method and is not printed
   */
  public NString* reportException(IException exception) {
    NString* message = NString.create();
    message.appendString("Unhandled exception ");
    message.appendString(MSystem.getOriginalObjectTypeName(exception));
    message.appendString("\n");
    for (int i = mIndex - 1; i >= 0; i--) {
      message.appendString("  at ");
      message.appendString(mCallInfo[i]);
      message.appendString(":");
      message.appendNString(NString.createFromInt(mLineNumbers[i]));
      message.appendString(")\n");
    }
    return message;
  }
}
