package wisey.threads;

import wisey.lang.CMemoryPool;

/**
 * A thread that runs in a pool of threads. Do not instantiate it directly, use CThreadPool.
 * <br/>
 * In its run method it constantly polls the thread pool for a new worker and when it finds it
 * it runs the work() method of the returned worker. The worker is responsible for sending 
 * a result back if there are any by calling thread.send(::wisey::model*) method. Once worker is 
 * finished the thread waits for a new worker in the thread pool. 
 * The thread never ends until it is canceled through cancel() method.
 * <br/>
 * An instance of this object is returned when you call 'thread' from within the pool thread.
 */
controller CPoolThread implements IThread {
  inject immediate CPoolThreadRunner* mPoolThreadRunner;
  inject immediate CCallStack* mCallStack;
  inject immediate CContextManager* mContextManager;
  state CThreadPool mThreadPool;

  /**
   * Starts the given thread with the given worker implementation
   */
  public void start(CThreadPool threadPool) throws MThreadBoundaryException {
    outsideThreadGuard(this);
    mThreadPool = threadPool;
    mPoolThreadRunner.createThread(this);
  }

  /**
   * Cancel thread execution from antoher thread
   */
  public void cancel() throws MThreadBoundaryException {
    outsideThreadGuard(this);
    mPoolThreadRunner.cancelThread();
  }

  public void exit() throws MThreadBoundaryException override {
    insideThreadGuard(this);
    mPoolThreadRunner.exitThread();
  }

  public ::wisey::model* send(::wisey::model* message) throws MThreadBoundaryException override {
    insideThreadGuard(this);
    mThreadPool.addResult(message);
    return null;
  }

  public CCallStack getCallStack() throws MThreadBoundaryException override {
    insideThreadGuard(this);
    return mCallStack;
  }

  public CContextManager getContextManager() throws MThreadBoundaryException override {
    insideThreadGuard(this);
    return mContextManager;    
  }

  public void run() throws MThreadBoundaryException override {
    insideThreadGuard(this);
    mContextManager.setContext(IThread.getTypeName(), thread);
    while (true) {
      IWorker* worker = mThreadPool.getWorker();
      worker.work();
    }
  }

  private controller CPoolThreadRunner implements IThreadRunner {
    state ::llvm::struct::_opaque_pthread_t::pointer mMyNativeThread;

    public void createThread(IThread poolThread) {
      if (mMyNativeThread) {
        return;
      }
      ::llvm::function::pthread_create(::llvm::reference(mMyNativeThread), 
                                       (::llvm::struct::_opaque_pthread_attr_t::pointer) null, 
                                       IThreadRunner.runBridge, 
                                       (::llvm::i8::pointer) poolThread);
    }

    public boolean isStarted() {
      return mMyNativeThread;
    }

    public void cancelThread() {
      ::llvm::function::pthread_cancel(mMyNativeThread);
    }

    public void exitThread() {
      ::llvm::function::pthread_exit((::llvm::i8::pointer) null);
    }
  }
}