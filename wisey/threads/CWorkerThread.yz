package wisey.threads;

/**
 * Default implementation of the worker thread.
 *
 * A worker thread can be in one of 4 states: Not started, Started, Cancelled, Finished
 * Before thread can be started again after it has been cancelled or finished it has to be reset
 */
controller CWorkerThread implements IThread {
  inject CWorkerThreadRunner* mWorkerThreadRunner;
  inject CCallStack* mCallStack;
  inject CContextManager* mContextManager;
  state IWorker* mWorker;

  /**
   * Starts the given thread with the given worker implementation
   *
   * Calling this method after the thread has already been started has no effect
   * This is called from an outside thread through a reveal method
   */
  public void start(::wisey::model* worker) throws MThreadBoundaryException {
    outsideThreadGuard(this);
    mWorker = worker;
    mWorkerThreadRunner.createThread(this);
  }

  /**
   * Tells whether the thread has been started
   */
  public boolean isStarted() throws MThreadBoundaryException {
    outsideThreadGuard(this);
    return mWorkerThreadRunner.isStarted();
  }

  /**
   * Tells whether the thread has finished execution and has the result
   */
  public boolean isFinished() throws MThreadBoundaryException {
    outsideThreadGuard(this);
    return mWorkerThreadRunner.isFinished();
  }

  /**
   * Tells whether the thread execution has been cancelled
   */
  public boolean isCancelled() throws MThreadBoundaryException {
    outsideThreadGuard(this);
    return mWorkerThreadRunner.isCancelled();
  }

  /**
   * Waits for the thread to finish and returns back the result
   * If the thread has been canceled or finished or not started then returns result immediately
   */
  public ::wisey::model* awaitResult() throws MThreadBoundaryException {
    outsideThreadGuard(this);
    mWorkerThreadRunner.joinThread();

    return mWorkerThreadRunner.getResult();
  }

  /**
   * Cancel thread execution from antoher thread
   * If the thread has been already canceled or finished or not started then this has no effect
   */
  public void cancel() throws MThreadBoundaryException {
    outsideThreadGuard(this);
    mWorkerThreadRunner.cancelThread();
  }

  /**
   * Reset the thread to its initial state so it can be started again
   * Calling this when the thread is in Started or Not Started state has no effect
   */
  public void reset() throws MThreadBoundaryException {
    outsideThreadGuard(this);
    mWorkerThreadRunner.resetThread();
  }

  public void exit() throws MThreadBoundaryException override {
    insideThreadGuard(this);
    mWorkerThreadRunner.exitThread();
  }

  public ::wisey::model* send(::wisey::model* message) throws MThreadBoundaryException override {
    insideThreadGuard(this);
    mWorkerThreadRunner.setResult(message);
    return null;
  }

  public CCallStack getCallStack() throws MThreadBoundaryException override {
    insideThreadGuard(this);
    return mCallStack;
  }

  public CContextManager getContextManager() throws MThreadBoundaryException override {
    insideThreadGuard(this);
    return mContextManager;    
  }

  public void run() throws MThreadBoundaryException override {
    insideThreadGuard(this);
    mContextManager.setContext(IThread.getTypeName(), thread);
    mWorker.work();
    mContextManager.eraseContext(IThread.getTypeName());
  }
}