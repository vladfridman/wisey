package wisey.threads;

/**
 * Default implementation of the producer thread.
 *
 * A producer thread can be in one of 4 states: Not started, Started, Cancelled, Finished
 * Before thread can be started again after it has been cancelled or finished it has to be reset
 */
controller CProducerThread implements IThread {
  inject CProducerThreadRunner* mProducerThreadRunner;
  inject CCallStack* mCallStack;
  state IProducer* mProducer;

  /**
   * Starts the given thread with the results buffer of the given size and producer implementation
   *
   * Calling this method after the thread has already been started has no effect
   * This is called from an outside thread through a reveal method
   */
  public void start(::wisey::model* producer, int size) throws MThreadBoundaryException {
    outsideThreadGuard(this);
    mProducer = producer;
    mProducerThreadRunner.createThread(this, size);
  }

  /**
   * Tells whether the thread has been started
   */
  public boolean isStarted() throws MThreadBoundaryException {
    outsideThreadGuard(this);
    return mProducerThreadRunner.isStarted();
  }

  /**
   * Tells whether the thread has finished execution and has the result
   */
  public boolean isFinished() throws MThreadBoundaryException {
    outsideThreadGuard(this);
    return mProducerThreadRunner.isFinished();
  }

  /**
   * Tells whether the thread execution has been cancelled
   */
  public boolean isCancelled() throws MThreadBoundaryException {
    outsideThreadGuard(this);
    return mProducerThreadRunner.isCancelled();
  }

  /**
   * Cancel thread execution from antoher thread
   * If the thread has been already canceled or finished or not started then this has no effect
   */
  public void cancel() throws MThreadBoundaryException {
    outsideThreadGuard(this);
    mProducerThreadRunner.cancelThread();
  }

  /**
   * Reset the thread to its initial state so it can be started again
   * Calling this when the thread is in Started or Not Started state has no effect
   */
  public void reset() throws MThreadBoundaryException {
    outsideThreadGuard(this);
    mProducerThreadRunner.resetThread();
  }

  /**
   * Tells whether the thread has a result in its buffer that can be consumed
   * If the thread is in not started or cancelled state it returns false
   */
  public boolean hasResult() throws MThreadBoundaryException {
    outsideThreadGuard(this);
    return mProducerThreadRunner.hasResult();
  }

  /**
   * Consumes the one result object from the result buffer
   * If the thread is Not started or Cancelled state returns null
   */
  public ::wisey::model* consume() throws MThreadBoundaryException {
    outsideThreadGuard(this);
    return mProducerThreadRunner.consumeResult();
  }

  public void exit() throws MThreadBoundaryException override {
    insideThreadGuard(this);
    mProducerThreadRunner.exitThread();
  }

  public ::wisey::model* send(::wisey::model* message) throws MThreadBoundaryException override {
    insideThreadGuard(this);
    return mProducerThreadRunner.addResult(message);
  }

  public CCallStack getCallStack() throws MThreadBoundaryException override {
    insideThreadGuard(this);
    return mCallStack;
  }

  public void run() throws MThreadBoundaryException override {
    insideThreadGuard(this);
    mProducer.produce();
  }
}
