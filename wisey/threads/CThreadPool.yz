package wisey.threads;

/**
 * Simple implementation of a thread pool.
 *
 * Here is how to use it:
 *
 * <pre>
 * controller CYourController {
 *   inject CThreadPool* mThreadPool.withPoolSize(wisey.lang.MSystem.getProcessorCount());
 *
 *   public void yourMethod() {
 *     // submit your workers 
 *     mThreadPool.submit(build(MyWorker1).onHeap());
 *     mThreadPool.submit(build(MyWorker2).onHeap());
 *     ...
 *     // start threads on the thread pool, can also be called before workers are submitted
 *     mThreadPool.start();
 *     MyModel* result = mThreadPool.getResult();
 *     // do something with the results
 *     ...
 *     // once all results are received stop the thread pool
 *     mThreadPool.waitAndStop();
 *     // you can then reuse the CThreadPool controller by calling start() method again 
 *     // but this will create a new set of pool threads
 *   }
 * }
 * </pre>
 */
controller CThreadPool {

  /**
   * Thread pool size
   */
  receive long mPoolSize;

  inject immediate CPoolThread*[mPoolSize]* mThreads;
  inject immediate CConcurrentModelOwnerQueue* mWorkers;
  inject immediate CConcurrentModelOwnerQueue* mResults;

  /**
   * Submit a model that implements a worker interface on the queue of workers
   */
  public void submit(::wisey::model* worker) {
    IWorker* workerModel = worker;
    mWorkers.push(workerModel);
  }

  /**
   * Start all threads on the thread pool, each thread will poll the thread pool for workers to run
   */
  public void start() {
    for (int i = 0; i < mPoolSize; i++) {
      mThreads[i] = inject(CPoolThread).onHeap();
      mThreads[i].start(this);
    }
  }

  /**
   * Wait for all pool threads to finish and stop the pool
   */
  public void waitAndStop() {
    for (int i = 0; i < mThreads.getSize(); i++) {
      mWorkers.push(build(MEnder).onHeap());
    }
    for (int i = 0; i < mPoolSize; i++) {
      if (mThreads[i]) {
        mThreads[i].join();
      }
    }
  }

  /**
   * Get the next result from a queue of results.
   *
   * This blocks until result becomes available
   */
  public ::wisey::model* getResult() {
     return mResults.pop();
  }

  /**
   * This returns a worker from a worker queue or blocks the current thread until a worker appears
   *
   * This is called by individual pool threads and should not be called directly
   */
  public IWorker* getWorker() {
    return (IWorker*) mWorkers.pop();
  }

  /**
   * This adds a new result to the list of results.
   *
   * This is called by individual pool threads and should not be called directly
   */
  public void addResult(::wisey::model* result) {
    mResults.push(result);
  }

  /**
   * Ends execution of a CPoolThread
   */
  private model MEnder implements IWorker {
    public void work() override {
      thread.exit();
    }
  }

  /**
   * Concurrent queue implementation where each element is a model owner reference.
   *
   * This controller used in wisey.threads.CThreadPool implemenation to keep a queue of workers.
   */
  private controller CConcurrentModelOwnerQueue {

    inject immediate ::llvm::i8::pointer* mQueue.withConstructor(create).withDestructor(destroy);

    /**
     * Push a model owner on a queue
     */
    public void push(::wisey::model* object) {
      ::llvm::function::concurrent_model_owner_queue_push(mQueue, object);
    }

    /**
     * Pop a model owner from a queue, this blocks the thread if the queue is empty until it is not
     */
    public ::wisey::model* pop() {
      return ::llvm::function::concurrent_model_owner_queue_pop(mQueue);
    }

    private ::llvm::function ::llvm::i8::pointer create() {
      return ::llvm::function::concurrent_model_owner_queue_create();
    }

    private ::llvm::function ::llvm::void destroy(::llvm::i8::pointer queue) {
      ::llvm::function::concurrent_model_owner_queue_destroy(queue);
    }
  }
}