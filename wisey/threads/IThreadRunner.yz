package wisey.threads;

import wisey.data.MMapEntryDoesNotExistException;
import wisey.io.MFileAccessException;
import wisey.io.MFileCloseException;
import wisey.io.MFileCouldNotCloseException;
import wisey.io.MFileCouldNotOpenException;
import wisey.io.MFileOpenException;
import wisey.lang.MArrayIndexOutOfBoundsException;
import wisey.lang.MCastException;
import wisey.lang.MInterfaceNotBoundException;
import wisey.lang.MMemoryPoolNonEmpty;
import wisey.lang.MNullPointerException;
import wisey.lang.MReferenceCountException;

/**
 * Represents a thread runner object that calls pthread functions to enable thread functionality
 */
interface IThreadRunner {

  /**
   * This native function bridges run() method of the thread object with the i8* (i8*)* function 
   * parameter of the posix threads interface.
   */
  public ::llvm::function ::llvm::i8::pointer runBridge(::llvm::i8::pointer argument) {
    IThread thread = (IThread) argument;
    CCallStack callstack = null;

    try {
      callstack = thread.getCallStack();
      thread.run();
      thread.exit();
    } catch (MNullPointerException* exception) {
      exception.report();
    } catch (MReferenceCountException* exception) {
      exception.report();
    } catch (MCastException* exception) {
      exception.report();
    } catch (MArrayIndexOutOfBoundsException* exception) {
      exception.report();
    } catch (MStackOverflowException* exception) {
      exception.report();
    } catch (MThreadBoundaryException* exception) {
      exception.report();
    } catch (MFileOpenException* exception) {
      exception.report();
    } catch (MFileCloseException* exception) {
      exception.report();
    } catch (MFileAccessException* exception) {
      exception.report();
    } catch (MFileCouldNotOpenException* exception) {
      exception.report();
    } catch (MFileCouldNotCloseException* exception) {
      exception.report();
    } catch (MContextNonExistantException* exception) {
      exception.report();
    } catch (MInterfaceNotBoundException* exception) {
      exception.report();
    } catch (MMemoryPoolNonEmpty* exception) {
      exception.report();
    } catch (MMapEntryDoesNotExistException* exception) {
      exception.report();
    }

    return argument;
  }
}