/* llvm Structs */

external ::llvm::struct __darwin_pthread_handler_rec {
  ::llvm::void (::llvm::i8::pointer)::pointer,
  ::llvm::i8::pointer,
  ::llvm::struct::__darwin_pthread_handler_rec::pointer,
}

external ::llvm::struct _opaque_pthread_attr_t {
  ::llvm::i64,
  ::llvm::array(::llvm::i8, 56),
}

external ::llvm::struct _opaque_pthread_t {
  ::llvm::i64,
  ::llvm::struct::__darwin_pthread_handler_rec::pointer,
  ::llvm::array(::llvm::i8, 8176),
}

/* Interfaces */

external interface wisey.lang.IException {

  string getName();
}

external interface wisey.lang.IProgram {

  int run() throws wisey.lang.MReferenceCountException, wisey.lang.MNullPointerException;
}

external interface wisey.lang.IThread {

  wisey.lang.CCallStack getCallStack();
  void send(
    ::llvm::i8::pointer* message);
  static void sleep(
    int seconds);
}

external interface wisey.lang.IWorkerThread
  extends
    wisey.lang.IThread {

  void start();
  boolean hasStarted();
  boolean hasResult();
  boolean wasCancelled();
  ::llvm::i8::pointer awaitResult();
  void cancel();
  void work();
}

/* Models */

external model wisey.lang.MArrayIndexOutOfBoundsException
  implements
    wisey.lang.IException {

  fixed long mArraySize;
  fixed long mIndex;

  string getName();
  long getArraySize();
  long getIndex();
}

external model wisey.lang.MCastException
  implements
    wisey.lang.IException {

  fixed string mFromType;
  fixed string mToType;

  string getName();
  string getFromType();
  string getToType();
}

external model wisey.lang.MNullPointerException
  implements
    wisey.lang.IException {

  string getName();
}

external model wisey.lang.MProgramResult {

  fixed int mResult;

  int getResult();
}

external model wisey.lang.MReferenceCountException
  implements
    wisey.lang.IException {

  fixed long mReferenceCount;

  string getName();
  long getReferenceCount();
}

external model wisey.lang.MStackOverflowException
  implements
    wisey.lang.IException {

  string getName();
}

/* Controllers */

external controller wisey.lang.CCallStack {

  public constant int CALL_STACK_SIZE = 1024;

  inject string[CALL_STACK_SIZE]* mCallStackObjectNames;
  inject string[CALL_STACK_SIZE]* mCallStackMethodNames;
  inject string[CALL_STACK_SIZE]* mCallStackFileNames;
  inject int[CALL_STACK_SIZE]* mCallStackLineNumbers;
  state int mCallIStackIndex;

  void pushStack(
    string objectName,
    string methodName,
    string fileName,
    int lineNumber);
  void popStack();
  void dumpStack();
  void reportException(
    wisey.lang.IException exception);
}

external controller wisey.lang.CProgramRunner {

  inject wisey.lang.IProgram* mProgram;

  wisey.lang.MProgramResult* run();
}

external controller wisey.lang.CWorkerThreadRunner {

  state ::llvm::struct::_opaque_pthread_t::pointer mMyNativeThread;
  state boolean mIsCanceled;

  void createThread(
    wisey.lang.IWorkerThread workerThread);
  void joinThread();
  void exitThread();
  void cancelThread();
  boolean hasStarted();
  boolean wasCancelled();
}

/* Nodes */

/* Threads */

external thread wisey.lang.TMainThread
  implements
    wisey.lang.IWorkerThread {

  inject wisey.lang.CWorkerThreadRunner* mWorkerThreadRunner;
  inject wisey.lang.CProgramRunner* mProgramRunner;
  inject wisey.lang.CCallStack* mCallStack;
  state wisey.lang.MProgramResult* mProgramResult;

  void start();
  boolean hasStarted();
  boolean hasResult();
  boolean wasCancelled();
  ::llvm::i8::pointer awaitResult();
  void cancel();
  void work();
  void send(
    ::llvm::i8::pointer* programResult);
  wisey.lang.CCallStack getCallStack();
}

/* Bindings */

