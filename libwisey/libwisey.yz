/* Interfaces */

external interface wisey.lang.IException {

  string getName();
}

external interface wisey.lang.IProgram {

  int run() throws wisey.lang.MReferenceCountException, wisey.lang.MNullPointerException;
  static void terminate(
    int exitCode);
}

external interface wisey.lang.threads.IProducer {

  void produce();
}

external interface wisey.lang.threads.IThread {

  void run();
  ::wisey::model* send(
    ::wisey::model* message);
  void exit();
  wisey.lang.CCallStack getCallStack();
  static void sleep(
    int seconds);
  static void insideThreadGuard(
    wisey.lang.threads.IThread object) throws wisey.lang.threads.MThreadBoundaryException;
  static void outsideThreadGuard(
    wisey.lang.threads.IThread object) throws wisey.lang.threads.MThreadBoundaryException;
}

external interface wisey.lang.threads.IThreadRunner {
}

external interface wisey.lang.threads.IWorker {

  void work();
}

/* Models */

external model wisey.lang.MArrayIndexOutOfBoundsException
  implements
    wisey.lang.IException {

  fixed long mArraySize;
  fixed long mIndex;

  string getName() override;
  long getArraySize();
  long getIndex();
}

external model wisey.lang.MCastException
  implements
    wisey.lang.IException {

  fixed string mFromType;
  fixed string mToType;

  string getName() override;
  string getFromType();
  string getToType();
}

external model wisey.lang.MMainThreadWorker
  implements
    wisey.lang.threads.IWorker {

  fixed wisey.lang.IProgram* mProgram;

  static int startMainThread(
    wisey.lang.IProgram* program);
  void work() override;
}

external model wisey.lang.MMainThreadWorker.MProgramResult {

  fixed int mResult;

  int getResult();
}

external model wisey.lang.MNullPointerException
  implements
    wisey.lang.IException {

  string getName() override;
}

external model wisey.lang.MReferenceCountException
  implements
    wisey.lang.IException {

  fixed long mReferenceCount;

  string getName() override;
  long getReferenceCount();
}

external model wisey.lang.MStackOverflowException
  implements
    wisey.lang.IException {

  string getName() override;
}

external model wisey.lang.threads.MThreadBoundaryException
  implements
    wisey.lang.IException {

  fixed boolean mIsMethodInternal;

  string getName() override;
  boolean isMethodInternal();
}

/* Controllers */

external controller wisey.lang.CCallStack {

  public constant int CALL_STACK_SIZE = 1024;

  inject string[CALL_STACK_SIZE]* mCallStackObjectNames;
  inject string[CALL_STACK_SIZE]* mCallStackMethodNames;
  inject string[CALL_STACK_SIZE]* mCallStackFileNames;
  inject int[CALL_STACK_SIZE]* mCallStackLineNumbers;
  state int mCallIStackIndex;

  void pushStack(
    string objectName,
    string methodName,
    string fileName,
    int lineNumber);
  void setLine(
    int lineNumber);
  void popStack();
  void dumpStack();
  void reportException(
    wisey.lang.IException exception);
}

external controller wisey.lang.threads.CProducerThread
  implements
    wisey.lang.threads.IThread {

  inject wisey.lang.threads.CProducerThreadRunner* mProducerThreadRunner;
  inject wisey.lang.CCallStack* mCallStack;
  state wisey.lang.threads.IProducer* mProducer;

  void start(
    ::wisey::model* producer,
    int size);
  boolean isStarted();
  boolean isFinished();
  boolean isCancelled();
  void cancel();
  void reset();
  boolean hasResult();
  ::wisey::model* consume();
  void exit() override;
  ::wisey::model* send(
    ::wisey::model* message) override;
  wisey.lang.CCallStack getCallStack() override;
  void run() override;
}

external controller wisey.lang.threads.CProducerThreadRunner
  implements
    wisey.lang.threads.IThreadRunner {

  state ::llvm::struct::_opaque_pthread_t::pointer mMyNativeThread;
  state boolean mIsCancelled;
  state boolean mIsFinished;
  state ::wisey::model*[]* mResults;
  state int mSize;
  state int mIndexStart;
  state int mIndexEnd;

  void createThread(
    wisey.lang.threads.IThread producerThread,
    int size);
  boolean isStarted();
  boolean isFinished();
  boolean isCancelled();
  void cancelThread();
  void resetThread();
  boolean hasResult();
  ::wisey::model* consumeResult();
  ::wisey::model* addResult(
    ::wisey::model* result);
  void exitThread();
  boolean hasRoom();
}

external controller wisey.lang.threads.CWorkerThread
  implements
    wisey.lang.threads.IThread {

  inject wisey.lang.threads.CWorkerThreadRunner* mWorkerThreadRunner;
  inject wisey.lang.CCallStack* mCallStack;
  state wisey.lang.threads.IWorker* mWorker;

  void start(
    ::wisey::model* worker);
  boolean isStarted();
  boolean isFinished();
  boolean isCancelled();
  ::wisey::model* awaitResult();
  void cancel();
  void reset();
  void exit() override;
  ::wisey::model* send(
    ::wisey::model* message) override;
  wisey.lang.CCallStack getCallStack() override;
  void run() override;
}

external controller wisey.lang.threads.CWorkerThreadRunner
  implements
    wisey.lang.threads.IThreadRunner {

  state ::llvm::struct::_opaque_pthread_t::pointer mMyNativeThread;
  state boolean mIsCancelled;
  state boolean mIsFinished;
  state ::wisey::model* mResult;

  void createThread(
    wisey.lang.threads.IThread workerThread);
  boolean isStarted();
  boolean isFinished();
  boolean isCancelled();
  void joinThread();
  void cancelThread();
  void resetThread();
  void exitThread();
  void setResult(
    ::wisey::model* result);
  ::wisey::model* getResult();
}

/* Nodes */

/* Bindings */

/* llvm Structs */

external ::llvm::struct __darwin_pthread_handler_rec {
  ::llvm::void (::llvm::i8::pointer)::pointer,
  ::llvm::i8::pointer,
  ::llvm::struct::__darwin_pthread_handler_rec::pointer,
}

external ::llvm::struct __sFILE {
  ::llvm::i8::pointer,
  ::llvm::i32,
  ::llvm::i32,
  ::llvm::i16,
  ::llvm::i16,
  ::llvm::struct::__sbuf,
  ::llvm::i32,
  ::llvm::i8::pointer,
  ::llvm::i32 (::llvm::i8::pointer)::pointer,
  ::llvm::i32 (::llvm::i8::pointer, ::llvm::i8::pointer, ::llvm::i32)::pointer,
  ::llvm::i64 (::llvm::i8::pointer, ::llvm::i64, ::llvm::i32)::pointer,
  ::llvm::i32 (::llvm::i8::pointer, ::llvm::i8::pointer, ::llvm::i32)::pointer,
  ::llvm::struct::__sbuf,
  ::llvm::i8::pointer,
  ::llvm::i32,
  ::llvm::array(::llvm::i8, 3),
  ::llvm::array(::llvm::i8, 1),
  ::llvm::struct::__sbuf,
  ::llvm::i32,
  ::llvm::i64,
}

external ::llvm::struct __sbuf {
  ::llvm::i8::pointer,
  ::llvm::i32,
}

external ::llvm::struct _opaque_pthread_attr_t {
  ::llvm::i64,
  ::llvm::array(::llvm::i8, 56),
}

external ::llvm::struct _opaque_pthread_t {
  ::llvm::i64,
  ::llvm::struct::__darwin_pthread_handler_rec::pointer,
  ::llvm::array(::llvm::i8, 8176),
}

/* llvm Functions */

external ::llvm::function ::llvm::void __adjustReferenceCounter(::llvm::i8::pointer, ::llvm::i64);
external ::llvm::function ::llvm::void __adjustReferenceCounterForArray(::llvm::i8::pointer, ::llvm::i64);
external ::llvm::function ::llvm::void __adjustReferenceCounterForConcreteObjectSafely(::llvm::i8::pointer, ::llvm::i64);
external ::llvm::function ::llvm::void __adjustReferenceCounterForConcreteObjectUnsafely(::llvm::i8::pointer, ::llvm::i64);
external ::llvm::function ::llvm::void __adjustReferenceCounterForImmutableArray(::llvm::i8::pointer, ::llvm::i64);
external ::llvm::function ::llvm::i8::pointer __castObject(::llvm::i8::pointer, ::llvm::i8::pointer);
external ::llvm::function ::llvm::void __checkArrayIndexFunction(::llvm::i64, ::llvm::i64);
external ::llvm::function ::llvm::void __checkArrayNotReferenced(::llvm::i64::pointer, ::llvm::i64);
external ::llvm::function ::llvm::void __checkForNullAndThrow(::llvm::i8::pointer);
external ::llvm::function ::llvm::void __destroyNativeObjectFunction(::llvm::i8::pointer);
external ::llvm::function ::llvm::void __destroyObjectOwnerFunction(::llvm::i8::pointer);
external ::llvm::function ::llvm::void __destroyOwnerArrayFunction(::llvm::i64::pointer, ::llvm::i64, ::llvm::i1);
external ::llvm::function ::llvm::void __destroyPrimitiveArrayFunction(::llvm::i64::pointer, ::llvm::i64);
external ::llvm::function ::llvm::void __destroyReferenceArrayFunction(::llvm::i64::pointer, ::llvm::i64, ::llvm::i1);
external ::llvm::function ::llvm::i8::pointer __getOriginalObject(::llvm::i8::pointer);
external ::llvm::function ::llvm::i32 __instanceOf(::llvm::i8::pointer, ::llvm::i8::pointer);
external ::llvm::function ::llvm::void __throwReferenceCountException(::llvm::i64);

/* llvm Globals */

::llvm::struct::__sFILE::pointer __stderrp;
