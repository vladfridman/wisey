/* Interfaces */

external interface wisey.lang.IException {

  string getName();
}

external interface wisey.lang.IProgram {

  int run(
    immutable string[] arguments) throws wisey.lang.MReferenceCountException, wisey.lang.MNullPointerException;
  static void terminate(
    int exitCode);
}

external interface wisey.threads.IProducer {

  void produce();
}

external interface wisey.threads.IThread {

  void run() throws wisey.threads.MThreadBoundaryException;
  ::wisey::model* send(
    ::wisey::model* message) throws wisey.threads.MThreadBoundaryException;
  void exit() throws wisey.threads.MThreadBoundaryException;
  wisey.threads.CCallStack getCallStack() throws wisey.threads.MThreadBoundaryException;
  static void sleep(
    int seconds);
  static void insideThreadGuard(
    wisey.threads.IThread object) throws wisey.threads.MThreadBoundaryException;
  static void outsideThreadGuard(
    wisey.threads.IThread object) throws wisey.threads.MThreadBoundaryException;
}

external interface wisey.threads.IThreadRunner {
}

external interface wisey.threads.IWorker {

  void work() throws wisey.threads.MThreadBoundaryException;
}

/* Models */

external model wisey.io.MFileAccessException
  implements
    wisey.lang.IException {

  string getName() override;
}

external model wisey.io.MFileCloseException
  implements
    wisey.lang.IException {

  string getName() override;
}

external model wisey.io.MFileCouldNotCloseException
  implements
    wisey.lang.IException {

  fixed string mFileName;

  string getName() override;
  string getFileName();
}

external model wisey.io.MFileCouldNotOpenException
  implements
    wisey.lang.IException {

  fixed string mFileName;

  string getName() override;
  string getFileName();
}

external model wisey.io.MFileOpenException
  implements
    wisey.lang.IException {

  fixed string mCurrentFile;
  fixed string mNewFile;

  string getName() override;
  string getCurrentFile();
  string getNewFile();
}

external model wisey.lang.MArrayIndexOutOfBoundsException
  implements
    wisey.lang.IException {

  fixed long mArraySize;
  fixed long mIndex;

  string getName() override;
  long getArraySize();
  long getIndex();
}

external model wisey.lang.MCastException
  implements
    wisey.lang.IException {

  fixed string mFromType;
  fixed string mToType;

  string getName() override;
  string getFromType();
  string getToType();
}

external model wisey.lang.MMainThreadWorker
  implements
    wisey.threads.IWorker {

  fixed immutable string[]* mArguments;

  static int startMainThread(
    string[]* arguments);
  void work() throws wisey.threads.MThreadBoundaryException override;
}

external model wisey.lang.MMainThreadWorker.MProgramResult {

  fixed int mResult;

  int getResult();
}

external model wisey.lang.MNullPointerException
  implements
    wisey.lang.IException {

  string getName() override;
}

external model wisey.lang.MReferenceCountException
  implements
    wisey.lang.IException {

  fixed long mReferenceCount;

  string getName() override;
  long getReferenceCount();
}

external model wisey.lang.MStackOverflowException
  implements
    wisey.lang.IException {

  string getName() override;
}

external model wisey.lang.MString {

  fixed immutable char[]* mContent;

  static wisey.lang.MString* createFromString(
    string input);
  static wisey.lang.MString* createFromCharArray(
    char[] input);
  static wisey.lang.MString* createFromImmutableCharArray(
    immutable char[] input);
  long getLength();
  wisey.lang.MString* copy();
  immutable char[] getContent();
}

external model wisey.lang.MSystem {
}

external model wisey.threads.MThreadBoundaryException
  implements
    wisey.lang.IException {

  fixed boolean mIsMethodInternal;

  string getName() override;
  boolean isMethodInternal();
}

/* Controllers */

external controller wisey.io.CFile {

  void open(
    string fileName) throws wisey.io.MFileOpenException, wisey.io.MFileCouldNotOpenException;
  ::llvm::struct::__sFILE::pointer getFileStruct() throws wisey.io.MFileAccessException;
  void close() throws wisey.io.MFileCloseException, wisey.io.MFileCouldNotCloseException;
}

external controller wisey.lang.CString {

  public constant long DEFAULT_INITIAL_CAPACITY = 16l;

  receive char[]* mBuffer;
  receive long mCapacity;
  receive long mLength;

  static wisey.lang.CString* create();
  static wisey.lang.CString* createFromString(
    string input);
  static wisey.lang.CString* createFromModel(
    wisey.lang.MString input);
  static wisey.lang.CString* createFromCharArray(
    char[] input);
  static wisey.lang.CString* createFromImmutableCharArray(
    immutable char[] input);
  wisey.lang.MString* toModel();
  long getLength();
  wisey.lang.CString* copy();
  wisey.lang.CString appendString(
    string appendix);
  wisey.lang.CString appendCharArray(
    char[] appendix);
  wisey.lang.CString appendImmutableCharArray(
    immutable char[] appendix);
  char[] getContent();
  long getCapacity();
}

external controller wisey.threads.CCallStack {

  public constant int CALL_STACK_SIZE = 1024;

  void pushStack(
    string objectName,
    string methodName,
    string fileName,
    int lineNumber);
  void setLine(
    int lineNumber);
  void popStack();
  void dumpStack();
  void reportException(
    wisey.lang.IException exception);
}

external controller wisey.threads.CProducerThread
  implements
    wisey.threads.IThread {

  void start(
    ::wisey::model* producer,
    int size) throws wisey.threads.MThreadBoundaryException;
  boolean isStarted() throws wisey.threads.MThreadBoundaryException;
  boolean isFinished() throws wisey.threads.MThreadBoundaryException;
  boolean isCancelled() throws wisey.threads.MThreadBoundaryException;
  void cancel() throws wisey.threads.MThreadBoundaryException;
  void reset() throws wisey.threads.MThreadBoundaryException;
  boolean hasResult() throws wisey.threads.MThreadBoundaryException;
  ::wisey::model* consume() throws wisey.threads.MThreadBoundaryException;
  void exit() throws wisey.threads.MThreadBoundaryException override;
  ::wisey::model* send(
    ::wisey::model* message) throws wisey.threads.MThreadBoundaryException override;
  wisey.threads.CCallStack getCallStack() throws wisey.threads.MThreadBoundaryException override;
  void run() throws wisey.threads.MThreadBoundaryException override;
}

external controller wisey.threads.CProducerThreadRunner
  implements
    wisey.threads.IThreadRunner {

  void createThread(
    wisey.threads.IThread producerThread,
    int size);
  boolean isStarted();
  boolean isFinished();
  boolean isCancelled();
  void cancelThread();
  void resetThread();
  boolean hasResult();
  ::wisey::model* consumeResult();
  ::wisey::model* addResult(
    ::wisey::model* result);
  void exitThread();
  boolean hasRoom();
}

external controller wisey.threads.CWorkerThread
  implements
    wisey.threads.IThread {

  void start(
    ::wisey::model* worker) throws wisey.threads.MThreadBoundaryException;
  boolean isStarted() throws wisey.threads.MThreadBoundaryException;
  boolean isFinished() throws wisey.threads.MThreadBoundaryException;
  boolean isCancelled() throws wisey.threads.MThreadBoundaryException;
  ::wisey::model* awaitResult() throws wisey.threads.MThreadBoundaryException;
  void cancel() throws wisey.threads.MThreadBoundaryException;
  void reset() throws wisey.threads.MThreadBoundaryException;
  void exit() throws wisey.threads.MThreadBoundaryException override;
  ::wisey::model* send(
    ::wisey::model* message) throws wisey.threads.MThreadBoundaryException override;
  wisey.threads.CCallStack getCallStack() throws wisey.threads.MThreadBoundaryException override;
  void run() throws wisey.threads.MThreadBoundaryException override;
}

external controller wisey.threads.CWorkerThreadRunner
  implements
    wisey.threads.IThreadRunner {

  void createThread(
    wisey.threads.IThread workerThread);
  boolean isStarted();
  boolean isFinished();
  boolean isCancelled();
  void joinThread();
  void cancelThread();
  void resetThread();
  void exitThread();
  void setResult(
    ::wisey::model* result);
  ::wisey::model* getResult();
}

/* Nodes */

/* Bindings */

/* llvm Structs */

external ::llvm::struct __darwin_pthread_handler_rec {
  ::llvm::void (::llvm::i8::pointer)::pointer,
  ::llvm::i8::pointer,
  ::llvm::struct::__darwin_pthread_handler_rec::pointer,
}

external ::llvm::struct __sFILE {
  ::llvm::i8::pointer,
  ::llvm::i32,
  ::llvm::i32,
  ::llvm::i16,
  ::llvm::i16,
  ::llvm::struct::__sbuf,
  ::llvm::i32,
  ::llvm::i8::pointer,
  ::llvm::i32 (::llvm::i8::pointer)::pointer,
  ::llvm::i32 (::llvm::i8::pointer, ::llvm::i8::pointer, ::llvm::i32)::pointer,
  ::llvm::i64 (::llvm::i8::pointer, ::llvm::i64, ::llvm::i32)::pointer,
  ::llvm::i32 (::llvm::i8::pointer, ::llvm::i8::pointer, ::llvm::i32)::pointer,
  ::llvm::struct::__sbuf,
  ::llvm::i8::pointer,
  ::llvm::i32,
  ::llvm::array(::llvm::i8, 3),
  ::llvm::array(::llvm::i8, 1),
  ::llvm::struct::__sbuf,
  ::llvm::i32,
  ::llvm::i64,
}

external ::llvm::struct __sbuf {
  ::llvm::i8::pointer,
  ::llvm::i32,
}

external ::llvm::struct _opaque_pthread_attr_t {
  ::llvm::i64,
  ::llvm::array(::llvm::i8, 56),
}

external ::llvm::struct _opaque_pthread_t {
  ::llvm::i64,
  ::llvm::struct::__darwin_pthread_handler_rec::pointer,
  ::llvm::array(::llvm::i8, 8176),
}

/* llvm Functions */

external ::llvm::function ::llvm::void "__adjustReferenceCounter"(::llvm::i8::pointer, ::llvm::i64);
external ::llvm::function ::llvm::void "__adjustReferenceCounterForArray"(::llvm::i8::pointer, ::llvm::i64);
external ::llvm::function ::llvm::void "__adjustReferenceCounterForConcreteObjectSafely"(::llvm::i8::pointer, ::llvm::i64);
external ::llvm::function ::llvm::void "__adjustReferenceCounterForConcreteObjectUnsafely"(::llvm::i8::pointer, ::llvm::i64);
external ::llvm::function ::llvm::void "__adjustReferenceCounterForImmutableArray"(::llvm::i8::pointer, ::llvm::i64);
external ::llvm::function ::llvm::i8::pointer "__castObject"(::llvm::i8::pointer, ::llvm::i8::pointer);
external ::llvm::function ::llvm::void "__checkArrayIndexFunction"(::llvm::i64, ::llvm::i64);
external ::llvm::function ::llvm::void "__checkArrayNotReferenced"(::llvm::i64::pointer, ::llvm::i64);
external ::llvm::function ::llvm::void "__checkCastToObject"(::llvm::i8::pointer, ::llvm::i8, ::llvm::i8::pointer);
external ::llvm::function ::llvm::void "__checkForNullAndThrow"(::llvm::i8::pointer);
external ::llvm::function ::llvm::i8::pointer "__cxa_allocate_exception"(::llvm::i64);
external ::llvm::function ::llvm::i8::pointer "__cxa_begin_catch"(::llvm::i8::pointer);
external ::llvm::function ::llvm::void "__cxa_call_unexpected"(::llvm::i8::pointer);
external ::llvm::function ::llvm::void "__cxa_end_catch"();
external ::llvm::function ::llvm::void "__cxa_throw"(::llvm::i8::pointer, ::llvm::i8::pointer, ::llvm::i8::pointer);
external ::llvm::function ::llvm::void "__destroyNativeObjectFunction"(::llvm::i8::pointer);
external ::llvm::function ::llvm::void "__destroyObjectOwnerFunction"(::llvm::i8::pointer);
external ::llvm::function ::llvm::void "__destroyOwnerArrayFunction"(::llvm::i64::pointer, ::llvm::i64, ::llvm::i1);
external ::llvm::function ::llvm::void "__destroyPrimitiveArrayFunction"(::llvm::i64::pointer, ::llvm::i64);
external ::llvm::function ::llvm::void "__destroyReferenceArrayFunction"(::llvm::i64::pointer, ::llvm::i64, ::llvm::i1);
external ::llvm::function ::llvm::i8::pointer "__getOriginalObject"(::llvm::i8::pointer);
external ::llvm::function ::llvm::i8::pointer "__getOriginalObjectName"(::llvm::i8::pointer);
external ::llvm::function ::llvm::i32 "__gxx_personality_v0"(...);
external ::llvm::function ::llvm::i32 "__instanceOf"(::llvm::i8::pointer, ::llvm::i8::pointer);
external ::llvm::function ::llvm::i1 "__isObject"(::llvm::i8::pointer, ::llvm::i8);
external ::llvm::function ::llvm::void "__throwReferenceCountException"(::llvm::i64);
external ::llvm::function ::llvm::void "exit"(::llvm::i32);
external ::llvm::function ::llvm::i32 "fprintf"(::llvm::struct::__sFILE::pointer, ::llvm::i8::pointer, ...);
external ::llvm::function ::llvm::i32 "llvm.eh.typeid.for"(::llvm::i8::pointer);
external ::llvm::function ::llvm::void "llvm.memcpy.p0i8.p0i8.i64"(::llvm::i8::pointer, ::llvm::i8::pointer, ::llvm::i64, ::llvm::i32, ::llvm::i1);
external ::llvm::function ::llvm::void "llvm.memset.p0i8.i64"(::llvm::i8::pointer, ::llvm::i8, ::llvm::i64, ::llvm::i32, ::llvm::i1);
external ::llvm::function ::llvm::i32 "printf"(::llvm::i8::pointer, ...);
external ::llvm::function ::llvm::i64 "strlen"(::llvm::i8::pointer);

/* llvm Globals */

::llvm::struct::__sFILE::pointer __stderrp;
